[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass RemoveUnusedFunctions
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential RemoveUnusedFunctions
def @main(%x: Tensor[(2, 10, 257, 1025), float32]) {
  nn.softmax(%x)
}

[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass ToBasicBlockNormalForm
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential ToBasicBlockNormalForm
def @main(%x: Tensor[(2, 10, 257, 1025), float32]) {
  nn.softmax(%x)
}

[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass sequential
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass Legalize
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:468: InferType;
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:470: After this dependency pass
def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  nn.softmax(%x) /* ty=Tensor[(2, 10, 257, 1025), float32] */
}

[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential Legalize
def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  nn.softmax(%x) /* ty=Tensor[(2, 10, 257, 1025), float32] */
}

[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass Legalize
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:468: InferType;
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:470: After this dependency pass
def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  nn.softmax(%x) /* ty=Tensor[(2, 10, 257, 1025), float32] */
}

[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential Legalize
def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  nn.softmax(%x) /* ty=Tensor[(2, 10, 257, 1025), float32] */
}

[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential sequential
def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  nn.softmax(%x) /* ty=Tensor[(2, 10, 257, 1025), float32] */
}

[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass Legalize
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:468: InferType;
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:470: After this dependency pass
def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  nn.softmax(%x) /* ty=Tensor[(2, 10, 257, 1025), float32] */
}

[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential Legalize
def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  nn.softmax(%x) /* ty=Tensor[(2, 10, 257, 1025), float32] */
}

[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass EtaExpand
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential EtaExpand
def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  nn.softmax(%x)
}

[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass SimplifyInference
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:468: InferType;
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:470: After this dependency pass
def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  nn.softmax(%x) /* ty=Tensor[(2, 10, 257, 1025), float32] */
}

[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential SimplifyInference
def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  nn.softmax(%x) /* ty=Tensor[(2, 10, 257, 1025), float32] */
}

[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass EliminateCommonSubexpr
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass SimplifyExpr
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:468: InferType;
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:470: After this dependency pass
def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  nn.softmax(%x) /* ty=Tensor[(2, 10, 257, 1025), float32] */
}

[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential SimplifyExpr
def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  nn.softmax(%x) /* ty=Tensor[(2, 10, 257, 1025), float32] */
}

[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass InlinePrimitives
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass Inline
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential Inline
def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  nn.softmax(%x) /* ty=Tensor[(2, 10, 257, 1025), float32] */
}

[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass DeadCodeElimination
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential DeadCodeElimination
def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  nn.softmax(%x) /* ty=Tensor[(2, 10, 257, 1025), float32] */
}

[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential InlinePrimitives
def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  nn.softmax(%x) /* ty=Tensor[(2, 10, 257, 1025), float32] */
}

[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass CombineParallelConv2d
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass CombineParallelDense
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass CombineParallelBatchMatmul
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass FoldConstant
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential FoldConstant
def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  nn.softmax(%x) /* ty=Tensor[(2, 10, 257, 1025), float32] */
}

[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass FoldScaleAxis
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass BackwardFoldScaleAxis
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass ForwardFoldScaleAxis
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass FoldConstant
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential FoldConstant
def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  nn.softmax(%x) /* ty=Tensor[(2, 10, 257, 1025), float32] */
}

[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential FoldScaleAxis
def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  nn.softmax(%x) /* ty=Tensor[(2, 10, 257, 1025), float32] */
}

[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass CanonicalizeCast
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass CanonicalizeOps
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass AlterOpLayout
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass FastMath
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass FoldConstant
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential FoldConstant
def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  nn.softmax(%x) /* ty=Tensor[(2, 10, 257, 1025), float32] */
}

[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass FuseOps
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:468: InferType;
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:470: After this dependency pass
def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  nn.softmax(%x) /* ty=Tensor[(2, 10, 257, 1025), float32] */
}

[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential FuseOps
def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  %0 = fn (%p0: Tensor[(2, 10, 257, 1025), float32], Primitive=1) -> Tensor[(2, 10, 257, 1025), float32] {
    nn.softmax(%p0) /* ty=Tensor[(2, 10, 257, 1025), float32] */
  };
  %0(%x) /* ty=Tensor[(2, 10, 257, 1025), float32] */
}

[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass ToANormalForm
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential ToANormalForm
def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  let %x1 = fn (%p0: Tensor[(2, 10, 257, 1025), float32], Primitive=1) -> Tensor[(2, 10, 257, 1025), float32] {
    nn.softmax(%p0) /* ty=Tensor[(2, 10, 257, 1025), float32] */
  };
  let %x2 = %x1(%x);
  %x2
}

[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass InferType
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential InferType
def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  let %x1: fn (Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] = fn (%p0: Tensor[(2, 10, 257, 1025), float32], Primitive=1) -> Tensor[(2, 10, 257, 1025), float32] {
    nn.softmax(%p0) /* ty=Tensor[(2, 10, 257, 1025), float32] */
  };
  let %x2: Tensor[(2, 10, 257, 1025), float32] = %x1(%x) /* ty=Tensor[(2, 10, 257, 1025), float32] */;
  %x2
}

[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass LambdaLift
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential LambdaLift
def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  let %x1: fn (Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] = fn (%p0: Tensor[(2, 10, 257, 1025), float32], Primitive=1) -> Tensor[(2, 10, 257, 1025), float32] {
    nn.softmax(%p0) /* ty=Tensor[(2, 10, 257, 1025), float32] */
  };
  let %x2: Tensor[(2, 10, 257, 1025), float32] = %x1(%x) /* ty=Tensor[(2, 10, 257, 1025), float32] */;
  %x2
}

[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass InlinePrimitives
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass Inline
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential Inline
def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  %0 = fn (%p0: Tensor[(2, 10, 257, 1025), float32], Primitive=1) -> Tensor[(2, 10, 257, 1025), float32] {
    nn.softmax(%p0) /* ty=Tensor[(2, 10, 257, 1025), float32] */
  };
  let %x1: fn (Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] = %0;
  let %x2: Tensor[(2, 10, 257, 1025), float32] = %0(%x);
  %x2
}

[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass DeadCodeElimination
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential DeadCodeElimination
def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  %0 = fn (%p0: Tensor[(2, 10, 257, 1025), float32], Primitive=1) -> Tensor[(2, 10, 257, 1025), float32] {
    nn.softmax(%p0) /* ty=Tensor[(2, 10, 257, 1025), float32] */
  };
  let %x1: Tensor[(2, 10, 257, 1025), float32] = %0(%x) /* ty=Tensor[(2, 10, 257, 1025), float32] */;
  %x1
}

[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential InlinePrimitives
def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  %0 = fn (%p0: Tensor[(2, 10, 257, 1025), float32], Primitive=1) -> Tensor[(2, 10, 257, 1025), float32] {
    nn.softmax(%p0) /* ty=Tensor[(2, 10, 257, 1025), float32] */
  };
  let %x1: Tensor[(2, 10, 257, 1025), float32] = %0(%x) /* ty=Tensor[(2, 10, 257, 1025), float32] */;
  %x1
}

[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass InlineGlobals
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential InlineGlobals
def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  %0 = fn (%p0: Tensor[(2, 10, 257, 1025), float32], Primitive=1) -> Tensor[(2, 10, 257, 1025), float32] {
    nn.softmax(%p0) /* ty=Tensor[(2, 10, 257, 1025), float32] */
  };
  let %x1: Tensor[(2, 10, 257, 1025), float32] = %0(%x) /* ty=Tensor[(2, 10, 257, 1025), float32] */;
  %x1
}

[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass sequential
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass RemoveUnusedFunctions
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential RemoveUnusedFunctions
def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  %0 = fn (%p0: Tensor[(2, 10, 257, 1025), float32], Primitive=1) -> Tensor[(2, 10, 257, 1025), float32] {
    nn.softmax(%p0) /* ty=Tensor[(2, 10, 257, 1025), float32] */
  };
  let %x1: Tensor[(2, 10, 257, 1025), float32] = %0(%x) /* ty=Tensor[(2, 10, 257, 1025), float32] */;
  %x1
}

[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass ManifestAlloc
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential ManifestAlloc
type Storage {
  
}

def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  let %storage_0: Storage[] = memory.alloc_storage(21074000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][0]) /* ty=Storage[] */;
  let %tensor_0: Tensor[(2, 10, 257, 1025), float32] = memory.alloc_tensor(%storage_0, 0 /* ty=int64 */, meta[relay.Constant][0] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][0]) /* ty=Tensor[(2, 10, 257, 1025), float32] */;
  %0 = fn (%p0: Tensor[(2, 10, 257, 1025), float32], Primitive=1) -> Tensor[(2, 10, 257, 1025), float32] {
    nn.softmax(%p0) /* ty=Tensor[(2, 10, 257, 1025), float32] */
  };
  %1 = (%x,);
  %2 = (%tensor_0,);
  let %x1: () = vm.invoke_tvm_op(%0, %1, %2) /* ty=() */;
  let %x2: Tensor[(2, 10, 257, 1025), float32] = %tensor_0;
  %x2
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass FoldConstant
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential FoldConstant
type Storage {
  
}

def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  let %storage_0: Storage[] = memory.alloc_storage(21074000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][0]) /* ty=Storage[] */;
  let %tensor_0: Tensor[(2, 10, 257, 1025), float32] = memory.alloc_tensor(%storage_0, 0 /* ty=int64 */, meta[relay.Constant][0] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][0]) /* ty=Tensor[(2, 10, 257, 1025), float32] */;
  %0 = fn (%p0: Tensor[(2, 10, 257, 1025), float32], Primitive=1) -> Tensor[(2, 10, 257, 1025), float32] {
    nn.softmax(%p0) /* ty=Tensor[(2, 10, 257, 1025), float32] */
  };
  %1 = (%x,);
  %2 = (%tensor_0,);
  let %x1: () = vm.invoke_tvm_op(%0, %1, %2) /* ty=() */;
  let %x2: Tensor[(2, 10, 257, 1025), float32] = %tensor_0;
  %x2
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass FuseOps
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:468: InferType;
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:470: After this dependency pass
type Storage {
  
}

def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  let %storage_0: Storage[] = memory.alloc_storage(21074000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][0]) /* ty=Storage[] */;
  let %tensor_0: Tensor[(2, 10, 257, 1025), float32] = memory.alloc_tensor(%storage_0, 0 /* ty=int64 */, meta[relay.Constant][0] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][0]) /* ty=Tensor[(2, 10, 257, 1025), float32] */;
  %0 = fn (%p0: Tensor[(2, 10, 257, 1025), float32], Primitive=1) -> Tensor[(2, 10, 257, 1025), float32] {
    nn.softmax(%p0) /* ty=Tensor[(2, 10, 257, 1025), float32] */
  };
  %1 = (%x,);
  %2 = (%tensor_0,);
  let %x1: () = vm.invoke_tvm_op(%0, %1, %2) /* ty=() */;
  let %x2: Tensor[(2, 10, 257, 1025), float32] = %tensor_0;
  %x2
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential FuseOps
type Storage {
  
}

def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  let %storage_0: Storage[] = memory.alloc_storage(21074000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][0]) /* ty=Storage[] */;
  let %tensor_0: Tensor[(2, 10, 257, 1025), float32] = memory.alloc_tensor(%storage_0, 0 /* ty=int64 */, meta[relay.Constant][0] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][0]) /* ty=Tensor[(2, 10, 257, 1025), float32] */;
  %0 = fn (%p0: Tensor[(2, 10, 257, 1025), float32], Primitive=1) -> Tensor[(2, 10, 257, 1025), float32] {
    nn.softmax(%p0) /* ty=Tensor[(2, 10, 257, 1025), float32] */
  };
  %1 = (%x,);
  %2 = (%tensor_0,);
  let %x1: () = vm.invoke_tvm_op(%0, %1, %2) /* ty=() */;
  let %x2: Tensor[(2, 10, 257, 1025), float32] = %tensor_0;
  %x2
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass ManifestAlloc
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential ManifestAlloc
type Storage {
  
}

def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  let %storage_0: Storage[] = memory.alloc_storage(21074000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][0]) /* ty=Storage[] */;
  let %tensor_0: Tensor[(2, 10, 257, 1025), float32] = memory.alloc_tensor(%storage_0, 0 /* ty=int64 */, meta[relay.Constant][0] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][0]) /* ty=Tensor[(2, 10, 257, 1025), float32] */;
  %0 = fn (%p0: Tensor[(2, 10, 257, 1025), float32], Primitive=1) -> Tensor[(2, 10, 257, 1025), float32] {
    nn.softmax(%p0) /* ty=Tensor[(2, 10, 257, 1025), float32] */
  };
  %1 = (%x,);
  %2 = (%tensor_0,);
  let %x1: () = vm.invoke_tvm_op(%0, %1, %2) /* ty=() */;
  let %x2: Tensor[(2, 10, 257, 1025), float32] = %tensor_0;
  %x2
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass FuseOps
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:468: InferType;
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:470: After this dependency pass
type Storage {
  
}

def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  let %storage_0: Storage[] = memory.alloc_storage(21074000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][0]) /* ty=Storage[] */;
  let %tensor_0: Tensor[(2, 10, 257, 1025), float32] = memory.alloc_tensor(%storage_0, 0 /* ty=int64 */, meta[relay.Constant][0] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][0]) /* ty=Tensor[(2, 10, 257, 1025), float32] */;
  %0 = fn (%p0: Tensor[(2, 10, 257, 1025), float32], Primitive=1) -> Tensor[(2, 10, 257, 1025), float32] {
    nn.softmax(%p0) /* ty=Tensor[(2, 10, 257, 1025), float32] */
  };
  %1 = (%x,);
  %2 = (%tensor_0,);
  let %x1: () = vm.invoke_tvm_op(%0, %1, %2) /* ty=() */;
  let %x2: Tensor[(2, 10, 257, 1025), float32] = %tensor_0;
  %x2
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential FuseOps
type Storage {
  
}

def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  let %storage_0: Storage[] = memory.alloc_storage(21074000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][0]) /* ty=Storage[] */;
  let %tensor_0: Tensor[(2, 10, 257, 1025), float32] = memory.alloc_tensor(%storage_0, 0 /* ty=int64 */, meta[relay.Constant][0] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][0]) /* ty=Tensor[(2, 10, 257, 1025), float32] */;
  %0 = fn (%p0: Tensor[(2, 10, 257, 1025), float32], Primitive=1) -> Tensor[(2, 10, 257, 1025), float32] {
    nn.softmax(%p0) /* ty=Tensor[(2, 10, 257, 1025), float32] */
  };
  %1 = (%x,);
  %2 = (%tensor_0,);
  let %x1: () = vm.invoke_tvm_op(%0, %1, %2) /* ty=() */;
  let %x2: Tensor[(2, 10, 257, 1025), float32] = %tensor_0;
  %x2
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass FoldConstant
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential FoldConstant
type Storage {
  
}

def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  let %storage_0: Storage[] = memory.alloc_storage(21074000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][0]) /* ty=Storage[] */;
  let %tensor_0: Tensor[(2, 10, 257, 1025), float32] = memory.alloc_tensor(%storage_0, 0 /* ty=int64 */, meta[relay.Constant][0] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][0]) /* ty=Tensor[(2, 10, 257, 1025), float32] */;
  %0 = fn (%p0: Tensor[(2, 10, 257, 1025), float32], Primitive=1) -> Tensor[(2, 10, 257, 1025), float32] {
    nn.softmax(%p0) /* ty=Tensor[(2, 10, 257, 1025), float32] */
  };
  %1 = (%x,);
  %2 = (%tensor_0,);
  let %x1: () = vm.invoke_tvm_op(%0, %1, %2) /* ty=() */;
  let %x2: Tensor[(2, 10, 257, 1025), float32] = %tensor_0;
  %x2
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass FuseOps
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:468: InferType;
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:470: After this dependency pass
type Storage {
  
}

def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  let %storage_0: Storage[] = memory.alloc_storage(21074000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][0]) /* ty=Storage[] */;
  let %tensor_0: Tensor[(2, 10, 257, 1025), float32] = memory.alloc_tensor(%storage_0, 0 /* ty=int64 */, meta[relay.Constant][0] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][0]) /* ty=Tensor[(2, 10, 257, 1025), float32] */;
  %0 = fn (%p0: Tensor[(2, 10, 257, 1025), float32], Primitive=1) -> Tensor[(2, 10, 257, 1025), float32] {
    nn.softmax(%p0) /* ty=Tensor[(2, 10, 257, 1025), float32] */
  };
  %1 = (%x,);
  %2 = (%tensor_0,);
  let %x1: () = vm.invoke_tvm_op(%0, %1, %2) /* ty=() */;
  let %x2: Tensor[(2, 10, 257, 1025), float32] = %tensor_0;
  %x2
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential FuseOps
type Storage {
  
}

def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  let %storage_0: Storage[] = memory.alloc_storage(21074000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][0]) /* ty=Storage[] */;
  let %tensor_0: Tensor[(2, 10, 257, 1025), float32] = memory.alloc_tensor(%storage_0, 0 /* ty=int64 */, meta[relay.Constant][0] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][0]) /* ty=Tensor[(2, 10, 257, 1025), float32] */;
  %0 = fn (%p0: Tensor[(2, 10, 257, 1025), float32], Primitive=1) -> Tensor[(2, 10, 257, 1025), float32] {
    nn.softmax(%p0) /* ty=Tensor[(2, 10, 257, 1025), float32] */
  };
  %1 = (%x,);
  %2 = (%tensor_0,);
  let %x1: () = vm.invoke_tvm_op(%0, %1, %2) /* ty=() */;
  let %x2: Tensor[(2, 10, 257, 1025), float32] = %tensor_0;
  %x2
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass ManifestAlloc
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential ManifestAlloc
type Storage {
  
}

def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  let %storage_0: Storage[] = memory.alloc_storage(21074000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][0]) /* ty=Storage[] */;
  let %tensor_0: Tensor[(2, 10, 257, 1025), float32] = memory.alloc_tensor(%storage_0, 0 /* ty=int64 */, meta[relay.Constant][0] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][0]) /* ty=Tensor[(2, 10, 257, 1025), float32] */;
  %0 = fn (%p0: Tensor[(2, 10, 257, 1025), float32], Primitive=1) -> Tensor[(2, 10, 257, 1025), float32] {
    nn.softmax(%p0) /* ty=Tensor[(2, 10, 257, 1025), float32] */
  };
  %1 = (%x,);
  %2 = (%tensor_0,);
  let %x1: () = vm.invoke_tvm_op(%0, %1, %2) /* ty=() */;
  let %x2: Tensor[(2, 10, 257, 1025), float32] = %tensor_0;
  %x2
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass FoldConstant
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential FoldConstant
type Storage {
  
}

def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  let %storage_0: Storage[] = memory.alloc_storage(21074000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][0]) /* ty=Storage[] */;
  let %tensor_0: Tensor[(2, 10, 257, 1025), float32] = memory.alloc_tensor(%storage_0, 0 /* ty=int64 */, meta[relay.Constant][0] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][0]) /* ty=Tensor[(2, 10, 257, 1025), float32] */;
  %0 = fn (%p0: Tensor[(2, 10, 257, 1025), float32], Primitive=1) -> Tensor[(2, 10, 257, 1025), float32] {
    nn.softmax(%p0) /* ty=Tensor[(2, 10, 257, 1025), float32] */
  };
  %1 = (%x,);
  %2 = (%tensor_0,);
  let %x1: () = vm.invoke_tvm_op(%0, %1, %2) /* ty=() */;
  let %x2: Tensor[(2, 10, 257, 1025), float32] = %tensor_0;
  %x2
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential sequential
type Storage {
  
}

def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  let %storage_0: Storage[] = memory.alloc_storage(21074000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][0]) /* ty=Storage[] */;
  let %tensor_0: Tensor[(2, 10, 257, 1025), float32] = memory.alloc_tensor(%storage_0, 0 /* ty=int64 */, meta[relay.Constant][0] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][0]) /* ty=Tensor[(2, 10, 257, 1025), float32] */;
  %0 = fn (%p0: Tensor[(2, 10, 257, 1025), float32], Primitive=1) -> Tensor[(2, 10, 257, 1025), float32] {
    nn.softmax(%p0) /* ty=Tensor[(2, 10, 257, 1025), float32] */
  };
  %1 = (%x,);
  %2 = (%tensor_0,);
  let %x1: () = vm.invoke_tvm_op(%0, %1, %2) /* ty=() */;
  let %x2: Tensor[(2, 10, 257, 1025), float32] = %tensor_0;
  %x2
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass InferType
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential InferType
type Storage {
  
}

def @main(%x: Tensor[(2, 10, 257, 1025), float32]) -> Tensor[(2, 10, 257, 1025), float32] {
  let %storage_0: Storage[] = memory.alloc_storage(21074000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][0]) /* ty=Storage[] */;
  let %tensor_0: Tensor[(2, 10, 257, 1025), float32] = memory.alloc_tensor(%storage_0, 0 /* ty=int64 */, meta[relay.Constant][0] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][0]) /* ty=Tensor[(2, 10, 257, 1025), float32] */;
  %0 = fn (%p0: Tensor[(2, 10, 257, 1025), float32], Primitive=1) -> Tensor[(2, 10, 257, 1025), float32] {
    nn.softmax(%p0) /* ty=Tensor[(2, 10, 257, 1025), float32] */
  };
  %1 = (%x,);
  %2 = (%tensor_0,);
  let %x1: () = vm.invoke_tvm_op(%0, %1, %2) /* ty=() */;
  let %x2: Tensor[(2, 10, 257, 1025), float32] = %tensor_0;
  %x2
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass LabelOps
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential LabelOps
type Storage {
  
}

def @main(%x: Tensor[(2, 10, 257, 1025), float32], hash="3c99e82e9edbb420") -> Tensor[(2, 10, 257, 1025), float32] {
  let %storage_0: Storage[] = memory.alloc_storage(21074000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][0]) /* ty=Storage[] */;
  let %tensor_0: Tensor[(2, 10, 257, 1025), float32] = memory.alloc_tensor(%storage_0, 0 /* ty=int64 */, meta[relay.Constant][0] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][0]) /* ty=Tensor[(2, 10, 257, 1025), float32] */;
  %0 = fn (%p0: Tensor[(2, 10, 257, 1025), float32], Primitive=1, hash="f238dc117bb6da04") -> Tensor[(2, 10, 257, 1025), float32] {
    nn.softmax(%p0) /* ty=Tensor[(2, 10, 257, 1025), float32] */
  };
  %1 = (%x,);
  %2 = (%tensor_0,);
  let %x1: () = vm.invoke_tvm_op(%0, %1, %2) /* ty=() */;
  let %x2: Tensor[(2, 10, 257, 1025), float32] = %tensor_0;
  %x2
}


[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:532: [[[Show value map here]]]

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i0, range(min=0, ext=2)): floordiv(floordiv(floordiv(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer: int32*262144)), 1025), 257), 10)

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i2, range(min=0, ext=257)): floormod(floordiv(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer: int32*262144)), 1025), 257)

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i0.i1.fused, ): floordiv(floordiv(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer: int32*262144)), 1025), 257)

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i3, range(min=0, ext=1025)): floormod(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer: int32*262144)), 1025)

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i0.i1.fused.i2.fused, ): floordiv(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer: int32*262144)), 1025)

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i0.i1.fused.i2.fused.i3.fused.inner.inner, ): threadIdx.x: int32

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i0.i1.fused.i2.fused.i3.fused.outer, ): i0.i1.fused.i2.fused.i3.fused.outer: int32

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i0.i1.fused.i2.fused.i3.fused.inner.outer, ): blockIdx.x: int32

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i1, range(min=0, ext=10)): floormod(floordiv(floordiv(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer: int32*262144)), 1025), 257), 10)

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i0.i1.fused.i2.fused.i3.fused.inner, ): (threadIdx.x: int32 + (blockIdx.x: int32*1024))

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i0.i1.fused.i2.fused.i3.fused, ): ((threadIdx.x: int32 + (blockIdx.x: int32*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer: int32*262144))

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:538: [[[Show value map end]]]

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:532: [[[Show value map here]]]

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i1, range(min=0, ext=10)): floormod(floordiv((threadIdx.x: int32 + (blockIdx.x: int32*1024)), 257), 10)

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i0, range(min=0, ext=2)): floordiv(floordiv((threadIdx.x: int32 + (blockIdx.x: int32*1024)), 257), 10)

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i0.i1.fused, ): floordiv((threadIdx.x: int32 + (blockIdx.x: int32*1024)), 257)

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i0.i1.fused.i2.fused.outer, ): blockIdx.x: int32

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i0.i1.fused.i2.fused.inner, ): threadIdx.x: int32

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(k, ): k: int32

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i2, range(min=0, ext=257)): floormod((threadIdx.x: int32 + (blockIdx.x: int32*1024)), 257)

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(k, range(min=0, ext=1025)): k: int32

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i0.i1.fused.i2.fused, ): (threadIdx.x: int32 + (blockIdx.x: int32*1024))

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:538: [[[Show value map end]]]

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:532: [[[Show value map here]]]

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i1, range(min=0, ext=10)): floormod(floordiv((threadIdx.x: int32 + (blockIdx.x: int32*1024)), 257), 10)

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i0, range(min=0, ext=2)): floordiv(floordiv((threadIdx.x: int32 + (blockIdx.x: int32*1024)), 257), 10)

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i0.i1.fused, ): floordiv((threadIdx.x: int32 + (blockIdx.x: int32*1024)), 257)

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i0.i1.fused.i2.fused.outer, ): blockIdx.x: int32

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i0.i1.fused.i2.fused.inner, ): threadIdx.x: int32

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(k, ): k: int32

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i2, range(min=0, ext=257)): floormod((threadIdx.x: int32 + (blockIdx.x: int32*1024)), 257)

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(k, range(min=0, ext=1025)): k: int32

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i0.i1.fused.i2.fused, ): (threadIdx.x: int32 + (blockIdx.x: int32*1024))

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:538: [[[Show value map end]]]

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:532: [[[Show value map here]]]

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i1, range(min=0, ext=10)): floormod(floordiv(floordiv(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer: int32*262144)), 1025), 257), 10)

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i0, range(min=0, ext=2)): floordiv(floordiv(floordiv(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer: int32*262144)), 1025), 257), 10)

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i0.i1.fused.i2.fused, ): floordiv(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer: int32*262144)), 1025)

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i2, range(min=0, ext=257)): floormod(floordiv(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer: int32*262144)), 1025), 257)

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i0.i1.fused.i2.fused.i3.fused.inner.inner, ): threadIdx.x: int32

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i0.i1.fused.i2.fused.i3.fused.inner, ): (threadIdx.x: int32 + (blockIdx.x: int32*1024))

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i0.i1.fused, ): floordiv(floordiv(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer: int32*262144)), 1025), 257)

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i0.i1.fused.i2.fused.i3.fused.inner.outer, ): blockIdx.x: int32

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i0.i1.fused.i2.fused.i3.fused.outer, ): i0.i1.fused.i2.fused.i3.fused.outer: int32

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i3, range(min=0, ext=1025)): floormod(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer: int32*262144)), 1025)

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i0.i1.fused.i2.fused.i3.fused, ): ((threadIdx.x: int32 + (blockIdx.x: int32*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer: int32*262144))

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:538: [[[Show value map end]]]

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:532: [[[Show value map here]]]

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i1, range(min=0, ext=10)): floormod(floordiv((threadIdx.x: int32 + (blockIdx.x: int32*1024)), 257), 10)

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i0, range(min=0, ext=2)): floordiv(floordiv((threadIdx.x: int32 + (blockIdx.x: int32*1024)), 257), 10)

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i0.i1.fused.i2.fused.inner, ): threadIdx.x: int32

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i2, range(min=0, ext=257)): floormod((threadIdx.x: int32 + (blockIdx.x: int32*1024)), 257)

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i0.i1.fused, ): floordiv((threadIdx.x: int32 + (blockIdx.x: int32*1024)), 257)

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(k, ): k: int32

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i0.i1.fused.i2.fused.outer, ): blockIdx.x: int32

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(k, range(min=0, ext=1025)): k: int32

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i0.i1.fused.i2.fused, ): (threadIdx.x: int32 + (blockIdx.x: int32*1024))

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:538: [[[Show value map end]]]

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:532: [[[Show value map here]]]

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i1, range(min=0, ext=10)): floormod(floordiv((threadIdx.x: int32 + (blockIdx.x: int32*1024)), 257), 10)

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i0, range(min=0, ext=2)): floordiv(floordiv((threadIdx.x: int32 + (blockIdx.x: int32*1024)), 257), 10)

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i0.i1.fused.i2.fused.inner, ): threadIdx.x: int32

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i2, range(min=0, ext=257)): floormod((threadIdx.x: int32 + (blockIdx.x: int32*1024)), 257)

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i0.i1.fused, ): floordiv((threadIdx.x: int32 + (blockIdx.x: int32*1024)), 257)

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(k, ): k: int32

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i0.i1.fused.i2.fused.outer, ): blockIdx.x: int32

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(k, range(min=0, ext=1025)): k: int32

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:535: iter_var(i0.i1.fused.i2.fused, ): (threadIdx.x: int32 + (blockIdx.x: int32*1024))

[15:20:36] /workspace/home/codes/tvm/src/te/schedule/message_passing.cc:538: [[[Show value map end]]]

[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass tir.InjectPrefetch
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential tir.InjectPrefetch
primfn(placeholder_1: handle, T_softmax_norm_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_softmax", "tir.noalias": True}
  buffers = {T_softmax_norm: Buffer(T_softmax_norm_2: Pointer(float32), float32, [2, 10, 257, 1025], []),
             placeholder: Buffer(placeholder_2: Pointer(float32), float32, [2, 10, 257, 1025], [])}
  buffer_map = {placeholder_1: placeholder, T_softmax_norm_1: T_softmax_norm} {
  attr [T_softmax_maxelem: Buffer(T_softmax_maxelem_1: Pointer(float32), float32, [2, 10, 257], [])] "realize_scope" = "";
  realize(T_softmax_maxelem, [0:2, 0:10, 0:257], True {
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
    attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
      if @tir.likely((floordiv(floordiv((threadIdx.x + (blockIdx.x*1024)), 257), 10) < 2), dtype=bool) {
        if @tir.likely((floordiv((threadIdx.x + (blockIdx.x*1024)), 257) < 20), dtype=bool) {
          if @tir.likely(((threadIdx.x + (blockIdx.x*1024)) < 5140), dtype=bool) {
            T_softmax_maxelem[floordiv(floordiv((threadIdx.x + (blockIdx.x*1024)), 257), 10), floormod(floordiv((threadIdx.x + (blockIdx.x*1024)), 257), 10), floormod((threadIdx.x + (blockIdx.x*1024)), 257)] = -3.40282e+38f32
          }
        }
      }
      for (k: int32, 0, 1025) {
        if @tir.likely((floordiv(floordiv((threadIdx.x + (blockIdx.x*1024)), 257), 10) < 2), dtype=bool) {
          if @tir.likely((floordiv((threadIdx.x + (blockIdx.x*1024)), 257) < 20), dtype=bool) {
            if @tir.likely(((threadIdx.x + (blockIdx.x*1024)) < 5140), dtype=bool) {
              T_softmax_maxelem[floordiv(floordiv((threadIdx.x + (blockIdx.x*1024)), 257), 10), floormod(floordiv((threadIdx.x + (blockIdx.x*1024)), 257), 10), floormod((threadIdx.x + (blockIdx.x*1024)), 257)] = max(T_softmax_maxelem[floordiv(floordiv((threadIdx.x + (blockIdx.x*1024)), 257), 10), floormod(floordiv((threadIdx.x + (blockIdx.x*1024)), 257), 10), floormod((threadIdx.x + (blockIdx.x*1024)), 257)], placeholder[floordiv(floordiv((threadIdx.x + (blockIdx.x*1024)), 257), 10), floormod(floordiv((threadIdx.x + (blockIdx.x*1024)), 257), 10), floormod((threadIdx.x + (blockIdx.x*1024)), 257), k])
            }
          }
        }
      }
    }
    attr [T_softmax_exp: Buffer(T_softmax_exp_1: Pointer(float32), float32, [2, 10, 257, 1025], [])] "realize_scope" = "";
    realize(T_softmax_exp, [0:2, 0:10, 0:257, 0:1025], True {
      attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
      for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 21) {
        if @tir.likely((floordiv(floordiv(floordiv(((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025), 257), 10) < 2), dtype=bool) {
          if @tir.likely((floordiv(floordiv(((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025), 257) < 20), dtype=bool) {
            if @tir.likely((floordiv(((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025) < 5140), dtype=bool) {
              if @tir.likely((((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)) < 5268500), dtype=bool) {
                T_softmax_exp[floordiv(floordiv(floordiv(((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025), 257), 10), floormod(floordiv(floordiv(((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025), 257), 10), floormod(floordiv(((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025), 257), floormod(((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025)] = @tir.exp((placeholder[floordiv(floordiv(floordiv(((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025), 257), 10), floormod(floordiv(floordiv(((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025), 257), 10), floormod(floordiv(((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025), 257), floormod(((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025)] - T_softmax_maxelem[floordiv(floordiv(floordiv(((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025), 257), 10), floormod(floordiv(floordiv(((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025), 257), 10), floormod(floordiv(((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025), 257)]), dtype=float32)
              }
            }
          }
        }
      }
      attr [T_softmax_expsum: Buffer(T_softmax_expsum_1: Pointer(float32), float32, [2, 10, 257], [])] "realize_scope" = "";
      realize(T_softmax_expsum, [0:2, 0:10, 0:257], True {
        attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
        attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
          if @tir.likely((floordiv(floordiv((threadIdx.x_2 + (blockIdx.x_2*1024)), 257), 10) < 2), dtype=bool) {
            if @tir.likely((floordiv((threadIdx.x_2 + (blockIdx.x_2*1024)), 257) < 20), dtype=bool) {
              if @tir.likely(((threadIdx.x_2 + (blockIdx.x_2*1024)) < 5140), dtype=bool) {
                T_softmax_expsum[floordiv(floordiv((threadIdx.x_2 + (blockIdx.x_2*1024)), 257), 10), floormod(floordiv((threadIdx.x_2 + (blockIdx.x_2*1024)), 257), 10), floormod((threadIdx.x_2 + (blockIdx.x_2*1024)), 257)] = 0f32
              }
            }
          }
          for (k_1: int32, 0, 1025) {
            if @tir.likely((floordiv(floordiv((threadIdx.x_2 + (blockIdx.x_2*1024)), 257), 10) < 2), dtype=bool) {
              if @tir.likely((floordiv((threadIdx.x_2 + (blockIdx.x_2*1024)), 257) < 20), dtype=bool) {
                if @tir.likely(((threadIdx.x_2 + (blockIdx.x_2*1024)) < 5140), dtype=bool) {
                  T_softmax_expsum[floordiv(floordiv((threadIdx.x_2 + (blockIdx.x_2*1024)), 257), 10), floormod(floordiv((threadIdx.x_2 + (blockIdx.x_2*1024)), 257), 10), floormod((threadIdx.x_2 + (blockIdx.x_2*1024)), 257)] = (T_softmax_expsum[floordiv(floordiv((threadIdx.x_2 + (blockIdx.x_2*1024)), 257), 10), floormod(floordiv((threadIdx.x_2 + (blockIdx.x_2*1024)), 257), 10), floormod((threadIdx.x_2 + (blockIdx.x_2*1024)), 257)] + T_softmax_exp[floordiv(floordiv((threadIdx.x_2 + (blockIdx.x_2*1024)), 257), 10), floormod(floordiv((threadIdx.x_2 + (blockIdx.x_2*1024)), 257), 10), floormod((threadIdx.x_2 + (blockIdx.x_2*1024)), 257), k_1])
                }
              }
            }
          }
        }
        attr [T_softmax_norm] "realize_scope" = "";
        realize(T_softmax_norm, [0:2, 0:10, 0:257, 0:1025], True {
          attr [IterVar(blockIdx.x_3: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
          attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
          for (i0.i1.fused.i2.fused.i3.fused.outer_1: int32, 0, 21) {
            if @tir.likely((floordiv(floordiv(floordiv(((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)), 1025), 257), 10) < 2), dtype=bool) {
              if @tir.likely((floordiv(floordiv(((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)), 1025), 257) < 20), dtype=bool) {
                if @tir.likely((floordiv(((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)), 1025) < 5140), dtype=bool) {
                  if @tir.likely((((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)) < 5268500), dtype=bool) {
                    T_softmax_norm[floordiv(floordiv(floordiv(((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)), 1025), 257), 10), floormod(floordiv(floordiv(((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)), 1025), 257), 10), floormod(floordiv(((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)), 1025), 257), floormod(((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)), 1025)] = (T_softmax_exp[floordiv(floordiv(floordiv(((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)), 1025), 257), 10), floormod(floordiv(floordiv(((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)), 1025), 257), 10), floormod(floordiv(((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)), 1025), 257), floormod(((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)), 1025)] / T_softmax_expsum[floordiv(floordiv(floordiv(((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)), 1025), 257), 10), floormod(floordiv(floordiv(((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)), 1025), 257), 10), floormod(floordiv(((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)), 1025), 257)])
                  }
                }
              }
            }
          }
        })
      })
    })
  })
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass tir.StorageFlatten
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((floordiv((threadIdx.x: int32 + (blockIdx.x: int32*1024)), 2570)*10) + floormod(floordiv((threadIdx.x + (blockIdx.x*1024)), 257), 10))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify floordiv(((blockIdx.x: int32*1024) + threadIdx.x: int32), 257)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((floordiv(((blockIdx.x: int32*1024) + threadIdx.x: int32), 257)*257) + floormod((threadIdx.x + (blockIdx.x*1024)), 257))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify ((blockIdx.x: int32*1024) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((floordiv((threadIdx.x: int32 + (blockIdx.x: int32*1024)), 2570)*10) + floormod(floordiv((threadIdx.x + (blockIdx.x*1024)), 257), 10))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify floordiv(((blockIdx.x: int32*1024) + threadIdx.x: int32), 257)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((floordiv(((blockIdx.x: int32*1024) + threadIdx.x: int32), 257)*257) + floormod((threadIdx.x + (blockIdx.x*1024)), 257))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify ((blockIdx.x: int32*1024) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((floordiv((threadIdx.x: int32 + (blockIdx.x: int32*1024)), 2570)*10) + floormod(floordiv((threadIdx.x + (blockIdx.x*1024)), 257), 10))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify floordiv(((blockIdx.x: int32*1024) + threadIdx.x: int32), 257)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((floordiv(((blockIdx.x: int32*1024) + threadIdx.x: int32), 257)*257) + floormod((threadIdx.x + (blockIdx.x*1024)), 257))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify ((blockIdx.x: int32*1024) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((((blockIdx.x: int32*1024) + threadIdx.x: int32)*1025) + k: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify (((blockIdx.x: int32*1049600) + (threadIdx.x: int32*1025)) + k: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((floordiv((threadIdx.x: int32 + (blockIdx.x: int32*1024)), 2570)*10) + floormod(floordiv((threadIdx.x + (blockIdx.x*1024)), 257), 10))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify floordiv(((blockIdx.x: int32*1024) + threadIdx.x: int32), 257)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((floordiv(((blockIdx.x: int32*1024) + threadIdx.x: int32), 257)*257) + floormod((threadIdx.x + (blockIdx.x*1024)), 257))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify ((blockIdx.x: int32*1024) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((floordiv(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer: int32*262144)), 2634250)*10) + floormod(floordiv(((threadIdx.x + (blockIdx.x*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 263425), 10))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify floordiv((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32), 263425)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((floordiv((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32), 263425)*257) + floormod(floordiv(((threadIdx.x + (blockIdx.x*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025), 257))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify floordiv((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32), 1025)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((floordiv((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32), 1025)*1025) + floormod(((threadIdx.x + (blockIdx.x*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify (((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((floordiv(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer: int32*262144)), 2634250)*10) + floormod(floordiv(((threadIdx.x + (blockIdx.x*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 263425), 10))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify floordiv((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32), 263425)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((floordiv((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32), 263425)*257) + floormod(floordiv(((threadIdx.x + (blockIdx.x*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025), 257))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify floordiv((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32), 1025)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((floordiv(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer: int32*262144)), 2634250)*10) + floormod(floordiv(((threadIdx.x + (blockIdx.x*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 263425), 10))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify floordiv((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32), 263425)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((floordiv((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32), 263425)*257) + floormod(floordiv(((threadIdx.x + (blockIdx.x*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025), 257))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify floordiv((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32), 1025)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((floordiv((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32), 1025)*1025) + floormod(((threadIdx.x + (blockIdx.x*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify (((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((floordiv((threadIdx.x: int32 + (blockIdx.x: int32*1024)), 2570)*10) + floormod(floordiv((threadIdx.x + (blockIdx.x*1024)), 257), 10))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify floordiv(((blockIdx.x: int32*1024) + threadIdx.x: int32), 257)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((floordiv(((blockIdx.x: int32*1024) + threadIdx.x: int32), 257)*257) + floormod((threadIdx.x + (blockIdx.x*1024)), 257))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify ((blockIdx.x: int32*1024) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((floordiv((threadIdx.x: int32 + (blockIdx.x: int32*1024)), 2570)*10) + floormod(floordiv((threadIdx.x + (blockIdx.x*1024)), 257), 10))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify floordiv(((blockIdx.x: int32*1024) + threadIdx.x: int32), 257)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((floordiv(((blockIdx.x: int32*1024) + threadIdx.x: int32), 257)*257) + floormod((threadIdx.x + (blockIdx.x*1024)), 257))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify ((blockIdx.x: int32*1024) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((floordiv((threadIdx.x: int32 + (blockIdx.x: int32*1024)), 2570)*10) + floormod(floordiv((threadIdx.x + (blockIdx.x*1024)), 257), 10))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify floordiv(((blockIdx.x: int32*1024) + threadIdx.x: int32), 257)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((floordiv(((blockIdx.x: int32*1024) + threadIdx.x: int32), 257)*257) + floormod((threadIdx.x + (blockIdx.x*1024)), 257))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify ((blockIdx.x: int32*1024) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((((blockIdx.x: int32*1024) + threadIdx.x: int32)*1025) + k: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify (((blockIdx.x: int32*1049600) + (threadIdx.x: int32*1025)) + k: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((floordiv((threadIdx.x: int32 + (blockIdx.x: int32*1024)), 2570)*10) + floormod(floordiv((threadIdx.x + (blockIdx.x*1024)), 257), 10))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify floordiv(((blockIdx.x: int32*1024) + threadIdx.x: int32), 257)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((floordiv(((blockIdx.x: int32*1024) + threadIdx.x: int32), 257)*257) + floormod((threadIdx.x + (blockIdx.x*1024)), 257))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify ((blockIdx.x: int32*1024) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((floordiv(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer: int32*262144)), 2634250)*10) + floormod(floordiv(((threadIdx.x + (blockIdx.x*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 263425), 10))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify floordiv((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32), 263425)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((floordiv((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32), 263425)*257) + floormod(floordiv(((threadIdx.x + (blockIdx.x*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025), 257))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify floordiv((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32), 1025)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((floordiv((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32), 1025)*1025) + floormod(((threadIdx.x + (blockIdx.x*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify (((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((floordiv(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer: int32*262144)), 2634250)*10) + floormod(floordiv(((threadIdx.x + (blockIdx.x*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 263425), 10))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify floordiv((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32), 263425)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((floordiv((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32), 263425)*257) + floormod(floordiv(((threadIdx.x + (blockIdx.x*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025), 257))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify floordiv((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32), 1025)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((floordiv(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer: int32*262144)), 2634250)*10) + floormod(floordiv(((threadIdx.x + (blockIdx.x*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 263425), 10))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify floordiv((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32), 263425)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((floordiv((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32), 263425)*257) + floormod(floordiv(((threadIdx.x + (blockIdx.x*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025), 257))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify floordiv((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32), 1025)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((floordiv((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32), 1025)*1025) + floormod(((threadIdx.x + (blockIdx.x*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify (((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential tir.StorageFlatten
primfn(placeholder_1: handle, T_softmax_norm_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_softmax", "tir.noalias": True}
  buffers = {T_softmax_norm: Buffer(T_softmax_norm_2: Pointer(float32), float32, [2, 10, 257, 1025], []),
             placeholder: Buffer(placeholder_2: Pointer(float32), float32, [2, 10, 257, 1025], [])}
  buffer_map = {placeholder_1: placeholder, T_softmax_norm_1: T_softmax_norm} {
  attr [T_softmax_maxelem: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_maxelem, float32, [2, 10, 257]) {
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
    attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
      if @tir.likely((floordiv(floordiv((threadIdx.x + (blockIdx.x*1024)), 257), 10) < 2), dtype=bool) {
        if @tir.likely((floordiv((threadIdx.x + (blockIdx.x*1024)), 257) < 20), dtype=bool) {
          if @tir.likely(((threadIdx.x + (blockIdx.x*1024)) < 5140), dtype=bool) {
            T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = -3.40282e+38f32
          }
        }
      }
      for (k: int32, 0, 1025) {
        if @tir.likely((floordiv(floordiv((threadIdx.x + (blockIdx.x*1024)), 257), 10) < 2), dtype=bool) {
          if @tir.likely((floordiv((threadIdx.x + (blockIdx.x*1024)), 257) < 20), dtype=bool) {
            if @tir.likely(((threadIdx.x + (blockIdx.x*1024)) < 5140), dtype=bool) {
              T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = max((float32*)T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)], (float32*)placeholder_2[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k)])
            }
          }
        }
      }
    }
    attr [T_softmax_exp: Pointer(float32)] "storage_scope" = "global";
    allocate(T_softmax_exp, float32, [2, 10, 257, 1025]) {
      attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
      for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 21) {
        if @tir.likely((floordiv(floordiv(floordiv(((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025), 257), 10) < 2), dtype=bool) {
          if @tir.likely((floordiv(floordiv(((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025), 257) < 20), dtype=bool) {
            if @tir.likely((floordiv(((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025) < 5140), dtype=bool) {
              if @tir.likely((((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)) < 5268500), dtype=bool) {
                T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] = @tir.exp(((float32*)placeholder_2[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] - (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1), 1025)]), dtype=float32)
              }
            }
          }
        }
      }
      attr [T_softmax_expsum: Pointer(float32)] "storage_scope" = "global";
      allocate(T_softmax_expsum, float32, [2, 10, 257]) {
        attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
        attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
          if @tir.likely((floordiv(floordiv((threadIdx.x_2 + (blockIdx.x_2*1024)), 257), 10) < 2), dtype=bool) {
            if @tir.likely((floordiv((threadIdx.x_2 + (blockIdx.x_2*1024)), 257) < 20), dtype=bool) {
              if @tir.likely(((threadIdx.x_2 + (blockIdx.x_2*1024)) < 5140), dtype=bool) {
                T_softmax_expsum[((blockIdx.x_2*1024) + threadIdx.x_2)] = 0f32
              }
            }
          }
          for (k_1: int32, 0, 1025) {
            if @tir.likely((floordiv(floordiv((threadIdx.x_2 + (blockIdx.x_2*1024)), 257), 10) < 2), dtype=bool) {
              if @tir.likely((floordiv((threadIdx.x_2 + (blockIdx.x_2*1024)), 257) < 20), dtype=bool) {
                if @tir.likely(((threadIdx.x_2 + (blockIdx.x_2*1024)) < 5140), dtype=bool) {
                  T_softmax_expsum[((blockIdx.x_2*1024) + threadIdx.x_2)] = ((float32*)T_softmax_expsum[((blockIdx.x_2*1024) + threadIdx.x_2)] + (float32*)T_softmax_exp[(((blockIdx.x_2*1049600) + (threadIdx.x_2*1025)) + k_1)])
                }
              }
            }
          }
        }
        attr [IterVar(blockIdx.x_3: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
        attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
        for (i0.i1.fused.i2.fused.i3.fused.outer_1: int32, 0, 21) {
          if @tir.likely((floordiv(floordiv(floordiv(((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)), 1025), 257), 10) < 2), dtype=bool) {
            if @tir.likely((floordiv(floordiv(((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)), 1025), 257) < 20), dtype=bool) {
              if @tir.likely((floordiv(((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)), 1025) < 5140), dtype=bool) {
                if @tir.likely((((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)) < 5268500), dtype=bool) {
                  T_softmax_norm_2[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] = ((float32*)T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] / (float32*)T_softmax_expsum[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3), 1025)])
                }
              }
            }
          }
        }
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass tir.BF16Legalize
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass tir.BF16Promote
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential tir.BF16Promote
primfn(placeholder_1: handle, T_softmax_norm_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_softmax", "tir.noalias": True}
  buffers = {T_softmax_norm: Buffer(T_softmax_norm_2: Pointer(float32), float32, [2, 10, 257, 1025], []),
             placeholder: Buffer(placeholder_2: Pointer(float32), float32, [2, 10, 257, 1025], [])}
  buffer_map = {placeholder_1: placeholder, T_softmax_norm_1: T_softmax_norm} {
  attr [T_softmax_maxelem: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_maxelem, float32, [2, 10, 257]) {
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
    attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
      if @tir.likely((floordiv(floordiv((threadIdx.x + (blockIdx.x*1024)), 257), 10) < 2), dtype=bool) {
        if @tir.likely((floordiv((threadIdx.x + (blockIdx.x*1024)), 257) < 20), dtype=bool) {
          if @tir.likely(((threadIdx.x + (blockIdx.x*1024)) < 5140), dtype=bool) {
            T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = -3.40282e+38f32
          }
        }
      }
      for (k: int32, 0, 1025) {
        if @tir.likely((floordiv(floordiv((threadIdx.x + (blockIdx.x*1024)), 257), 10) < 2), dtype=bool) {
          if @tir.likely((floordiv((threadIdx.x + (blockIdx.x*1024)), 257) < 20), dtype=bool) {
            if @tir.likely(((threadIdx.x + (blockIdx.x*1024)) < 5140), dtype=bool) {
              T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = max((float32*)T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)], (float32*)placeholder_2[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k)])
            }
          }
        }
      }
    }
    attr [T_softmax_exp: Pointer(float32)] "storage_scope" = "global";
    allocate(T_softmax_exp, float32, [2, 10, 257, 1025]) {
      attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
      for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 21) {
        if @tir.likely((floordiv(floordiv(floordiv(((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025), 257), 10) < 2), dtype=bool) {
          if @tir.likely((floordiv(floordiv(((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025), 257) < 20), dtype=bool) {
            if @tir.likely((floordiv(((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025) < 5140), dtype=bool) {
              if @tir.likely((((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)) < 5268500), dtype=bool) {
                T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] = @tir.exp(((float32*)placeholder_2[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] - (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1), 1025)]), dtype=float32)
              }
            }
          }
        }
      }
      attr [T_softmax_expsum: Pointer(float32)] "storage_scope" = "global";
      allocate(T_softmax_expsum, float32, [2, 10, 257]) {
        attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
        attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
          if @tir.likely((floordiv(floordiv((threadIdx.x_2 + (blockIdx.x_2*1024)), 257), 10) < 2), dtype=bool) {
            if @tir.likely((floordiv((threadIdx.x_2 + (blockIdx.x_2*1024)), 257) < 20), dtype=bool) {
              if @tir.likely(((threadIdx.x_2 + (blockIdx.x_2*1024)) < 5140), dtype=bool) {
                T_softmax_expsum[((blockIdx.x_2*1024) + threadIdx.x_2)] = 0f32
              }
            }
          }
          for (k_1: int32, 0, 1025) {
            if @tir.likely((floordiv(floordiv((threadIdx.x_2 + (blockIdx.x_2*1024)), 257), 10) < 2), dtype=bool) {
              if @tir.likely((floordiv((threadIdx.x_2 + (blockIdx.x_2*1024)), 257) < 20), dtype=bool) {
                if @tir.likely(((threadIdx.x_2 + (blockIdx.x_2*1024)) < 5140), dtype=bool) {
                  T_softmax_expsum[((blockIdx.x_2*1024) + threadIdx.x_2)] = ((float32*)T_softmax_expsum[((blockIdx.x_2*1024) + threadIdx.x_2)] + (float32*)T_softmax_exp[(((blockIdx.x_2*1049600) + (threadIdx.x_2*1025)) + k_1)])
                }
              }
            }
          }
        }
        attr [IterVar(blockIdx.x_3: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
        attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
        for (i0.i1.fused.i2.fused.i3.fused.outer_1: int32, 0, 21) {
          if @tir.likely((floordiv(floordiv(floordiv(((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)), 1025), 257), 10) < 2), dtype=bool) {
            if @tir.likely((floordiv(floordiv(((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)), 1025), 257) < 20), dtype=bool) {
              if @tir.likely((floordiv(((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)), 1025) < 5140), dtype=bool) {
                if @tir.likely((((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)) < 5268500), dtype=bool) {
                  T_softmax_norm_2[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] = ((float32*)T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] / (float32*)T_softmax_expsum[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3), 1025)])
                }
              }
            }
          }
        }
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass tir.BF16CastElimination
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential tir.BF16CastElimination
primfn(placeholder_1: handle, T_softmax_norm_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_softmax", "tir.noalias": True}
  buffers = {T_softmax_norm: Buffer(T_softmax_norm_2: Pointer(float32), float32, [2, 10, 257, 1025], []),
             placeholder: Buffer(placeholder_2: Pointer(float32), float32, [2, 10, 257, 1025], [])}
  buffer_map = {placeholder_1: placeholder, T_softmax_norm_1: T_softmax_norm} {
  attr [T_softmax_maxelem: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_maxelem, float32, [2, 10, 257]) {
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
    attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
      if @tir.likely((floordiv(floordiv((threadIdx.x + (blockIdx.x*1024)), 257), 10) < 2), dtype=bool) {
        if @tir.likely((floordiv((threadIdx.x + (blockIdx.x*1024)), 257) < 20), dtype=bool) {
          if @tir.likely(((threadIdx.x + (blockIdx.x*1024)) < 5140), dtype=bool) {
            T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = -3.40282e+38f32
          }
        }
      }
      for (k: int32, 0, 1025) {
        if @tir.likely((floordiv(floordiv((threadIdx.x + (blockIdx.x*1024)), 257), 10) < 2), dtype=bool) {
          if @tir.likely((floordiv((threadIdx.x + (blockIdx.x*1024)), 257) < 20), dtype=bool) {
            if @tir.likely(((threadIdx.x + (blockIdx.x*1024)) < 5140), dtype=bool) {
              T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = max((float32*)T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)], (float32*)placeholder_2[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k)])
            }
          }
        }
      }
    }
    attr [T_softmax_exp: Pointer(float32)] "storage_scope" = "global";
    allocate(T_softmax_exp, float32, [2, 10, 257, 1025]) {
      attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
      for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 21) {
        if @tir.likely((floordiv(floordiv(floordiv(((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025), 257), 10) < 2), dtype=bool) {
          if @tir.likely((floordiv(floordiv(((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025), 257) < 20), dtype=bool) {
            if @tir.likely((floordiv(((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025) < 5140), dtype=bool) {
              if @tir.likely((((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)) < 5268500), dtype=bool) {
                T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] = @tir.exp(((float32*)placeholder_2[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] - (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1), 1025)]), dtype=float32)
              }
            }
          }
        }
      }
      attr [T_softmax_expsum: Pointer(float32)] "storage_scope" = "global";
      allocate(T_softmax_expsum, float32, [2, 10, 257]) {
        attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
        attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
          if @tir.likely((floordiv(floordiv((threadIdx.x_2 + (blockIdx.x_2*1024)), 257), 10) < 2), dtype=bool) {
            if @tir.likely((floordiv((threadIdx.x_2 + (blockIdx.x_2*1024)), 257) < 20), dtype=bool) {
              if @tir.likely(((threadIdx.x_2 + (blockIdx.x_2*1024)) < 5140), dtype=bool) {
                T_softmax_expsum[((blockIdx.x_2*1024) + threadIdx.x_2)] = 0f32
              }
            }
          }
          for (k_1: int32, 0, 1025) {
            if @tir.likely((floordiv(floordiv((threadIdx.x_2 + (blockIdx.x_2*1024)), 257), 10) < 2), dtype=bool) {
              if @tir.likely((floordiv((threadIdx.x_2 + (blockIdx.x_2*1024)), 257) < 20), dtype=bool) {
                if @tir.likely(((threadIdx.x_2 + (blockIdx.x_2*1024)) < 5140), dtype=bool) {
                  T_softmax_expsum[((blockIdx.x_2*1024) + threadIdx.x_2)] = ((float32*)T_softmax_expsum[((blockIdx.x_2*1024) + threadIdx.x_2)] + (float32*)T_softmax_exp[(((blockIdx.x_2*1049600) + (threadIdx.x_2*1025)) + k_1)])
                }
              }
            }
          }
        }
        attr [IterVar(blockIdx.x_3: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
        attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
        for (i0.i1.fused.i2.fused.i3.fused.outer_1: int32, 0, 21) {
          if @tir.likely((floordiv(floordiv(floordiv(((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)), 1025), 257), 10) < 2), dtype=bool) {
            if @tir.likely((floordiv(floordiv(((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)), 1025), 257) < 20), dtype=bool) {
              if @tir.likely((floordiv(((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)), 1025) < 5140), dtype=bool) {
                if @tir.likely((((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)) < 5268500), dtype=bool) {
                  T_softmax_norm_2[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] = ((float32*)T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] / (float32*)T_softmax_expsum[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3), 1025)])
                }
              }
            }
          }
        }
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass tir.BF16TypeLowering
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential tir.BF16TypeLowering
primfn(placeholder_1: handle, T_softmax_norm_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_softmax", "tir.noalias": True}
  buffers = {T_softmax_norm: Buffer(T_softmax_norm_2: Pointer(float32), float32, [2, 10, 257, 1025], []),
             placeholder: Buffer(placeholder_2: Pointer(float32), float32, [2, 10, 257, 1025], [])}
  buffer_map = {placeholder_1: placeholder, T_softmax_norm_1: T_softmax_norm} {
  attr [T_softmax_maxelem: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_maxelem, float32, [2, 10, 257]) {
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
    attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
      if @tir.likely((floordiv(floordiv((threadIdx.x + (blockIdx.x*1024)), 257), 10) < 2), dtype=bool) {
        if @tir.likely((floordiv((threadIdx.x + (blockIdx.x*1024)), 257) < 20), dtype=bool) {
          if @tir.likely(((threadIdx.x + (blockIdx.x*1024)) < 5140), dtype=bool) {
            T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = -3.40282e+38f32
          }
        }
      }
      for (k: int32, 0, 1025) {
        if @tir.likely((floordiv(floordiv((threadIdx.x + (blockIdx.x*1024)), 257), 10) < 2), dtype=bool) {
          if @tir.likely((floordiv((threadIdx.x + (blockIdx.x*1024)), 257) < 20), dtype=bool) {
            if @tir.likely(((threadIdx.x + (blockIdx.x*1024)) < 5140), dtype=bool) {
              T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = max((float32*)T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)], (float32*)placeholder_2[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k)])
            }
          }
        }
      }
    }
    attr [T_softmax_exp: Pointer(float32)] "storage_scope" = "global";
    allocate(T_softmax_exp, float32, [2, 10, 257, 1025]) {
      attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
      for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 21) {
        if @tir.likely((floordiv(floordiv(floordiv(((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025), 257), 10) < 2), dtype=bool) {
          if @tir.likely((floordiv(floordiv(((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025), 257) < 20), dtype=bool) {
            if @tir.likely((floordiv(((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025) < 5140), dtype=bool) {
              if @tir.likely((((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)) < 5268500), dtype=bool) {
                T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] = @tir.exp(((float32*)placeholder_2[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] - (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1), 1025)]), dtype=float32)
              }
            }
          }
        }
      }
      attr [T_softmax_expsum: Pointer(float32)] "storage_scope" = "global";
      allocate(T_softmax_expsum, float32, [2, 10, 257]) {
        attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
        attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
          if @tir.likely((floordiv(floordiv((threadIdx.x_2 + (blockIdx.x_2*1024)), 257), 10) < 2), dtype=bool) {
            if @tir.likely((floordiv((threadIdx.x_2 + (blockIdx.x_2*1024)), 257) < 20), dtype=bool) {
              if @tir.likely(((threadIdx.x_2 + (blockIdx.x_2*1024)) < 5140), dtype=bool) {
                T_softmax_expsum[((blockIdx.x_2*1024) + threadIdx.x_2)] = 0f32
              }
            }
          }
          for (k_1: int32, 0, 1025) {
            if @tir.likely((floordiv(floordiv((threadIdx.x_2 + (blockIdx.x_2*1024)), 257), 10) < 2), dtype=bool) {
              if @tir.likely((floordiv((threadIdx.x_2 + (blockIdx.x_2*1024)), 257) < 20), dtype=bool) {
                if @tir.likely(((threadIdx.x_2 + (blockIdx.x_2*1024)) < 5140), dtype=bool) {
                  T_softmax_expsum[((blockIdx.x_2*1024) + threadIdx.x_2)] = ((float32*)T_softmax_expsum[((blockIdx.x_2*1024) + threadIdx.x_2)] + (float32*)T_softmax_exp[(((blockIdx.x_2*1049600) + (threadIdx.x_2*1025)) + k_1)])
                }
              }
            }
          }
        }
        attr [IterVar(blockIdx.x_3: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
        attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
        for (i0.i1.fused.i2.fused.i3.fused.outer_1: int32, 0, 21) {
          if @tir.likely((floordiv(floordiv(floordiv(((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)), 1025), 257), 10) < 2), dtype=bool) {
            if @tir.likely((floordiv(floordiv(((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)), 1025), 257) < 20), dtype=bool) {
              if @tir.likely((floordiv(((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)), 1025) < 5140), dtype=bool) {
                if @tir.likely((((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)) < 5268500), dtype=bool) {
                  T_softmax_norm_2[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] = ((float32*)T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] / (float32*)T_softmax_expsum[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3), 1025)])
                }
              }
            }
          }
        }
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential tir.BF16Legalize
primfn(placeholder_1: handle, T_softmax_norm_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_softmax", "tir.noalias": True}
  buffers = {T_softmax_norm: Buffer(T_softmax_norm_2: Pointer(float32), float32, [2, 10, 257, 1025], []),
             placeholder: Buffer(placeholder_2: Pointer(float32), float32, [2, 10, 257, 1025], [])}
  buffer_map = {placeholder_1: placeholder, T_softmax_norm_1: T_softmax_norm} {
  attr [T_softmax_maxelem: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_maxelem, float32, [2, 10, 257]) {
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
    attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
      if @tir.likely((floordiv(floordiv((threadIdx.x + (blockIdx.x*1024)), 257), 10) < 2), dtype=bool) {
        if @tir.likely((floordiv((threadIdx.x + (blockIdx.x*1024)), 257) < 20), dtype=bool) {
          if @tir.likely(((threadIdx.x + (blockIdx.x*1024)) < 5140), dtype=bool) {
            T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = -3.40282e+38f32
          }
        }
      }
      for (k: int32, 0, 1025) {
        if @tir.likely((floordiv(floordiv((threadIdx.x + (blockIdx.x*1024)), 257), 10) < 2), dtype=bool) {
          if @tir.likely((floordiv((threadIdx.x + (blockIdx.x*1024)), 257) < 20), dtype=bool) {
            if @tir.likely(((threadIdx.x + (blockIdx.x*1024)) < 5140), dtype=bool) {
              T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = max((float32*)T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)], (float32*)placeholder_2[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k)])
            }
          }
        }
      }
    }
    attr [T_softmax_exp: Pointer(float32)] "storage_scope" = "global";
    allocate(T_softmax_exp, float32, [2, 10, 257, 1025]) {
      attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
      for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 21) {
        if @tir.likely((floordiv(floordiv(floordiv(((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025), 257), 10) < 2), dtype=bool) {
          if @tir.likely((floordiv(floordiv(((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025), 257) < 20), dtype=bool) {
            if @tir.likely((floordiv(((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025) < 5140), dtype=bool) {
              if @tir.likely((((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)) < 5268500), dtype=bool) {
                T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] = @tir.exp(((float32*)placeholder_2[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] - (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1), 1025)]), dtype=float32)
              }
            }
          }
        }
      }
      attr [T_softmax_expsum: Pointer(float32)] "storage_scope" = "global";
      allocate(T_softmax_expsum, float32, [2, 10, 257]) {
        attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
        attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
          if @tir.likely((floordiv(floordiv((threadIdx.x_2 + (blockIdx.x_2*1024)), 257), 10) < 2), dtype=bool) {
            if @tir.likely((floordiv((threadIdx.x_2 + (blockIdx.x_2*1024)), 257) < 20), dtype=bool) {
              if @tir.likely(((threadIdx.x_2 + (blockIdx.x_2*1024)) < 5140), dtype=bool) {
                T_softmax_expsum[((blockIdx.x_2*1024) + threadIdx.x_2)] = 0f32
              }
            }
          }
          for (k_1: int32, 0, 1025) {
            if @tir.likely((floordiv(floordiv((threadIdx.x_2 + (blockIdx.x_2*1024)), 257), 10) < 2), dtype=bool) {
              if @tir.likely((floordiv((threadIdx.x_2 + (blockIdx.x_2*1024)), 257) < 20), dtype=bool) {
                if @tir.likely(((threadIdx.x_2 + (blockIdx.x_2*1024)) < 5140), dtype=bool) {
                  T_softmax_expsum[((blockIdx.x_2*1024) + threadIdx.x_2)] = ((float32*)T_softmax_expsum[((blockIdx.x_2*1024) + threadIdx.x_2)] + (float32*)T_softmax_exp[(((blockIdx.x_2*1049600) + (threadIdx.x_2*1025)) + k_1)])
                }
              }
            }
          }
        }
        attr [IterVar(blockIdx.x_3: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
        attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
        for (i0.i1.fused.i2.fused.i3.fused.outer_1: int32, 0, 21) {
          if @tir.likely((floordiv(floordiv(floordiv(((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)), 1025), 257), 10) < 2), dtype=bool) {
            if @tir.likely((floordiv(floordiv(((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)), 1025), 257) < 20), dtype=bool) {
              if @tir.likely((floordiv(((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)), 1025) < 5140), dtype=bool) {
                if @tir.likely((((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)) < 5268500), dtype=bool) {
                  T_softmax_norm_2[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] = ((float32*)T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] / (float32*)T_softmax_expsum[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3), 1025)])
                }
              }
            }
          }
        }
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass tir.NarrowDataType
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential tir.NarrowDataType
primfn(placeholder_1: handle, T_softmax_norm_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_softmax", "tir.noalias": True}
  buffers = {T_softmax_norm: Buffer(T_softmax_norm_2: Pointer(float32), float32, [2, 10, 257, 1025], []),
             placeholder: Buffer(placeholder_2: Pointer(float32), float32, [2, 10, 257, 1025], [])}
  buffer_map = {placeholder_1: placeholder, T_softmax_norm_1: T_softmax_norm} {
  attr [T_softmax_maxelem: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_maxelem, float32, [2, 10, 257]) {
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
    attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
      if @tir.likely((floordiv(floordiv((threadIdx.x + (blockIdx.x*1024)), 257), 10) < 2), dtype=bool) {
        if @tir.likely((floordiv((threadIdx.x + (blockIdx.x*1024)), 257) < 20), dtype=bool) {
          if @tir.likely(((threadIdx.x + (blockIdx.x*1024)) < 5140), dtype=bool) {
            T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = -3.40282e+38f32
          }
        }
      }
      for (k: int32, 0, 1025) {
        if @tir.likely((floordiv(floordiv((threadIdx.x + (blockIdx.x*1024)), 257), 10) < 2), dtype=bool) {
          if @tir.likely((floordiv((threadIdx.x + (blockIdx.x*1024)), 257) < 20), dtype=bool) {
            if @tir.likely(((threadIdx.x + (blockIdx.x*1024)) < 5140), dtype=bool) {
              T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = max((float32*)T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)], (float32*)placeholder_2[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k)])
            }
          }
        }
      }
    }
    attr [T_softmax_exp: Pointer(float32)] "storage_scope" = "global";
    allocate(T_softmax_exp, float32, [2, 10, 257, 1025]) {
      attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
      for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 21) {
        if @tir.likely((floordiv(floordiv(floordiv(((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025), 257), 10) < 2), dtype=bool) {
          if @tir.likely((floordiv(floordiv(((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025), 257) < 20), dtype=bool) {
            if @tir.likely((floordiv(((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)), 1025) < 5140), dtype=bool) {
              if @tir.likely((((threadIdx.x_1 + (blockIdx.x_1*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer*262144)) < 5268500), dtype=bool) {
                T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] = @tir.exp(((float32*)placeholder_2[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] - (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1), 1025)]), dtype=float32)
              }
            }
          }
        }
      }
      attr [T_softmax_expsum: Pointer(float32)] "storage_scope" = "global";
      allocate(T_softmax_expsum, float32, [2, 10, 257]) {
        attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
        attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
          if @tir.likely((floordiv(floordiv((threadIdx.x_2 + (blockIdx.x_2*1024)), 257), 10) < 2), dtype=bool) {
            if @tir.likely((floordiv((threadIdx.x_2 + (blockIdx.x_2*1024)), 257) < 20), dtype=bool) {
              if @tir.likely(((threadIdx.x_2 + (blockIdx.x_2*1024)) < 5140), dtype=bool) {
                T_softmax_expsum[((blockIdx.x_2*1024) + threadIdx.x_2)] = 0f32
              }
            }
          }
          for (k_1: int32, 0, 1025) {
            if @tir.likely((floordiv(floordiv((threadIdx.x_2 + (blockIdx.x_2*1024)), 257), 10) < 2), dtype=bool) {
              if @tir.likely((floordiv((threadIdx.x_2 + (blockIdx.x_2*1024)), 257) < 20), dtype=bool) {
                if @tir.likely(((threadIdx.x_2 + (blockIdx.x_2*1024)) < 5140), dtype=bool) {
                  T_softmax_expsum[((blockIdx.x_2*1024) + threadIdx.x_2)] = ((float32*)T_softmax_expsum[((blockIdx.x_2*1024) + threadIdx.x_2)] + (float32*)T_softmax_exp[(((blockIdx.x_2*1049600) + (threadIdx.x_2*1025)) + k_1)])
                }
              }
            }
          }
        }
        attr [IterVar(blockIdx.x_3: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
        attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
        for (i0.i1.fused.i2.fused.i3.fused.outer_1: int32, 0, 21) {
          if @tir.likely((floordiv(floordiv(floordiv(((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)), 1025), 257), 10) < 2), dtype=bool) {
            if @tir.likely((floordiv(floordiv(((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)), 1025), 257) < 20), dtype=bool) {
              if @tir.likely((floordiv(((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)), 1025) < 5140), dtype=bool) {
                if @tir.likely((((threadIdx.x_3 + (blockIdx.x_3*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer_1*262144)) < 5268500), dtype=bool) {
                  T_softmax_norm_2[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] = ((float32*)T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] / (float32*)T_softmax_expsum[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3), 1025)])
                }
              }
            }
          }
        }
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass tir.Simplify
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify "global"
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify "global"
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = @tir.likely((floordiv(floordiv((threadIdx.x: int32 + (blockIdx.x: int32*1024)), 257), 10) < 2), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify @tir.likely(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) < 5140), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify @tir.likely((((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = @tir.likely((((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify condition(((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = @tir.likely((floordiv((threadIdx.x: int32 + (blockIdx.x: int32*1024)), 257) < 20), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify @tir.likely(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) < 5140), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify conditionTrue
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = @tir.likely(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) < 5140), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify @tir.likely(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) < 5140), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify conditionTrue
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint True
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify -3.40282e+38f32
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify -3.40282e+38f32
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((blockIdx.x: int32*1024) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify ((blockIdx.x: int32*1024) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (k: int32 >= 0)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (k: int32 < 1025)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = @tir.likely((floordiv(floordiv((threadIdx.x: int32 + (blockIdx.x: int32*1024)), 257), 10) < 2), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify @tir.likely(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) < 5140), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify @tir.likely((((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = @tir.likely((((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify condition(((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = @tir.likely((floordiv((threadIdx.x: int32 + (blockIdx.x: int32*1024)), 257) < 20), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify @tir.likely(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) < 5140), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify conditionTrue
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = @tir.likely(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) < 5140), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify @tir.likely(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) < 5140), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify conditionTrue
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint True
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify max((float32*)T_softmax_maxelem: Pointer(float32)[((blockIdx.x: int32*1024) + threadIdx.x: int32)], (float32*)placeholder: Pointer(float32)[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k: int32)])
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify max((float32*)T_softmax_maxelem: Pointer(float32)[((blockIdx.x: int32*1024) + threadIdx.x: int32)], (float32*)placeholder: Pointer(float32)[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k: int32)])
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((blockIdx.x: int32*1024) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify ((blockIdx.x: int32*1024) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify "global"
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify "global"
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (i0.i1.fused.i2.fused.i3.fused.outer: int32 >= 0)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (i0.i1.fused.i2.fused.i3.fused.outer: int32 < 21)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = @tir.likely((floordiv(floordiv(floordiv(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer: int32*262144)), 1025), 257), 10) < 2), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify @tir.likely((((threadIdx.x: int32 + (blockIdx.x: int32*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer: int32*262144)) < 5268500), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify @tir.likely(((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = @tir.likely(((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition ((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify condition((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint ((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = @tir.likely((floordiv(floordiv(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer: int32*262144)), 1025), 257) < 20), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify @tir.likely((((threadIdx.x: int32 + (blockIdx.x: int32*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer: int32*262144)) < 5268500), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify conditionTrue
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = @tir.likely((floordiv(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer: int32*262144)), 1025) < 5140), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify @tir.likely((((threadIdx.x: int32 + (blockIdx.x: int32*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer: int32*262144)) < 5268500), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify conditionTrue
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = @tir.likely((((threadIdx.x: int32 + (blockIdx.x: int32*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer: int32*262144)) < 5268500), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify @tir.likely((((threadIdx.x: int32 + (blockIdx.x: int32*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer: int32*262144)) < 5268500), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify conditionTrue
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint True
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify @tir.exp(((float32*)placeholder: Pointer(float32)[(((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32)] - (float32*)T_softmax_maxelem: Pointer(float32)[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x), 1025)]), dtype=float32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify @tir.exp(((float32*)placeholder: Pointer(float32)[(((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32)] - (float32*)T_softmax_maxelem: Pointer(float32)[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x), 1025)]), dtype=float32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify (((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify (((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify "global"
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify "global"
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = @tir.likely((floordiv(floordiv((threadIdx.x: int32 + (blockIdx.x: int32*1024)), 257), 10) < 2), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify @tir.likely(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) < 5140), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify @tir.likely((((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = @tir.likely((((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify condition(((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = @tir.likely((floordiv((threadIdx.x: int32 + (blockIdx.x: int32*1024)), 257) < 20), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify @tir.likely(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) < 5140), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify conditionTrue
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = @tir.likely(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) < 5140), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify @tir.likely(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) < 5140), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify conditionTrue
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint True
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify 0f32
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify 0f32
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((blockIdx.x: int32*1024) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify ((blockIdx.x: int32*1024) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (k: int32 >= 0)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (k: int32 < 1025)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = @tir.likely((floordiv(floordiv((threadIdx.x: int32 + (blockIdx.x: int32*1024)), 257), 10) < 2), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify @tir.likely(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) < 5140), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify @tir.likely((((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = @tir.likely((((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify condition(((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = @tir.likely((floordiv((threadIdx.x: int32 + (blockIdx.x: int32*1024)), 257) < 20), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify @tir.likely(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) < 5140), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify conditionTrue
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = @tir.likely(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) < 5140), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify @tir.likely(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) < 5140), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify conditionTrue
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint True
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((float32*)T_softmax_expsum: Pointer(float32)[((blockIdx.x: int32*1024) + threadIdx.x: int32)] + (float32*)T_softmax_exp: Pointer(float32)[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k: int32)])
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify ((float32*)T_softmax_expsum: Pointer(float32)[((blockIdx.x: int32*1024) + threadIdx.x: int32)] + (float32*)T_softmax_exp: Pointer(float32)[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k: int32)])
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((blockIdx.x: int32*1024) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify ((blockIdx.x: int32*1024) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (i0.i1.fused.i2.fused.i3.fused.outer: int32 >= 0)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (i0.i1.fused.i2.fused.i3.fused.outer: int32 < 21)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = @tir.likely((floordiv(floordiv(floordiv(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer: int32*262144)), 1025), 257), 10) < 2), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify @tir.likely((((threadIdx.x: int32 + (blockIdx.x: int32*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer: int32*262144)) < 5268500), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify @tir.likely(((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = @tir.likely(((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition ((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify condition((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint ((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = @tir.likely((floordiv(floordiv(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer: int32*262144)), 1025), 257) < 20), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify @tir.likely((((threadIdx.x: int32 + (blockIdx.x: int32*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer: int32*262144)) < 5268500), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify conditionTrue
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = @tir.likely((floordiv(((threadIdx.x: int32 + (blockIdx.x: int32*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer: int32*262144)), 1025) < 5140), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify @tir.likely((((threadIdx.x: int32 + (blockIdx.x: int32*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer: int32*262144)) < 5268500), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify conditionTrue
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = @tir.likely((((threadIdx.x: int32 + (blockIdx.x: int32*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer: int32*262144)) < 5268500), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify @tir.likely((((threadIdx.x: int32 + (blockIdx.x: int32*1024)) + (i0.i1.fused.i2.fused.i3.fused.outer: int32*262144)) < 5268500), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition True
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify conditionTrue
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint True
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((float32*)T_softmax_exp: Pointer(float32)[(((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32)] / (float32*)T_softmax_expsum: Pointer(float32)[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x), 1025)])
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify ((float32*)T_softmax_exp: Pointer(float32)[(((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32)] / (float32*)T_softmax_expsum: Pointer(float32)[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x), 1025)])
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify (((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify (((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential tir.Simplify
primfn(placeholder_1: handle, T_softmax_norm_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_softmax", "tir.noalias": True}
  buffers = {T_softmax_norm: Buffer(T_softmax_norm_2: Pointer(float32), float32, [2, 10, 257, 1025], []),
             placeholder: Buffer(placeholder_2: Pointer(float32), float32, [2, 10, 257, 1025], [])}
  buffer_map = {placeholder_1: placeholder, T_softmax_norm_1: T_softmax_norm} {
  attr [T_softmax_maxelem: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_maxelem, float32, [2, 10, 257]) {
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
    attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
      if @tir.likely((((blockIdx.x*1024) + threadIdx.x) < 5140), dtype=bool) {
        T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = -3.40282e+38f32
      }
      for (k: int32, 0, 1025) {
        if @tir.likely((((blockIdx.x*1024) + threadIdx.x) < 5140), dtype=bool) {
          T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = max((float32*)T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)], (float32*)placeholder_2[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k)])
        }
      }
    }
    attr [T_softmax_exp: Pointer(float32)] "storage_scope" = "global";
    allocate(T_softmax_exp, float32, [2, 10, 257, 1025]) {
      attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
      for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 21) {
        if @tir.likely(((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1) < 5268500), dtype=bool) {
          T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] = @tir.exp(((float32*)placeholder_2[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] - (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1), 1025)]), dtype=float32)
        }
      }
      attr [T_softmax_expsum: Pointer(float32)] "storage_scope" = "global";
      allocate(T_softmax_expsum, float32, [2, 10, 257]) {
        attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
        attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
          if @tir.likely((((blockIdx.x_2*1024) + threadIdx.x_2) < 5140), dtype=bool) {
            T_softmax_expsum[((blockIdx.x_2*1024) + threadIdx.x_2)] = 0f32
          }
          for (k_1: int32, 0, 1025) {
            if @tir.likely((((blockIdx.x_2*1024) + threadIdx.x_2) < 5140), dtype=bool) {
              T_softmax_expsum[((blockIdx.x_2*1024) + threadIdx.x_2)] = ((float32*)T_softmax_expsum[((blockIdx.x_2*1024) + threadIdx.x_2)] + (float32*)T_softmax_exp[(((blockIdx.x_2*1049600) + (threadIdx.x_2*1025)) + k_1)])
            }
          }
        }
        attr [IterVar(blockIdx.x_3: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
        attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
        for (i0.i1.fused.i2.fused.i3.fused.outer_1: int32, 0, 21) {
          if @tir.likely(((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3) < 5268500), dtype=bool) {
            T_softmax_norm_2[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] = ((float32*)T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] / (float32*)T_softmax_expsum[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3), 1025)])
          }
        }
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass tir.LoopPartition
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential tir.LoopPartition
primfn(placeholder_1: handle, T_softmax_norm_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_softmax", "tir.noalias": True}
  buffers = {T_softmax_norm: Buffer(T_softmax_norm_2: Pointer(float32), float32, [2, 10, 257, 1025], []),
             placeholder: Buffer(placeholder_2: Pointer(float32), float32, [2, 10, 257, 1025], [])}
  buffer_map = {placeholder_1: placeholder, T_softmax_norm_1: T_softmax_norm} {
  attr [T_softmax_maxelem: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_maxelem, float32, [2, 10, 257]) {
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
    attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
      if (((blockIdx.x*1024) + threadIdx.x) < 5140) {
        T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = -3.40282e+38f32
      }
      for (k: int32, 0, 1025) {
        if (((blockIdx.x*1024) + threadIdx.x) < 5140) {
          T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = max((float32*)T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)], (float32*)placeholder_2[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k)])
        }
      }
    }
    attr [T_softmax_exp: Pointer(float32)] "storage_scope" = "global";
    allocate(T_softmax_exp, float32, [2, 10, 257, 1025]) {
      attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
      for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 21) {
        if ((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1) < 5268500) {
          T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] = @tir.exp(((float32*)placeholder_2[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] - (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1), 1025)]), dtype=float32)
        }
      }
      attr [T_softmax_expsum: Pointer(float32)] "storage_scope" = "global";
      allocate(T_softmax_expsum, float32, [2, 10, 257]) {
        attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
        attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
          if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
            T_softmax_expsum[((blockIdx.x_2*1024) + threadIdx.x_2)] = 0f32
          }
          for (k_1: int32, 0, 1025) {
            if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
              T_softmax_expsum[((blockIdx.x_2*1024) + threadIdx.x_2)] = ((float32*)T_softmax_expsum[((blockIdx.x_2*1024) + threadIdx.x_2)] + (float32*)T_softmax_exp[(((blockIdx.x_2*1049600) + (threadIdx.x_2*1025)) + k_1)])
            }
          }
        }
        attr [IterVar(blockIdx.x_3: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
        attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
        for (i0.i1.fused.i2.fused.i3.fused.outer_1: int32, 0, 21) {
          if ((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3) < 5268500) {
            T_softmax_norm_2[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] = ((float32*)T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] / (float32*)T_softmax_expsum[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3), 1025)])
          }
        }
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass tir.VectorizeLoop
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential tir.VectorizeLoop
primfn(placeholder_1: handle, T_softmax_norm_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_softmax", "tir.noalias": True}
  buffers = {T_softmax_norm: Buffer(T_softmax_norm_2: Pointer(float32), float32, [2, 10, 257, 1025], []),
             placeholder: Buffer(placeholder_2: Pointer(float32), float32, [2, 10, 257, 1025], [])}
  buffer_map = {placeholder_1: placeholder, T_softmax_norm_1: T_softmax_norm} {
  attr [T_softmax_maxelem: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_maxelem, float32, [2, 10, 257]) {
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
    attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
      if (((blockIdx.x*1024) + threadIdx.x) < 5140) {
        T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = -3.40282e+38f32
      }
      for (k: int32, 0, 1025) {
        if (((blockIdx.x*1024) + threadIdx.x) < 5140) {
          T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = max((float32*)T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)], (float32*)placeholder_2[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k)])
        }
      }
    }
    attr [T_softmax_exp: Pointer(float32)] "storage_scope" = "global";
    allocate(T_softmax_exp, float32, [2, 10, 257, 1025]) {
      attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
      for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 21) {
        if ((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1) < 5268500) {
          T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] = @tir.exp(((float32*)placeholder_2[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] - (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1), 1025)]), dtype=float32)
        }
      }
      attr [T_softmax_expsum: Pointer(float32)] "storage_scope" = "global";
      allocate(T_softmax_expsum, float32, [2, 10, 257]) {
        attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
        attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
          if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
            T_softmax_expsum[((blockIdx.x_2*1024) + threadIdx.x_2)] = 0f32
          }
          for (k_1: int32, 0, 1025) {
            if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
              T_softmax_expsum[((blockIdx.x_2*1024) + threadIdx.x_2)] = ((float32*)T_softmax_expsum[((blockIdx.x_2*1024) + threadIdx.x_2)] + (float32*)T_softmax_exp[(((blockIdx.x_2*1049600) + (threadIdx.x_2*1025)) + k_1)])
            }
          }
        }
        attr [IterVar(blockIdx.x_3: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
        attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
        for (i0.i1.fused.i2.fused.i3.fused.outer_1: int32, 0, 21) {
          if ((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3) < 5268500) {
            T_softmax_norm_2[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] = ((float32*)T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] / (float32*)T_softmax_expsum[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3), 1025)])
          }
        }
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass tir.InjectVirtualThread
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential tir.InjectVirtualThread
primfn(placeholder_1: handle, T_softmax_norm_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_softmax", "tir.noalias": True}
  buffers = {T_softmax_norm: Buffer(T_softmax_norm_2: Pointer(float32), float32, [2, 10, 257, 1025], []),
             placeholder: Buffer(placeholder_2: Pointer(float32), float32, [2, 10, 257, 1025], [])}
  buffer_map = {placeholder_1: placeholder, T_softmax_norm_1: T_softmax_norm} {
  attr [T_softmax_maxelem: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_maxelem, float32, [2, 10, 257]) {
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
    attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
      if (((blockIdx.x*1024) + threadIdx.x) < 5140) {
        T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = -3.40282e+38f32
      }
      for (k: int32, 0, 1025) {
        if (((blockIdx.x*1024) + threadIdx.x) < 5140) {
          T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = max((float32*)T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)], (float32*)placeholder_2[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k)])
        }
      }
    }
    attr [T_softmax_exp: Pointer(float32)] "storage_scope" = "global";
    allocate(T_softmax_exp, float32, [2, 10, 257, 1025]) {
      attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
      for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 21) {
        if ((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1) < 5268500) {
          T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] = @tir.exp(((float32*)placeholder_2[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] - (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1), 1025)]), dtype=float32)
        }
      }
      attr [T_softmax_expsum: Pointer(float32)] "storage_scope" = "global";
      allocate(T_softmax_expsum, float32, [2, 10, 257]) {
        attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
        attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
          if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
            T_softmax_expsum[((blockIdx.x_2*1024) + threadIdx.x_2)] = 0f32
          }
          for (k_1: int32, 0, 1025) {
            if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
              T_softmax_expsum[((blockIdx.x_2*1024) + threadIdx.x_2)] = ((float32*)T_softmax_expsum[((blockIdx.x_2*1024) + threadIdx.x_2)] + (float32*)T_softmax_exp[(((blockIdx.x_2*1049600) + (threadIdx.x_2*1025)) + k_1)])
            }
          }
        }
        attr [IterVar(blockIdx.x_3: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
        attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
        for (i0.i1.fused.i2.fused.i3.fused.outer_1: int32, 0, 21) {
          if ((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3) < 5268500) {
            T_softmax_norm_2[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] = ((float32*)T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] / (float32*)T_softmax_expsum[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3), 1025)])
          }
        }
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass tir.InjectDoubleBuffer
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential tir.InjectDoubleBuffer
primfn(placeholder_1: handle, T_softmax_norm_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_softmax", "tir.noalias": True}
  buffers = {T_softmax_norm: Buffer(T_softmax_norm_2: Pointer(float32), float32, [2, 10, 257, 1025], []),
             placeholder: Buffer(placeholder_2: Pointer(float32), float32, [2, 10, 257, 1025], [])}
  buffer_map = {placeholder_1: placeholder, T_softmax_norm_1: T_softmax_norm} {
  attr [T_softmax_maxelem: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_maxelem, float32, [2, 10, 257]) {
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
    attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
      if (((blockIdx.x*1024) + threadIdx.x) < 5140) {
        T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = -3.40282e+38f32
      }
      for (k: int32, 0, 1025) {
        if (((blockIdx.x*1024) + threadIdx.x) < 5140) {
          T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = max((float32*)T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)], (float32*)placeholder_2[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k)])
        }
      }
    }
    attr [T_softmax_exp: Pointer(float32)] "storage_scope" = "global";
    allocate(T_softmax_exp, float32, [2, 10, 257, 1025]) {
      attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
      for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 21) {
        if ((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1) < 5268500) {
          T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] = @tir.exp(((float32*)placeholder_2[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] - (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1), 1025)]), dtype=float32)
        }
      }
      attr [T_softmax_expsum: Pointer(float32)] "storage_scope" = "global";
      allocate(T_softmax_expsum, float32, [2, 10, 257]) {
        attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
        attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
          if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
            T_softmax_expsum[((blockIdx.x_2*1024) + threadIdx.x_2)] = 0f32
          }
          for (k_1: int32, 0, 1025) {
            if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
              T_softmax_expsum[((blockIdx.x_2*1024) + threadIdx.x_2)] = ((float32*)T_softmax_expsum[((blockIdx.x_2*1024) + threadIdx.x_2)] + (float32*)T_softmax_exp[(((blockIdx.x_2*1049600) + (threadIdx.x_2*1025)) + k_1)])
            }
          }
        }
        attr [IterVar(blockIdx.x_3: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
        attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
        for (i0.i1.fused.i2.fused.i3.fused.outer_1: int32, 0, 21) {
          if ((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3) < 5268500) {
            T_softmax_norm_2[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] = ((float32*)T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] / (float32*)T_softmax_expsum[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3), 1025)])
          }
        }
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass tir.StorageRewrite
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential tir.StorageRewrite
primfn(placeholder_1: handle, T_softmax_norm_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_softmax", "tir.noalias": True}
  buffers = {T_softmax_norm: Buffer(T_softmax_norm_2: Pointer(float32), float32, [2, 10, 257, 1025], []),
             placeholder: Buffer(placeholder_2: Pointer(float32), float32, [2, 10, 257, 1025], [])}
  buffer_map = {placeholder_1: placeholder, T_softmax_norm_1: T_softmax_norm} {
  attr [T_softmax_maxelem: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_maxelem, float32, [5140]);
  attr [T_softmax_exp: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_exp, float32, [5268500]) {
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
    attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
      if (((blockIdx.x*1024) + threadIdx.x) < 5140) {
        T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = -3.40282e+38f32
      }
      for (k: int32, 0, 1025) {
        if (((blockIdx.x*1024) + threadIdx.x) < 5140) {
          T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = max((float32*)T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)], (float32*)placeholder_2[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k)])
        }
      }
    }
     {
      attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
      for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 21) {
        if ((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1) < 5268500) {
          T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] = @tir.exp(((float32*)placeholder_2[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] - (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1), 1025)]), dtype=float32)
        }
      }
       {
        attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
        attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
          if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
            T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] = 0f32
          }
          for (k_1: int32, 0, 1025) {
            if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
              T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] = ((float32*)T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] + (float32*)T_softmax_exp[(((blockIdx.x_2*1049600) + (threadIdx.x_2*1025)) + k_1)])
            }
          }
        }
        attr [IterVar(blockIdx.x_3: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
        attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
        for (i0.i1.fused.i2.fused.i3.fused.outer_1: int32, 0, 21) {
          if ((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3) < 5268500) {
            T_softmax_norm_2[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] = ((float32*)T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] / (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3), 1025)])
          }
        }
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass tir.UnrollLoop
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential tir.UnrollLoop
primfn(placeholder_1: handle, T_softmax_norm_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_softmax", "tir.noalias": True}
  buffers = {T_softmax_norm: Buffer(T_softmax_norm_2: Pointer(float32), float32, [2, 10, 257, 1025], []),
             placeholder: Buffer(placeholder_2: Pointer(float32), float32, [2, 10, 257, 1025], [])}
  buffer_map = {placeholder_1: placeholder, T_softmax_norm_1: T_softmax_norm} {
  attr [T_softmax_maxelem: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_maxelem, float32, [5140]);
  attr [T_softmax_exp: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_exp, float32, [5268500]) {
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
    attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
      if (((blockIdx.x*1024) + threadIdx.x) < 5140) {
        T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = -3.40282e+38f32
      }
      for (k: int32, 0, 1025) {
        if (((blockIdx.x*1024) + threadIdx.x) < 5140) {
          T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = max((float32*)T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)], (float32*)placeholder_2[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k)])
        }
      }
    }
     {
      attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
      for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 21) {
        if ((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1) < 5268500) {
          T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] = @tir.exp(((float32*)placeholder_2[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] - (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1), 1025)]), dtype=float32)
        }
      }
       {
        attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
        attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
          if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
            T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] = 0f32
          }
          for (k_1: int32, 0, 1025) {
            if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
              T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] = ((float32*)T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] + (float32*)T_softmax_exp[(((blockIdx.x_2*1049600) + (threadIdx.x_2*1025)) + k_1)])
            }
          }
        }
        attr [IterVar(blockIdx.x_3: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
        attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
        for (i0.i1.fused.i2.fused.i3.fused.outer_1: int32, 0, 21) {
          if ((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3) < 5268500) {
            T_softmax_norm_2[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] = ((float32*)T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] / (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3), 1025)])
          }
        }
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass tir.Simplify
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify "global"
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify "global"
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify "global"
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify "global"
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify condition(((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify -3.40282e+38f32
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify -3.40282e+38f32
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((blockIdx.x: int32*1024) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify ((blockIdx.x: int32*1024) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (k: int32 >= 0)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (k: int32 < 1025)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify condition(((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify max((float32*)T_softmax_maxelem: Pointer(float32)[((blockIdx.x: int32*1024) + threadIdx.x: int32)], (float32*)placeholder: Pointer(float32)[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k: int32)])
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify max((float32*)T_softmax_maxelem: Pointer(float32)[((blockIdx.x: int32*1024) + threadIdx.x: int32)], (float32*)placeholder: Pointer(float32)[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k: int32)])
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((blockIdx.x: int32*1024) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify ((blockIdx.x: int32*1024) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (i0.i1.fused.i2.fused.i3.fused.outer: int32 >= 0)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (i0.i1.fused.i2.fused.i3.fused.outer: int32 < 21)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = ((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify ((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = ((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition ((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify condition((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint ((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify @tir.exp(((float32*)placeholder: Pointer(float32)[(((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32)] - (float32*)T_softmax_maxelem: Pointer(float32)[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x), 1025)]), dtype=float32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify @tir.exp(((float32*)placeholder: Pointer(float32)[(((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32)] - (float32*)T_softmax_maxelem: Pointer(float32)[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x), 1025)]), dtype=float32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify (((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify (((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify condition(((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify 0f32
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify 0f32
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((blockIdx.x: int32*1024) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify ((blockIdx.x: int32*1024) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (k: int32 >= 0)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (k: int32 < 1025)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify condition(((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((float32*)T_softmax_maxelem: Pointer(float32)[((blockIdx.x: int32*1024) + threadIdx.x: int32)] + (float32*)T_softmax_exp: Pointer(float32)[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k: int32)])
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify ((float32*)T_softmax_maxelem: Pointer(float32)[((blockIdx.x: int32*1024) + threadIdx.x: int32)] + (float32*)T_softmax_exp: Pointer(float32)[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k: int32)])
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((blockIdx.x: int32*1024) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify ((blockIdx.x: int32*1024) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (i0.i1.fused.i2.fused.i3.fused.outer: int32 >= 0)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (i0.i1.fused.i2.fused.i3.fused.outer: int32 < 21)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = ((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify ((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = ((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition ((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify condition((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint ((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((float32*)T_softmax_exp: Pointer(float32)[(((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32)] / (float32*)T_softmax_maxelem: Pointer(float32)[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x), 1025)])
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify ((float32*)T_softmax_exp: Pointer(float32)[(((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32)] / (float32*)T_softmax_maxelem: Pointer(float32)[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x), 1025)])
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify (((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify (((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential tir.Simplify
primfn(placeholder_1: handle, T_softmax_norm_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_softmax", "tir.noalias": True}
  buffers = {T_softmax_norm: Buffer(T_softmax_norm_2: Pointer(float32), float32, [2, 10, 257, 1025], []),
             placeholder: Buffer(placeholder_2: Pointer(float32), float32, [2, 10, 257, 1025], [])}
  buffer_map = {placeholder_1: placeholder, T_softmax_norm_1: T_softmax_norm} {
  attr [T_softmax_maxelem: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_maxelem, float32, [5140]);
  attr [T_softmax_exp: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_exp, float32, [5268500]) {
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
    attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
      if (((blockIdx.x*1024) + threadIdx.x) < 5140) {
        T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = -3.40282e+38f32
      }
      for (k: int32, 0, 1025) {
        if (((blockIdx.x*1024) + threadIdx.x) < 5140) {
          T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = max((float32*)T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)], (float32*)placeholder_2[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k)])
        }
      }
    }
     {
      attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
      attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
      for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 21) {
        if ((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1) < 5268500) {
          T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] = @tir.exp(((float32*)placeholder_2[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] - (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1), 1025)]), dtype=float32)
        }
      }
       {
        attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
        attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
          if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
            T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] = 0f32
          }
          for (k_1: int32, 0, 1025) {
            if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
              T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] = ((float32*)T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] + (float32*)T_softmax_exp[(((blockIdx.x_2*1049600) + (threadIdx.x_2*1025)) + k_1)])
            }
          }
        }
        attr [IterVar(blockIdx.x_3: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
        attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
        for (i0.i1.fused.i2.fused.i3.fused.outer_1: int32, 0, 21) {
          if ((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3) < 5268500) {
            T_softmax_norm_2[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] = ((float32*)T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] / (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3), 1025)])
          }
        }
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass tir.RemoveNoOp
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential tir.RemoveNoOp
primfn(placeholder_1: handle, T_softmax_norm_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_softmax", "tir.noalias": True}
  buffers = {T_softmax_norm: Buffer(T_softmax_norm_2: Pointer(float32), float32, [2, 10, 257, 1025], []),
             placeholder: Buffer(placeholder_2: Pointer(float32), float32, [2, 10, 257, 1025], [])}
  buffer_map = {placeholder_1: placeholder, T_softmax_norm_1: T_softmax_norm} {
  attr [T_softmax_maxelem: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_maxelem, float32, [5140]);
  attr [T_softmax_exp: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_exp, float32, [5268500]) {
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
    attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
      if (((blockIdx.x*1024) + threadIdx.x) < 5140) {
        T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = -3.40282e+38f32
      }
      for (k: int32, 0, 1025) {
        if (((blockIdx.x*1024) + threadIdx.x) < 5140) {
          T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = max((float32*)T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)], (float32*)placeholder_2[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k)])
        }
      }
    }
    attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
    attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
    for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 21) {
      if ((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1) < 5268500) {
        T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] = @tir.exp(((float32*)placeholder_2[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] - (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1), 1025)]), dtype=float32)
      }
    }
    attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
    attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
      if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
        T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] = 0f32
      }
      for (k_1: int32, 0, 1025) {
        if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
          T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] = ((float32*)T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] + (float32*)T_softmax_exp[(((blockIdx.x_2*1049600) + (threadIdx.x_2*1025)) + k_1)])
        }
      }
    }
    attr [IterVar(blockIdx.x_3: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
    attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
    for (i0.i1.fused.i2.fused.i3.fused.outer_1: int32, 0, 21) {
      if ((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3) < 5268500) {
        T_softmax_norm_2[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] = ((float32*)T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] / (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3), 1025)])
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass tir.RewriteUnsafeSelect
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential tir.RewriteUnsafeSelect
primfn(placeholder_1: handle, T_softmax_norm_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_softmax", "tir.noalias": True}
  buffers = {T_softmax_norm: Buffer(T_softmax_norm_2: Pointer(float32), float32, [2, 10, 257, 1025], []),
             placeholder: Buffer(placeholder_2: Pointer(float32), float32, [2, 10, 257, 1025], [])}
  buffer_map = {placeholder_1: placeholder, T_softmax_norm_1: T_softmax_norm} {
  attr [T_softmax_maxelem: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_maxelem, float32, [5140]);
  attr [T_softmax_exp: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_exp, float32, [5268500]) {
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
    attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
      if (((blockIdx.x*1024) + threadIdx.x) < 5140) {
        T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = -3.40282e+38f32
      }
      for (k: int32, 0, 1025) {
        if (((blockIdx.x*1024) + threadIdx.x) < 5140) {
          T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = max((float32*)T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)], (float32*)placeholder_2[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k)])
        }
      }
    }
    attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
    attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
    for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 21) {
      if ((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1) < 5268500) {
        T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] = @tir.exp(((float32*)placeholder_2[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] - (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1), 1025)]), dtype=float32)
      }
    }
    attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
    attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
      if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
        T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] = 0f32
      }
      for (k_1: int32, 0, 1025) {
        if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
          T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] = ((float32*)T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] + (float32*)T_softmax_exp[(((blockIdx.x_2*1049600) + (threadIdx.x_2*1025)) + k_1)])
        }
      }
    }
    attr [IterVar(blockIdx.x_3: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
    attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
    for (i0.i1.fused.i2.fused.i3.fused.outer_1: int32, 0, 21) {
      if ((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3) < 5268500) {
        T_softmax_norm_2[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] = ((float32*)T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] / (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3), 1025)])
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass tir.HoistIfThenElse
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential tir.HoistIfThenElse
primfn(placeholder_1: handle, T_softmax_norm_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_softmax", "tir.noalias": True}
  buffers = {T_softmax_norm: Buffer(T_softmax_norm_2: Pointer(float32), float32, [2, 10, 257, 1025], []),
             placeholder: Buffer(placeholder_2: Pointer(float32), float32, [2, 10, 257, 1025], [])}
  buffer_map = {placeholder_1: placeholder, T_softmax_norm_1: T_softmax_norm} {
  attr [T_softmax_maxelem: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_maxelem, float32, [5140]);
  attr [T_softmax_exp: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_exp, float32, [5268500]) {
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
    attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
      if (((blockIdx.x*1024) + threadIdx.x) < 5140) {
        T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = -3.40282e+38f32
      }
      for (k: int32, 0, 1025) {
        if (((blockIdx.x*1024) + threadIdx.x) < 5140) {
          T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = max((float32*)T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)], (float32*)placeholder_2[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k)])
        }
      }
    }
    attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
    attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
    for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 21) {
      if ((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1) < 5268500) {
        T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] = @tir.exp(((float32*)placeholder_2[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] - (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1), 1025)]), dtype=float32)
      }
    }
    attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
    attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
      if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
        T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] = 0f32
      }
      for (k_1: int32, 0, 1025) {
        if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
          T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] = ((float32*)T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] + (float32*)T_softmax_exp[(((blockIdx.x_2*1049600) + (threadIdx.x_2*1025)) + k_1)])
        }
      }
    }
    attr [IterVar(blockIdx.x_3: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
    attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
    for (i0.i1.fused.i2.fused.i3.fused.outer_1: int32, 0, 21) {
      if ((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3) < 5268500) {
        T_softmax_norm_2[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] = ((float32*)T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] / (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3), 1025)])
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/relay/backend/vm/compiler.cc:1151: CODEGEN!
[15:20:36] /workspace/home/codes/tvm/src/relay/backend/vm/compiler.cc:1162: Lower cached function fused_nn_softmax in target cuda -keys=cuda,gpu -max_num_threads=1024 -thread_warp_size=32
[15:20:36] /workspace/home/codes/tvm/src/relay/backend/vm/compiler.cc:1184: FUNCS MAP
[15:20:36] /workspace/home/codes/tvm/src/relay/backend/vm/compiler.cc:1186: Target: cuda -keys=cuda,gpu -max_num_threads=1024 -thread_warp_size=32, primfn(placeholder_1: handle, T_softmax_norm_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_softmax", "tir.noalias": True}
  buffers = {T_softmax_norm: Buffer(T_softmax_norm_2: Pointer(float32), float32, [2, 10, 257, 1025], []),
             placeholder: Buffer(placeholder_2: Pointer(float32), float32, [2, 10, 257, 1025], [])}
  buffer_map = {placeholder_1: placeholder, T_softmax_norm_1: T_softmax_norm} {
  attr [T_softmax_maxelem: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_maxelem, float32, [5140]);
  attr [T_softmax_exp: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_exp, float32, [5268500]) {
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
    attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
      if (((blockIdx.x*1024) + threadIdx.x) < 5140) {
        T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = -3.40282e+38f32
      }
      for (k: int32, 0, 1025) {
        if (((blockIdx.x*1024) + threadIdx.x) < 5140) {
          T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = max((float32*)T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)], (float32*)placeholder_2[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k)])
        }
      }
    }
    attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
    attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
    for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 21) {
      if ((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1) < 5268500) {
        T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] = @tir.exp(((float32*)placeholder_2[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] - (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1), 1025)]), dtype=float32)
      }
    }
    attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
    attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
      if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
        T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] = 0f32
      }
      for (k_1: int32, 0, 1025) {
        if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
          T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] = ((float32*)T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] + (float32*)T_softmax_exp[(((blockIdx.x_2*1049600) + (threadIdx.x_2*1025)) + k_1)])
        }
      }
    }
    attr [IterVar(blockIdx.x_3: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
    attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
    for (i0.i1.fused.i2.fused.i3.fused.outer_1: int32, 0, 21) {
      if ((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3) < 5268500) {
        T_softmax_norm_2[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] = ((float32*)T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] / (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3), 1025)])
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass BindTarget
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential BindTarget
primfn(placeholder_1: handle, T_softmax_norm_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_softmax", "tir.noalias": True, "target": meta[Target][0]}
  buffers = {T_softmax_norm: Buffer(T_softmax_norm_2: Pointer(float32), float32, [2, 10, 257, 1025], []),
             placeholder: Buffer(placeholder_2: Pointer(float32), float32, [2, 10, 257, 1025], [])}
  buffer_map = {placeholder_1: placeholder, T_softmax_norm_1: T_softmax_norm} {
  attr [T_softmax_maxelem: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_maxelem, float32, [5140]);
  attr [T_softmax_exp: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_exp, float32, [5268500]) {
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
    attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
      if (((blockIdx.x*1024) + threadIdx.x) < 5140) {
        T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = -3.40282e+38f32
      }
      for (k: int32, 0, 1025) {
        if (((blockIdx.x*1024) + threadIdx.x) < 5140) {
          T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = max((float32*)T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)], (float32*)placeholder_2[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k)])
        }
      }
    }
    attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
    attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
    for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 21) {
      if ((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1) < 5268500) {
        T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] = @tir.exp(((float32*)placeholder_2[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] - (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1), 1025)]), dtype=float32)
      }
    }
    attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
    attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
      if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
        T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] = 0f32
      }
      for (k_1: int32, 0, 1025) {
        if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
          T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] = ((float32*)T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] + (float32*)T_softmax_exp[(((blockIdx.x_2*1049600) + (threadIdx.x_2*1025)) + k_1)])
        }
      }
    }
    attr [IterVar(blockIdx.x_3: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
    attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
    for (i0.i1.fused.i2.fused.i3.fused.outer_1: int32, 0, 21) {
      if ((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3) < 5268500) {
        T_softmax_norm_2[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] = ((float32*)T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] / (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3), 1025)])
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass tir.VerifyMemory
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential tir.VerifyMemory
primfn(placeholder_1: handle, T_softmax_norm_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_softmax", "tir.noalias": True, "target": meta[Target][0]}
  buffers = {T_softmax_norm: Buffer(T_softmax_norm_2: Pointer(float32), float32, [2, 10, 257, 1025], []),
             placeholder: Buffer(placeholder_2: Pointer(float32), float32, [2, 10, 257, 1025], [])}
  buffer_map = {placeholder_1: placeholder, T_softmax_norm_1: T_softmax_norm} {
  attr [T_softmax_maxelem: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_maxelem, float32, [5140]);
  attr [T_softmax_exp: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_exp, float32, [5268500]) {
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
    attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
      if (((blockIdx.x*1024) + threadIdx.x) < 5140) {
        T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = -3.40282e+38f32
      }
      for (k: int32, 0, 1025) {
        if (((blockIdx.x*1024) + threadIdx.x) < 5140) {
          T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = max((float32*)T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)], (float32*)placeholder_2[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k)])
        }
      }
    }
    attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
    attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
    for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 21) {
      if ((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1) < 5268500) {
        T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] = @tir.exp(((float32*)placeholder_2[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] - (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1), 1025)]), dtype=float32)
      }
    }
    attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
    attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
      if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
        T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] = 0f32
      }
      for (k_1: int32, 0, 1025) {
        if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
          T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] = ((float32*)T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] + (float32*)T_softmax_exp[(((blockIdx.x_2*1049600) + (threadIdx.x_2*1025)) + k_1)])
        }
      }
    }
    attr [IterVar(blockIdx.x_3: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
    attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
    for (i0.i1.fused.i2.fused.i3.fused.outer_1: int32, 0, 21) {
      if ((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3) < 5268500) {
        T_softmax_norm_2[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] = ((float32*)T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] / (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3), 1025)])
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass tir.ThreadSync
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential tir.ThreadSync
primfn(placeholder_1: handle, T_softmax_norm_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_softmax", "tir.noalias": True, "target": meta[Target][0]}
  buffers = {T_softmax_norm: Buffer(T_softmax_norm_2: Pointer(float32), float32, [2, 10, 257, 1025], []),
             placeholder: Buffer(placeholder_2: Pointer(float32), float32, [2, 10, 257, 1025], [])}
  buffer_map = {placeholder_1: placeholder, T_softmax_norm_1: T_softmax_norm} {
  attr [T_softmax_maxelem: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_maxelem, float32, [5140]);
  attr [T_softmax_exp: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_exp, float32, [5268500]) {
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
    attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
      if (((blockIdx.x*1024) + threadIdx.x) < 5140) {
        T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = -3.40282e+38f32
      }
      for (k: int32, 0, 1025) {
        if (((blockIdx.x*1024) + threadIdx.x) < 5140) {
          T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = max((float32*)T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)], (float32*)placeholder_2[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k)])
        }
      }
    }
    attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
    attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
    for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 21) {
      if ((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1) < 5268500) {
        T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] = @tir.exp(((float32*)placeholder_2[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] - (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1), 1025)]), dtype=float32)
      }
    }
    attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
    attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
      if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
        T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] = 0f32
      }
      for (k_1: int32, 0, 1025) {
        if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
          T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] = ((float32*)T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] + (float32*)T_softmax_exp[(((blockIdx.x_2*1049600) + (threadIdx.x_2*1025)) + k_1)])
        }
      }
    }
    attr [IterVar(blockIdx.x_3: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
    attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
    for (i0.i1.fused.i2.fused.i3.fused.outer_1: int32, 0, 21) {
      if ((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3) < 5268500) {
        T_softmax_norm_2[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] = ((float32*)T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] / (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3), 1025)])
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass tir.ThreadSync
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential tir.ThreadSync
primfn(placeholder_1: handle, T_softmax_norm_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_softmax", "tir.noalias": True, "target": meta[Target][0]}
  buffers = {T_softmax_norm: Buffer(T_softmax_norm_2: Pointer(float32), float32, [2, 10, 257, 1025], []),
             placeholder: Buffer(placeholder_2: Pointer(float32), float32, [2, 10, 257, 1025], [])}
  buffer_map = {placeholder_1: placeholder, T_softmax_norm_1: T_softmax_norm} {
  attr [T_softmax_maxelem: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_maxelem, float32, [5140]);
  attr [T_softmax_exp: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_exp, float32, [5268500]) {
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
    attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
      if (((blockIdx.x*1024) + threadIdx.x) < 5140) {
        T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = -3.40282e+38f32
      }
      for (k: int32, 0, 1025) {
        if (((blockIdx.x*1024) + threadIdx.x) < 5140) {
          T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = max((float32*)T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)], (float32*)placeholder_2[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k)])
        }
      }
    }
    attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
    attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
    for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 21) {
      if ((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1) < 5268500) {
        T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] = @tir.exp(((float32*)placeholder_2[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] - (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1), 1025)]), dtype=float32)
      }
    }
    attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
    attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
      if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
        T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] = 0f32
      }
      for (k_1: int32, 0, 1025) {
        if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
          T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] = ((float32*)T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] + (float32*)T_softmax_exp[(((blockIdx.x_2*1049600) + (threadIdx.x_2*1025)) + k_1)])
        }
      }
    }
    attr [IterVar(blockIdx.x_3: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
    attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
    for (i0.i1.fused.i2.fused.i3.fused.outer_1: int32, 0, 21) {
      if ((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3) < 5268500) {
        T_softmax_norm_2[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] = ((float32*)T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] / (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3), 1025)])
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass tir.InferFragment
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential tir.InferFragment
primfn(placeholder_1: handle, T_softmax_norm_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_softmax", "tir.noalias": True, "target": meta[Target][0]}
  buffers = {T_softmax_norm: Buffer(T_softmax_norm_2: Pointer(float32), float32, [2, 10, 257, 1025], []),
             placeholder: Buffer(placeholder_2: Pointer(float32), float32, [2, 10, 257, 1025], [])}
  buffer_map = {placeholder_1: placeholder, T_softmax_norm_1: T_softmax_norm} {
  attr [T_softmax_maxelem: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_maxelem, float32, [5140]);
  attr [T_softmax_exp: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_exp, float32, [5268500]) {
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
    attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
      if (((blockIdx.x*1024) + threadIdx.x) < 5140) {
        T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = -3.40282e+38f32
      }
      for (k: int32, 0, 1025) {
        if (((blockIdx.x*1024) + threadIdx.x) < 5140) {
          T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = max((float32*)T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)], (float32*)placeholder_2[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k)])
        }
      }
    }
    attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
    attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
    for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 21) {
      if ((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1) < 5268500) {
        T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] = @tir.exp(((float32*)placeholder_2[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] - (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1), 1025)]), dtype=float32)
      }
    }
    attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
    attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
      if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
        T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] = 0f32
      }
      for (k_1: int32, 0, 1025) {
        if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
          T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] = ((float32*)T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] + (float32*)T_softmax_exp[(((blockIdx.x_2*1049600) + (threadIdx.x_2*1025)) + k_1)])
        }
      }
    }
    attr [IterVar(blockIdx.x_3: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
    attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
    for (i0.i1.fused.i2.fused.i3.fused.outer_1: int32, 0, 21) {
      if ((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3) < 5268500) {
        T_softmax_norm_2[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] = ((float32*)T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] / (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3), 1025)])
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass tir.LowerThreadAllreduce
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential tir.LowerThreadAllreduce
primfn(placeholder_1: handle, T_softmax_norm_1: handle) -> ()
  attr = {"global_symbol": "fused_nn_softmax", "tir.noalias": True, "target": meta[Target][0]}
  buffers = {T_softmax_norm: Buffer(T_softmax_norm_2: Pointer(float32), float32, [2, 10, 257, 1025], []),
             placeholder: Buffer(placeholder_2: Pointer(float32), float32, [2, 10, 257, 1025], [])}
  buffer_map = {placeholder_1: placeholder, T_softmax_norm_1: T_softmax_norm} {
  attr [T_softmax_maxelem: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_maxelem, float32, [5140]);
  attr [T_softmax_exp: Pointer(float32)] "storage_scope" = "global";
  allocate(T_softmax_exp, float32, [5268500]) {
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
    attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
      if (((blockIdx.x*1024) + threadIdx.x) < 5140) {
        T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = -3.40282e+38f32
      }
      for (k: int32, 0, 1025) {
        if (((blockIdx.x*1024) + threadIdx.x) < 5140) {
          T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = max((float32*)T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)], (float32*)placeholder_2[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k)])
        }
      }
    }
    attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
    attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
    for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 21) {
      if ((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1) < 5268500) {
        T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] = @tir.exp(((float32*)placeholder_2[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] - (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1), 1025)]), dtype=float32)
      }
    }
    attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
    attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
      if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
        T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] = 0f32
      }
      for (k_1: int32, 0, 1025) {
        if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
          T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] = ((float32*)T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] + (float32*)T_softmax_exp[(((blockIdx.x_2*1049600) + (threadIdx.x_2*1025)) + k_1)])
        }
      }
    }
    attr [IterVar(blockIdx.x_3: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
    attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
    for (i0.i1.fused.i2.fused.i3.fused.outer_1: int32, 0, 21) {
      if ((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3) < 5268500) {
        T_softmax_norm_2[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] = ((float32*)T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] / (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3), 1025)])
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass tir.MakePackedAPI
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify (2 == cast(int32, (int64*)arg0.shape: handle[0]))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify (2 == cast(int32, (int64*)arg0.shape: handle[0]))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify (10 == cast(int32, (int64*)arg0.shape: handle[1]))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify (10 == cast(int32, (int64*)arg0.shape: handle[1]))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify (257 == cast(int32, (int64*)arg0.shape: handle[2]))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify (257 == cast(int32, (int64*)arg0.shape: handle[2]))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify (1025 == cast(int32, (int64*)arg0.shape: handle[3]))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify (1025 == cast(int32, (int64*)arg0.shape: handle[3]))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify (0u64 == @tir.tvm_struct_get(arg0: handle, 0, 8, dtype=uint64))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify (0u64 == @tir.tvm_struct_get(arg0: handle, 0, 8, dtype=uint64))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify (2 == @tir.tvm_struct_get(arg0: handle, 0, 10, dtype=int32))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify (2 == @tir.tvm_struct_get(arg0: handle, 0, 10, dtype=int32))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify (2 == cast(int32, (int64*)arg1.shape: handle[0]))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify (2 == cast(int32, (int64*)arg1.shape: handle[0]))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify (10 == cast(int32, (int64*)arg1.shape: handle[1]))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify (10 == cast(int32, (int64*)arg1.shape: handle[1]))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify (257 == cast(int32, (int64*)arg1.shape: handle[2]))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify (257 == cast(int32, (int64*)arg1.shape: handle[2]))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify (1025 == cast(int32, (int64*)arg1.shape: handle[3]))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify (1025 == cast(int32, (int64*)arg1.shape: handle[3]))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify (0u64 == @tir.tvm_struct_get(arg1: handle, 0, 8, dtype=uint64))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify (0u64 == @tir.tvm_struct_get(arg1: handle, 0, 8, dtype=uint64))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify (2 == @tir.tvm_struct_get(arg1: handle, 0, 10, dtype=int32))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify (2 == @tir.tvm_struct_get(arg1: handle, 0, 10, dtype=int32))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify (dev_id: int32 == @tir.tvm_struct_get(arg1: handle, 0, 9, dtype=int32))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify (dev_id: int32 == @tir.tvm_struct_get(arg1: handle, 0, 9, dtype=int32))
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential tir.MakePackedAPI
primfn(args: handle, arg_type_ids: handle, num_args: int32, out_ret_value: handle, out_ret_tcode: handle, resource_handle: handle) -> int32
  attr = {"global_symbol": "fused_nn_softmax", "tir.noalias": True, "target": meta[Target][0], "calling_conv": 1} {
  assert((num_args == 2), "fused_nn_softmax: num_args should be 2")
  let arg0: handle = @tir.tvm_struct_get(args, 0, 12, dtype=handle)
  let arg0.code: int32 = (int32*)arg_type_ids[0]
  let arg1: handle = @tir.tvm_struct_get(args, 1, 12, dtype=handle)
  let arg1.code: int32 = (int32*)arg_type_ids[1]
  let placeholder: Pointer(float32) = @tir.tvm_struct_get(arg0, 0, 1, dtype=handle)
  attr [placeholder] "storage_alignment" = 128;
  let arg0.shape: handle = @tir.tvm_struct_get(arg0, 0, 2, dtype=handle)
  let arg0.strides: handle = @tir.tvm_struct_get(arg0, 0, 3, dtype=handle)
  let dev_id: int32 = @tir.tvm_struct_get(arg0, 0, 9, dtype=int32)
  let T_softmax_norm: Pointer(float32) = @tir.tvm_struct_get(arg1, 0, 1, dtype=handle)
  attr [T_softmax_norm] "storage_alignment" = 128;
  let arg1.shape: handle = @tir.tvm_struct_get(arg1, 0, 2, dtype=handle)
  let arg1.strides: handle = @tir.tvm_struct_get(arg1, 0, 3, dtype=handle)
  assert(((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), "fused_nn_softmax: Expect arg[0] to be pointer")
  assert(((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), "fused_nn_softmax: Expect arg[1] to be pointer")
  attr ["default"] "device_id" = dev_id;
  attr ["default"] "device_type" = 2;
  assert((4 == @tir.tvm_struct_get(arg0, 0, 4, dtype=int32)), "arg0.ndim is expected to equal 4")
  assert((4 == @tir.tvm_struct_get(arg0, 0, 4, dtype=int32)), "arg0.ndim is expected to equal 4")
  assert((((@tir.tvm_struct_get(arg0, 0, 5, dtype=uint8) == 2u8) && (@tir.tvm_struct_get(arg0, 0, 6, dtype=uint8) == 32u8)) && (@tir.tvm_struct_get(arg0, 0, 7, dtype=uint16) == 1u16)), "arg0.dtype is expected to be float32")
  assert((2 == cast(int32, (int64*)arg0.shape[0])), "Argument arg0.shape[0] has an unsatisfied constraint: (2 == int32(arg0.shape[0]))")
  assert((10 == cast(int32, (int64*)arg0.shape[1])), "Argument arg0.shape[1] has an unsatisfied constraint: (10 == int32(arg0.shape[1]))")
  assert((257 == cast(int32, (int64*)arg0.shape[2])), "Argument arg0.shape[2] has an unsatisfied constraint: (257 == int32(arg0.shape[2]))")
  assert((1025 == cast(int32, (int64*)arg0.shape[3])), "Argument arg0.shape[3] has an unsatisfied constraint: (1025 == int32(arg0.shape[3]))")
   {
    if !@tir.isnullptr(arg0.strides, dtype=bool) {
      assert(((((1 == cast(int32, (int64*)arg0.strides[3])) && (1025 == cast(int32, (int64*)arg0.strides[2]))) && (263425 == cast(int32, (int64*)arg0.strides[1]))) && (2634250 == cast(int32, (int64*)arg0.strides[0]))), "arg0.strides: expected to be compact array")
      0
    }
    assert((0u64 == @tir.tvm_struct_get(arg0, 0, 8, dtype=uint64)), "Argument arg0.byte_offset has an unsatisfied constraint: ((uint64)0 == tir.tvm_struct_get(arg0, 0, 8))")
    assert((2 == @tir.tvm_struct_get(arg0, 0, 10, dtype=int32)), "Argument arg0.device_type has an unsatisfied constraint: (2 == tir.tvm_struct_get(arg0, 0, 10))")
    assert((4 == @tir.tvm_struct_get(arg1, 0, 4, dtype=int32)), "arg1.ndim is expected to equal 4")
    assert((4 == @tir.tvm_struct_get(arg1, 0, 4, dtype=int32)), "arg1.ndim is expected to equal 4")
    assert((((@tir.tvm_struct_get(arg1, 0, 5, dtype=uint8) == 2u8) && (@tir.tvm_struct_get(arg1, 0, 6, dtype=uint8) == 32u8)) && (@tir.tvm_struct_get(arg1, 0, 7, dtype=uint16) == 1u16)), "arg1.dtype is expected to be float32")
    assert((2 == cast(int32, (int64*)arg1.shape[0])), "Argument arg1.shape[0] has an unsatisfied constraint: (2 == int32(arg1.shape[0]))")
    assert((10 == cast(int32, (int64*)arg1.shape[1])), "Argument arg1.shape[1] has an unsatisfied constraint: (10 == int32(arg1.shape[1]))")
    assert((257 == cast(int32, (int64*)arg1.shape[2])), "Argument arg1.shape[2] has an unsatisfied constraint: (257 == int32(arg1.shape[2]))")
    assert((1025 == cast(int32, (int64*)arg1.shape[3])), "Argument arg1.shape[3] has an unsatisfied constraint: (1025 == int32(arg1.shape[3]))")
     {
      if !@tir.isnullptr(arg1.strides, dtype=bool) {
        assert(((((1 == cast(int32, (int64*)arg1.strides[3])) && (1025 == cast(int32, (int64*)arg1.strides[2]))) && (263425 == cast(int32, (int64*)arg1.strides[1]))) && (2634250 == cast(int32, (int64*)arg1.strides[0]))), "arg1.strides: expected to be compact array")
        0
      }
      assert((0u64 == @tir.tvm_struct_get(arg1, 0, 8, dtype=uint64)), "Argument arg1.byte_offset has an unsatisfied constraint: ((uint64)0 == tir.tvm_struct_get(arg1, 0, 8))")
      assert((2 == @tir.tvm_struct_get(arg1, 0, 10, dtype=int32)), "Argument arg1.device_type has an unsatisfied constraint: (2 == tir.tvm_struct_get(arg1, 0, 10))")
      assert((dev_id == @tir.tvm_struct_get(arg1, 0, 9, dtype=int32)), "Argument arg1.device_id has an unsatisfied constraint: (dev_id == tir.tvm_struct_get(arg1, 0, 9))")
       {
        @tir.tvm_call_packed("__tvm_set_device", 2, dev_id, dtype=int32)
        attr [0] "compute_scope" = "fused_nn_softmax_compute_";
        attr [T_softmax_maxelem: Pointer(float32)] "storage_scope" = "global";
        allocate(T_softmax_maxelem, float32, [5140]);
        attr [T_softmax_exp: Pointer(float32)] "storage_scope" = "global";
        allocate(T_softmax_exp, float32, [5268500]) {
          attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
          attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
            if (((blockIdx.x*1024) + threadIdx.x) < 5140) {
              T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = -3.40282e+38f32
            }
            for (k: int32, 0, 1025) {
              if (((blockIdx.x*1024) + threadIdx.x) < 5140) {
                T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)] = max((float32*)T_softmax_maxelem[((blockIdx.x*1024) + threadIdx.x)], (float32*)placeholder[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k)])
              }
            }
          }
          attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
          attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
          for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 21) {
            if ((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1) < 5268500) {
              T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] = @tir.exp(((float32*)placeholder[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] - (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1), 1025)]), dtype=float32)
            }
          }
          attr [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
          attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
            if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
              T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] = 0f32
            }
            for (k_1: int32, 0, 1025) {
              if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
                T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] = ((float32*)T_softmax_maxelem[((blockIdx.x_2*1024) + threadIdx.x_2)] + (float32*)T_softmax_exp[(((blockIdx.x_2*1049600) + (threadIdx.x_2*1025)) + k_1)])
              }
            }
          }
          attr [IterVar(blockIdx.x_3: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
          attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
          for (i0.i1.fused.i2.fused.i3.fused.outer_1: int32, 0, 21) {
            if ((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3) < 5268500) {
              T_softmax_norm[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] = ((float32*)T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] / (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3), 1025)])
            }
          }
        }
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass tir.SplitHostDevice
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential tir.SplitHostDevice
primfn(T_softmax_norm: Pointer(float32), T_softmax_exp: Pointer(float32), T_softmax_maxelem: Pointer(float32)) -> ()
  attr = {"target": meta[Target][0], "tir.noalias": 1, "global_symbol": "fused_nn_softmax_kernel3", "tir.device_thread_axis": [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x"), IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")], "calling_conv": 2} {
  attr [IterVar(blockIdx.x, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 21) {
    if ((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) < 5268500) {
      T_softmax_norm[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = ((float32*)T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] / (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x), 1025)])
    }
  }
}

primfn(args: handle, arg_type_ids: handle, num_args: int32, out_ret_value: handle, out_ret_tcode: handle, resource_handle: handle) -> int32
  attr = {"target": (nullptr), "tir.noalias": True, "global_symbol": "fused_nn_softmax", "calling_conv": 1} {
  assert((num_args == 2), "fused_nn_softmax: num_args should be 2")
  let arg0: handle = @tir.tvm_struct_get(args, 0, 12, dtype=handle)
  let arg0.code: int32 = (int32*)arg_type_ids[0]
  let arg1: handle = @tir.tvm_struct_get(args, 1, 12, dtype=handle)
  let arg1.code: int32 = (int32*)arg_type_ids[1]
  let placeholder: Pointer(float32) = @tir.tvm_struct_get(arg0, 0, 1, dtype=handle)
  attr [placeholder] "storage_alignment" = 128;
  let arg0.shape: handle = @tir.tvm_struct_get(arg0, 0, 2, dtype=handle)
  let arg0.strides: handle = @tir.tvm_struct_get(arg0, 0, 3, dtype=handle)
  let dev_id: int32 = @tir.tvm_struct_get(arg0, 0, 9, dtype=int32)
  let T_softmax_norm_1: Pointer(float32) = @tir.tvm_struct_get(arg1, 0, 1, dtype=handle)
  attr [T_softmax_norm_1] "storage_alignment" = 128;
  let arg1.shape: handle = @tir.tvm_struct_get(arg1, 0, 2, dtype=handle)
  let arg1.strides: handle = @tir.tvm_struct_get(arg1, 0, 3, dtype=handle)
  assert(((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), "fused_nn_softmax: Expect arg[0] to be pointer")
  assert(((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), "fused_nn_softmax: Expect arg[1] to be pointer")
  attr ["default"] "device_id" = dev_id;
  attr ["default"] "device_type" = 2;
  assert((4 == @tir.tvm_struct_get(arg0, 0, 4, dtype=int32)), "arg0.ndim is expected to equal 4")
  assert((4 == @tir.tvm_struct_get(arg0, 0, 4, dtype=int32)), "arg0.ndim is expected to equal 4")
  assert((((@tir.tvm_struct_get(arg0, 0, 5, dtype=uint8) == 2u8) && (@tir.tvm_struct_get(arg0, 0, 6, dtype=uint8) == 32u8)) && (@tir.tvm_struct_get(arg0, 0, 7, dtype=uint16) == 1u16)), "arg0.dtype is expected to be float32")
  assert((2 == cast(int32, (int64*)arg0.shape[0])), "Argument arg0.shape[0] has an unsatisfied constraint: (2 == int32(arg0.shape[0]))")
  assert((10 == cast(int32, (int64*)arg0.shape[1])), "Argument arg0.shape[1] has an unsatisfied constraint: (10 == int32(arg0.shape[1]))")
  assert((257 == cast(int32, (int64*)arg0.shape[2])), "Argument arg0.shape[2] has an unsatisfied constraint: (257 == int32(arg0.shape[2]))")
  assert((1025 == cast(int32, (int64*)arg0.shape[3])), "Argument arg0.shape[3] has an unsatisfied constraint: (1025 == int32(arg0.shape[3]))")
   {
    if !@tir.isnullptr(arg0.strides, dtype=bool) {
      assert(((((1 == cast(int32, (int64*)arg0.strides[3])) && (1025 == cast(int32, (int64*)arg0.strides[2]))) && (263425 == cast(int32, (int64*)arg0.strides[1]))) && (2634250 == cast(int32, (int64*)arg0.strides[0]))), "arg0.strides: expected to be compact array")
      0
    }
    assert((0u64 == @tir.tvm_struct_get(arg0, 0, 8, dtype=uint64)), "Argument arg0.byte_offset has an unsatisfied constraint: ((uint64)0 == tir.tvm_struct_get(arg0, 0, 8))")
    assert((2 == @tir.tvm_struct_get(arg0, 0, 10, dtype=int32)), "Argument arg0.device_type has an unsatisfied constraint: (2 == tir.tvm_struct_get(arg0, 0, 10))")
    assert((4 == @tir.tvm_struct_get(arg1, 0, 4, dtype=int32)), "arg1.ndim is expected to equal 4")
    assert((4 == @tir.tvm_struct_get(arg1, 0, 4, dtype=int32)), "arg1.ndim is expected to equal 4")
    assert((((@tir.tvm_struct_get(arg1, 0, 5, dtype=uint8) == 2u8) && (@tir.tvm_struct_get(arg1, 0, 6, dtype=uint8) == 32u8)) && (@tir.tvm_struct_get(arg1, 0, 7, dtype=uint16) == 1u16)), "arg1.dtype is expected to be float32")
    assert((2 == cast(int32, (int64*)arg1.shape[0])), "Argument arg1.shape[0] has an unsatisfied constraint: (2 == int32(arg1.shape[0]))")
    assert((10 == cast(int32, (int64*)arg1.shape[1])), "Argument arg1.shape[1] has an unsatisfied constraint: (10 == int32(arg1.shape[1]))")
    assert((257 == cast(int32, (int64*)arg1.shape[2])), "Argument arg1.shape[2] has an unsatisfied constraint: (257 == int32(arg1.shape[2]))")
    assert((1025 == cast(int32, (int64*)arg1.shape[3])), "Argument arg1.shape[3] has an unsatisfied constraint: (1025 == int32(arg1.shape[3]))")
     {
      if !@tir.isnullptr(arg1.strides, dtype=bool) {
        assert(((((1 == cast(int32, (int64*)arg1.strides[3])) && (1025 == cast(int32, (int64*)arg1.strides[2]))) && (263425 == cast(int32, (int64*)arg1.strides[1]))) && (2634250 == cast(int32, (int64*)arg1.strides[0]))), "arg1.strides: expected to be compact array")
        0
      }
      assert((0u64 == @tir.tvm_struct_get(arg1, 0, 8, dtype=uint64)), "Argument arg1.byte_offset has an unsatisfied constraint: ((uint64)0 == tir.tvm_struct_get(arg1, 0, 8))")
      assert((2 == @tir.tvm_struct_get(arg1, 0, 10, dtype=int32)), "Argument arg1.device_type has an unsatisfied constraint: (2 == tir.tvm_struct_get(arg1, 0, 10))")
      assert((dev_id == @tir.tvm_struct_get(arg1, 0, 9, dtype=int32)), "Argument arg1.device_id has an unsatisfied constraint: (dev_id == tir.tvm_struct_get(arg1, 0, 9))")
       {
        @tir.tvm_call_packed("__tvm_set_device", 2, dev_id, dtype=int32)
        attr [0] "compute_scope" = "fused_nn_softmax_compute_";
        attr [T_softmax_maxelem_1: Pointer(float32)] "storage_scope" = "global";
        allocate(T_softmax_maxelem_1, float32, [5140]);
        attr [T_softmax_exp_1: Pointer(float32)] "storage_scope" = "global";
        allocate(T_softmax_exp_1, float32, [5268500]) {
          @tir.tvm_call_packed("fused_nn_softmax_kernel0", T_softmax_maxelem_1, placeholder, 6, 1024, dtype=int32)
          @tir.tvm_call_packed("fused_nn_softmax_kernel1", T_softmax_exp_1, placeholder, T_softmax_maxelem_1, 256, 1024, dtype=int32)
          @tir.tvm_call_packed("fused_nn_softmax_kernel2", T_softmax_maxelem_1, T_softmax_exp_1, 6, 1024, dtype=int32)
          @tir.tvm_call_packed("fused_nn_softmax_kernel3", T_softmax_norm_1, T_softmax_exp_1, T_softmax_maxelem_1, 256, 1024, dtype=int32)
        }
      }
    }
  }
}

primfn(T_softmax_maxelem_2: Pointer(float32), placeholder_1: Pointer(float32)) -> ()
  attr = {"target": meta[Target][0], "tir.noalias": 1, "global_symbol": "fused_nn_softmax_kernel0", "tir.device_thread_axis": [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x"), IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")], "calling_conv": 2} {
  attr [IterVar(blockIdx.x_1, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
  attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
    if (((blockIdx.x_1*1024) + threadIdx.x_1) < 5140) {
      T_softmax_maxelem_2[((blockIdx.x_1*1024) + threadIdx.x_1)] = -3.40282e+38f32
    }
    for (k: int32, 0, 1025) {
      if (((blockIdx.x_1*1024) + threadIdx.x_1) < 5140) {
        T_softmax_maxelem_2[((blockIdx.x_1*1024) + threadIdx.x_1)] = max((float32*)T_softmax_maxelem_2[((blockIdx.x_1*1024) + threadIdx.x_1)], (float32*)placeholder_1[(((blockIdx.x_1*1049600) + (threadIdx.x_1*1025)) + k)])
      }
    }
  }
}

primfn(T_softmax_maxelem_3: Pointer(float32), T_softmax_exp_2: Pointer(float32)) -> ()
  attr = {"target": meta[Target][0], "tir.noalias": 1, "global_symbol": "fused_nn_softmax_kernel2", "tir.device_thread_axis": [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x"), IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")], "calling_conv": 2} {
  attr [IterVar(blockIdx.x_2, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
  attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
    if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
      T_softmax_maxelem_3[((blockIdx.x_2*1024) + threadIdx.x_2)] = 0f32
    }
    for (k_1: int32, 0, 1025) {
      if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
        T_softmax_maxelem_3[((blockIdx.x_2*1024) + threadIdx.x_2)] = ((float32*)T_softmax_maxelem_3[((blockIdx.x_2*1024) + threadIdx.x_2)] + (float32*)T_softmax_exp_2[(((blockIdx.x_2*1049600) + (threadIdx.x_2*1025)) + k_1)])
      }
    }
  }
}

primfn(T_softmax_exp_3: Pointer(float32), placeholder_2: Pointer(float32), T_softmax_maxelem_4: Pointer(float32)) -> ()
  attr = {"target": meta[Target][0], "tir.noalias": 1, "global_symbol": "fused_nn_softmax_kernel1", "tir.device_thread_axis": [IterVar(blockIdx.x_3: int32, (nullptr), "ThreadIndex", "blockIdx.x"), IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")], "calling_conv": 2} {
  attr [IterVar(blockIdx.x_3, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (i0.i1.fused.i2.fused.i3.fused.outer_1: int32, 0, 21) {
    if ((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3) < 5268500) {
      T_softmax_exp_3[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] = @tir.exp(((float32*)placeholder_2[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3)] - (float32*)T_softmax_maxelem_4[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_3*1024)) + threadIdx.x_3), 1025)]), dtype=float32)
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass Filter
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential Filter
primfn(args: handle, arg_type_ids: handle, num_args: int32, out_ret_value: handle, out_ret_tcode: handle, resource_handle: handle) -> int32
  attr = {"target": (nullptr), "tir.noalias": True, "global_symbol": "fused_nn_softmax", "calling_conv": 1} {
  assert((num_args == 2), "fused_nn_softmax: num_args should be 2")
  let arg0: handle = @tir.tvm_struct_get(args, 0, 12, dtype=handle)
  let arg0.code: int32 = (int32*)arg_type_ids[0]
  let arg1: handle = @tir.tvm_struct_get(args, 1, 12, dtype=handle)
  let arg1.code: int32 = (int32*)arg_type_ids[1]
  let placeholder: Pointer(float32) = @tir.tvm_struct_get(arg0, 0, 1, dtype=handle)
  attr [placeholder] "storage_alignment" = 128;
  let arg0.shape: handle = @tir.tvm_struct_get(arg0, 0, 2, dtype=handle)
  let arg0.strides: handle = @tir.tvm_struct_get(arg0, 0, 3, dtype=handle)
  let dev_id: int32 = @tir.tvm_struct_get(arg0, 0, 9, dtype=int32)
  let T_softmax_norm: Pointer(float32) = @tir.tvm_struct_get(arg1, 0, 1, dtype=handle)
  attr [T_softmax_norm] "storage_alignment" = 128;
  let arg1.shape: handle = @tir.tvm_struct_get(arg1, 0, 2, dtype=handle)
  let arg1.strides: handle = @tir.tvm_struct_get(arg1, 0, 3, dtype=handle)
  assert(((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), "fused_nn_softmax: Expect arg[0] to be pointer")
  assert(((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), "fused_nn_softmax: Expect arg[1] to be pointer")
  attr ["default"] "device_id" = dev_id;
  attr ["default"] "device_type" = 2;
  assert((4 == @tir.tvm_struct_get(arg0, 0, 4, dtype=int32)), "arg0.ndim is expected to equal 4")
  assert((4 == @tir.tvm_struct_get(arg0, 0, 4, dtype=int32)), "arg0.ndim is expected to equal 4")
  assert((((@tir.tvm_struct_get(arg0, 0, 5, dtype=uint8) == 2u8) && (@tir.tvm_struct_get(arg0, 0, 6, dtype=uint8) == 32u8)) && (@tir.tvm_struct_get(arg0, 0, 7, dtype=uint16) == 1u16)), "arg0.dtype is expected to be float32")
  assert((2 == cast(int32, (int64*)arg0.shape[0])), "Argument arg0.shape[0] has an unsatisfied constraint: (2 == int32(arg0.shape[0]))")
  assert((10 == cast(int32, (int64*)arg0.shape[1])), "Argument arg0.shape[1] has an unsatisfied constraint: (10 == int32(arg0.shape[1]))")
  assert((257 == cast(int32, (int64*)arg0.shape[2])), "Argument arg0.shape[2] has an unsatisfied constraint: (257 == int32(arg0.shape[2]))")
  assert((1025 == cast(int32, (int64*)arg0.shape[3])), "Argument arg0.shape[3] has an unsatisfied constraint: (1025 == int32(arg0.shape[3]))")
   {
    if !@tir.isnullptr(arg0.strides, dtype=bool) {
      assert(((((1 == cast(int32, (int64*)arg0.strides[3])) && (1025 == cast(int32, (int64*)arg0.strides[2]))) && (263425 == cast(int32, (int64*)arg0.strides[1]))) && (2634250 == cast(int32, (int64*)arg0.strides[0]))), "arg0.strides: expected to be compact array")
      0
    }
    assert((0u64 == @tir.tvm_struct_get(arg0, 0, 8, dtype=uint64)), "Argument arg0.byte_offset has an unsatisfied constraint: ((uint64)0 == tir.tvm_struct_get(arg0, 0, 8))")
    assert((2 == @tir.tvm_struct_get(arg0, 0, 10, dtype=int32)), "Argument arg0.device_type has an unsatisfied constraint: (2 == tir.tvm_struct_get(arg0, 0, 10))")
    assert((4 == @tir.tvm_struct_get(arg1, 0, 4, dtype=int32)), "arg1.ndim is expected to equal 4")
    assert((4 == @tir.tvm_struct_get(arg1, 0, 4, dtype=int32)), "arg1.ndim is expected to equal 4")
    assert((((@tir.tvm_struct_get(arg1, 0, 5, dtype=uint8) == 2u8) && (@tir.tvm_struct_get(arg1, 0, 6, dtype=uint8) == 32u8)) && (@tir.tvm_struct_get(arg1, 0, 7, dtype=uint16) == 1u16)), "arg1.dtype is expected to be float32")
    assert((2 == cast(int32, (int64*)arg1.shape[0])), "Argument arg1.shape[0] has an unsatisfied constraint: (2 == int32(arg1.shape[0]))")
    assert((10 == cast(int32, (int64*)arg1.shape[1])), "Argument arg1.shape[1] has an unsatisfied constraint: (10 == int32(arg1.shape[1]))")
    assert((257 == cast(int32, (int64*)arg1.shape[2])), "Argument arg1.shape[2] has an unsatisfied constraint: (257 == int32(arg1.shape[2]))")
    assert((1025 == cast(int32, (int64*)arg1.shape[3])), "Argument arg1.shape[3] has an unsatisfied constraint: (1025 == int32(arg1.shape[3]))")
     {
      if !@tir.isnullptr(arg1.strides, dtype=bool) {
        assert(((((1 == cast(int32, (int64*)arg1.strides[3])) && (1025 == cast(int32, (int64*)arg1.strides[2]))) && (263425 == cast(int32, (int64*)arg1.strides[1]))) && (2634250 == cast(int32, (int64*)arg1.strides[0]))), "arg1.strides: expected to be compact array")
        0
      }
      assert((0u64 == @tir.tvm_struct_get(arg1, 0, 8, dtype=uint64)), "Argument arg1.byte_offset has an unsatisfied constraint: ((uint64)0 == tir.tvm_struct_get(arg1, 0, 8))")
      assert((2 == @tir.tvm_struct_get(arg1, 0, 10, dtype=int32)), "Argument arg1.device_type has an unsatisfied constraint: (2 == tir.tvm_struct_get(arg1, 0, 10))")
      assert((dev_id == @tir.tvm_struct_get(arg1, 0, 9, dtype=int32)), "Argument arg1.device_id has an unsatisfied constraint: (dev_id == tir.tvm_struct_get(arg1, 0, 9))")
       {
        @tir.tvm_call_packed("__tvm_set_device", 2, dev_id, dtype=int32)
        attr [0] "compute_scope" = "fused_nn_softmax_compute_";
        attr [T_softmax_maxelem: Pointer(float32)] "storage_scope" = "global";
        allocate(T_softmax_maxelem, float32, [5140]);
        attr [T_softmax_exp: Pointer(float32)] "storage_scope" = "global";
        allocate(T_softmax_exp, float32, [5268500]) {
          @tir.tvm_call_packed("fused_nn_softmax_kernel0", T_softmax_maxelem, placeholder, 6, 1024, dtype=int32)
          @tir.tvm_call_packed("fused_nn_softmax_kernel1", T_softmax_exp, placeholder, T_softmax_maxelem, 256, 1024, dtype=int32)
          @tir.tvm_call_packed("fused_nn_softmax_kernel2", T_softmax_maxelem, T_softmax_exp, 6, 1024, dtype=int32)
          @tir.tvm_call_packed("fused_nn_softmax_kernel3", T_softmax_norm, T_softmax_exp, T_softmax_maxelem, 256, 1024, dtype=int32)
        }
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass BindTarget
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential BindTarget
primfn(args: handle, arg_type_ids: handle, num_args: int32, out_ret_value: handle, out_ret_tcode: handle, resource_handle: handle) -> int32
  attr = {"target": meta[Target][0], "tir.noalias": True, "global_symbol": "fused_nn_softmax", "calling_conv": 1} {
  assert((num_args == 2), "fused_nn_softmax: num_args should be 2")
  let arg0: handle = @tir.tvm_struct_get(args, 0, 12, dtype=handle)
  let arg0.code: int32 = (int32*)arg_type_ids[0]
  let arg1: handle = @tir.tvm_struct_get(args, 1, 12, dtype=handle)
  let arg1.code: int32 = (int32*)arg_type_ids[1]
  let placeholder: Pointer(float32) = @tir.tvm_struct_get(arg0, 0, 1, dtype=handle)
  attr [placeholder] "storage_alignment" = 128;
  let arg0.shape: handle = @tir.tvm_struct_get(arg0, 0, 2, dtype=handle)
  let arg0.strides: handle = @tir.tvm_struct_get(arg0, 0, 3, dtype=handle)
  let dev_id: int32 = @tir.tvm_struct_get(arg0, 0, 9, dtype=int32)
  let T_softmax_norm: Pointer(float32) = @tir.tvm_struct_get(arg1, 0, 1, dtype=handle)
  attr [T_softmax_norm] "storage_alignment" = 128;
  let arg1.shape: handle = @tir.tvm_struct_get(arg1, 0, 2, dtype=handle)
  let arg1.strides: handle = @tir.tvm_struct_get(arg1, 0, 3, dtype=handle)
  assert(((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), "fused_nn_softmax: Expect arg[0] to be pointer")
  assert(((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), "fused_nn_softmax: Expect arg[1] to be pointer")
  attr ["default"] "device_id" = dev_id;
  attr ["default"] "device_type" = 2;
  assert((4 == @tir.tvm_struct_get(arg0, 0, 4, dtype=int32)), "arg0.ndim is expected to equal 4")
  assert((4 == @tir.tvm_struct_get(arg0, 0, 4, dtype=int32)), "arg0.ndim is expected to equal 4")
  assert((((@tir.tvm_struct_get(arg0, 0, 5, dtype=uint8) == 2u8) && (@tir.tvm_struct_get(arg0, 0, 6, dtype=uint8) == 32u8)) && (@tir.tvm_struct_get(arg0, 0, 7, dtype=uint16) == 1u16)), "arg0.dtype is expected to be float32")
  assert((2 == cast(int32, (int64*)arg0.shape[0])), "Argument arg0.shape[0] has an unsatisfied constraint: (2 == int32(arg0.shape[0]))")
  assert((10 == cast(int32, (int64*)arg0.shape[1])), "Argument arg0.shape[1] has an unsatisfied constraint: (10 == int32(arg0.shape[1]))")
  assert((257 == cast(int32, (int64*)arg0.shape[2])), "Argument arg0.shape[2] has an unsatisfied constraint: (257 == int32(arg0.shape[2]))")
  assert((1025 == cast(int32, (int64*)arg0.shape[3])), "Argument arg0.shape[3] has an unsatisfied constraint: (1025 == int32(arg0.shape[3]))")
   {
    if !@tir.isnullptr(arg0.strides, dtype=bool) {
      assert(((((1 == cast(int32, (int64*)arg0.strides[3])) && (1025 == cast(int32, (int64*)arg0.strides[2]))) && (263425 == cast(int32, (int64*)arg0.strides[1]))) && (2634250 == cast(int32, (int64*)arg0.strides[0]))), "arg0.strides: expected to be compact array")
      0
    }
    assert((0u64 == @tir.tvm_struct_get(arg0, 0, 8, dtype=uint64)), "Argument arg0.byte_offset has an unsatisfied constraint: ((uint64)0 == tir.tvm_struct_get(arg0, 0, 8))")
    assert((2 == @tir.tvm_struct_get(arg0, 0, 10, dtype=int32)), "Argument arg0.device_type has an unsatisfied constraint: (2 == tir.tvm_struct_get(arg0, 0, 10))")
    assert((4 == @tir.tvm_struct_get(arg1, 0, 4, dtype=int32)), "arg1.ndim is expected to equal 4")
    assert((4 == @tir.tvm_struct_get(arg1, 0, 4, dtype=int32)), "arg1.ndim is expected to equal 4")
    assert((((@tir.tvm_struct_get(arg1, 0, 5, dtype=uint8) == 2u8) && (@tir.tvm_struct_get(arg1, 0, 6, dtype=uint8) == 32u8)) && (@tir.tvm_struct_get(arg1, 0, 7, dtype=uint16) == 1u16)), "arg1.dtype is expected to be float32")
    assert((2 == cast(int32, (int64*)arg1.shape[0])), "Argument arg1.shape[0] has an unsatisfied constraint: (2 == int32(arg1.shape[0]))")
    assert((10 == cast(int32, (int64*)arg1.shape[1])), "Argument arg1.shape[1] has an unsatisfied constraint: (10 == int32(arg1.shape[1]))")
    assert((257 == cast(int32, (int64*)arg1.shape[2])), "Argument arg1.shape[2] has an unsatisfied constraint: (257 == int32(arg1.shape[2]))")
    assert((1025 == cast(int32, (int64*)arg1.shape[3])), "Argument arg1.shape[3] has an unsatisfied constraint: (1025 == int32(arg1.shape[3]))")
     {
      if !@tir.isnullptr(arg1.strides, dtype=bool) {
        assert(((((1 == cast(int32, (int64*)arg1.strides[3])) && (1025 == cast(int32, (int64*)arg1.strides[2]))) && (263425 == cast(int32, (int64*)arg1.strides[1]))) && (2634250 == cast(int32, (int64*)arg1.strides[0]))), "arg1.strides: expected to be compact array")
        0
      }
      assert((0u64 == @tir.tvm_struct_get(arg1, 0, 8, dtype=uint64)), "Argument arg1.byte_offset has an unsatisfied constraint: ((uint64)0 == tir.tvm_struct_get(arg1, 0, 8))")
      assert((2 == @tir.tvm_struct_get(arg1, 0, 10, dtype=int32)), "Argument arg1.device_type has an unsatisfied constraint: (2 == tir.tvm_struct_get(arg1, 0, 10))")
      assert((dev_id == @tir.tvm_struct_get(arg1, 0, 9, dtype=int32)), "Argument arg1.device_id has an unsatisfied constraint: (dev_id == tir.tvm_struct_get(arg1, 0, 9))")
       {
        @tir.tvm_call_packed("__tvm_set_device", 2, dev_id, dtype=int32)
        attr [0] "compute_scope" = "fused_nn_softmax_compute_";
        attr [T_softmax_maxelem: Pointer(float32)] "storage_scope" = "global";
        allocate(T_softmax_maxelem, float32, [5140]);
        attr [T_softmax_exp: Pointer(float32)] "storage_scope" = "global";
        allocate(T_softmax_exp, float32, [5268500]) {
          @tir.tvm_call_packed("fused_nn_softmax_kernel0", T_softmax_maxelem, placeholder, 6, 1024, dtype=int32)
          @tir.tvm_call_packed("fused_nn_softmax_kernel1", T_softmax_exp, placeholder, T_softmax_maxelem, 256, 1024, dtype=int32)
          @tir.tvm_call_packed("fused_nn_softmax_kernel2", T_softmax_maxelem, T_softmax_exp, 6, 1024, dtype=int32)
          @tir.tvm_call_packed("fused_nn_softmax_kernel3", T_softmax_norm, T_softmax_exp, T_softmax_maxelem, 256, 1024, dtype=int32)
        }
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass tir.LowerTVMBuiltin
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential tir.LowerTVMBuiltin
primfn(args: handle, arg_type_ids: handle, num_args: int32, out_ret_value: handle, out_ret_tcode: handle, resource_handle: handle) -> int32
  attr = {"target": meta[Target][0], "tir.noalias": True, "global_symbol": "fused_nn_softmax", "calling_conv": 1} {
  let stack_tcode: handle = @tir.tvm_stack_alloca("arg_tcode", 6, dtype=handle)
  let stack_value: handle = @tir.tvm_stack_alloca("arg_value", 6, dtype=handle)
  assert((num_args == 2), "fused_nn_softmax: num_args should be 2")
  let arg0: handle = @tir.tvm_struct_get(args, 0, 12, dtype=handle)
  let arg0.code: int32 = (int32*)arg_type_ids[0]
  let arg1: handle = @tir.tvm_struct_get(args, 1, 12, dtype=handle)
  let arg1.code: int32 = (int32*)arg_type_ids[1]
  let placeholder: Pointer(float32) = @tir.tvm_struct_get(arg0, 0, 1, dtype=handle)
  attr [placeholder] "storage_alignment" = 128;
  let arg0.shape: handle = @tir.tvm_struct_get(arg0, 0, 2, dtype=handle)
  let arg0.strides: handle = @tir.tvm_struct_get(arg0, 0, 3, dtype=handle)
  let dev_id: int32 = @tir.tvm_struct_get(arg0, 0, 9, dtype=int32)
  let T_softmax_norm: Pointer(float32) = @tir.tvm_struct_get(arg1, 0, 1, dtype=handle)
  attr [T_softmax_norm] "storage_alignment" = 128;
  let arg1.shape: handle = @tir.tvm_struct_get(arg1, 0, 2, dtype=handle)
  let arg1.strides: handle = @tir.tvm_struct_get(arg1, 0, 3, dtype=handle)
  assert(((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), "fused_nn_softmax: Expect arg[0] to be pointer")
  assert(((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), "fused_nn_softmax: Expect arg[1] to be pointer")
  assert((4 == @tir.tvm_struct_get(arg0, 0, 4, dtype=int32)), "arg0.ndim is expected to equal 4")
  assert((4 == @tir.tvm_struct_get(arg0, 0, 4, dtype=int32)), "arg0.ndim is expected to equal 4")
  assert((((@tir.tvm_struct_get(arg0, 0, 5, dtype=uint8) == 2u8) && (@tir.tvm_struct_get(arg0, 0, 6, dtype=uint8) == 32u8)) && (@tir.tvm_struct_get(arg0, 0, 7, dtype=uint16) == 1u16)), "arg0.dtype is expected to be float32")
  assert((2 == cast(int32, (int64*)arg0.shape[0])), "Argument arg0.shape[0] has an unsatisfied constraint: (2 == int32(arg0.shape[0]))")
  assert((10 == cast(int32, (int64*)arg0.shape[1])), "Argument arg0.shape[1] has an unsatisfied constraint: (10 == int32(arg0.shape[1]))")
  assert((257 == cast(int32, (int64*)arg0.shape[2])), "Argument arg0.shape[2] has an unsatisfied constraint: (257 == int32(arg0.shape[2]))")
  assert((1025 == cast(int32, (int64*)arg0.shape[3])), "Argument arg0.shape[3] has an unsatisfied constraint: (1025 == int32(arg0.shape[3]))")
   {
    if !@tir.isnullptr(arg0.strides, dtype=bool) {
      assert(((((1 == cast(int32, (int64*)arg0.strides[3])) && (1025 == cast(int32, (int64*)arg0.strides[2]))) && (263425 == cast(int32, (int64*)arg0.strides[1]))) && (2634250 == cast(int32, (int64*)arg0.strides[0]))), "arg0.strides: expected to be compact array")
      0
    }
    assert((0u64 == @tir.tvm_struct_get(arg0, 0, 8, dtype=uint64)), "Argument arg0.byte_offset has an unsatisfied constraint: ((uint64)0 == tir.tvm_struct_get(arg0, 0, 8))")
    assert((2 == @tir.tvm_struct_get(arg0, 0, 10, dtype=int32)), "Argument arg0.device_type has an unsatisfied constraint: (2 == tir.tvm_struct_get(arg0, 0, 10))")
    assert((4 == @tir.tvm_struct_get(arg1, 0, 4, dtype=int32)), "arg1.ndim is expected to equal 4")
    assert((4 == @tir.tvm_struct_get(arg1, 0, 4, dtype=int32)), "arg1.ndim is expected to equal 4")
    assert((((@tir.tvm_struct_get(arg1, 0, 5, dtype=uint8) == 2u8) && (@tir.tvm_struct_get(arg1, 0, 6, dtype=uint8) == 32u8)) && (@tir.tvm_struct_get(arg1, 0, 7, dtype=uint16) == 1u16)), "arg1.dtype is expected to be float32")
    assert((2 == cast(int32, (int64*)arg1.shape[0])), "Argument arg1.shape[0] has an unsatisfied constraint: (2 == int32(arg1.shape[0]))")
    assert((10 == cast(int32, (int64*)arg1.shape[1])), "Argument arg1.shape[1] has an unsatisfied constraint: (10 == int32(arg1.shape[1]))")
    assert((257 == cast(int32, (int64*)arg1.shape[2])), "Argument arg1.shape[2] has an unsatisfied constraint: (257 == int32(arg1.shape[2]))")
    assert((1025 == cast(int32, (int64*)arg1.shape[3])), "Argument arg1.shape[3] has an unsatisfied constraint: (1025 == int32(arg1.shape[3]))")
     {
      if !@tir.isnullptr(arg1.strides, dtype=bool) {
        assert(((((1 == cast(int32, (int64*)arg1.strides[3])) && (1025 == cast(int32, (int64*)arg1.strides[2]))) && (263425 == cast(int32, (int64*)arg1.strides[1]))) && (2634250 == cast(int32, (int64*)arg1.strides[0]))), "arg1.strides: expected to be compact array")
        0
      }
      assert((0u64 == @tir.tvm_struct_get(arg1, 0, 8, dtype=uint64)), "Argument arg1.byte_offset has an unsatisfied constraint: ((uint64)0 == tir.tvm_struct_get(arg1, 0, 8))")
      assert((2 == @tir.tvm_struct_get(arg1, 0, 10, dtype=int32)), "Argument arg1.device_type has an unsatisfied constraint: (2 == tir.tvm_struct_get(arg1, 0, 10))")
      assert((dev_id == @tir.tvm_struct_get(arg1, 0, 9, dtype=int32)), "Argument arg1.device_id has an unsatisfied constraint: (dev_id == tir.tvm_struct_get(arg1, 0, 9))")
       {
         {
          @tir.tvm_struct_set(stack_value, 0, 12, cast(int64, 2), dtype=int32)
          stack_tcode[0] = 0
          @tir.tvm_struct_set(stack_value, 1, 12, cast(int64, dev_id), dtype=int32)
          stack_tcode[1] = 0
          @tir.tvm_call_packed_lowered("__tvm_set_device", stack_value, stack_tcode, 0, 2, dtype=int32)
        }
        attr [0] "compute_scope" = "fused_nn_softmax_compute_";
        attr [T_softmax_maxelem: Pointer(float32)] "storage_scope" = "global";
        attr [T_softmax_maxelem] "storage_alignment" = 128 {
          let T_softmax_maxelem = @tir.TVMBackendAllocWorkspace(2, dev_id, 20560u64, 2, 32, dtype=handle)
           {
            if @tir.isnullptr(T_softmax_maxelem, dtype=bool) {
              @tir.tvm_throw_last_error(, dtype=int32)
            }
            attr [T_softmax_exp: Pointer(float32)] "storage_scope" = "global";
            attr [T_softmax_exp] "storage_alignment" = 128 {
              let T_softmax_exp = @tir.TVMBackendAllocWorkspace(2, dev_id, 21074000u64, 2, 32, dtype=handle)
               {
                if @tir.isnullptr(T_softmax_exp, dtype=bool) {
                  @tir.tvm_throw_last_error(, dtype=int32)
                }
                 {
                   {
                    @tir.tvm_struct_set(stack_value, 0, 12, T_softmax_maxelem, dtype=int32)
                    stack_tcode[0] = 3
                    @tir.tvm_struct_set(stack_value, 1, 12, placeholder, dtype=int32)
                    stack_tcode[1] = 3
                    @tir.tvm_struct_set(stack_value, 2, 12, cast(int64, 6), dtype=int32)
                    stack_tcode[2] = 0
                    @tir.tvm_struct_set(stack_value, 3, 12, cast(int64, 1024), dtype=int32)
                    stack_tcode[3] = 0
                    @tir.tvm_call_packed_lowered("fused_nn_softmax_kernel0", stack_value, stack_tcode, 0, 4, dtype=int32)
                  }
                   {
                    @tir.tvm_struct_set(stack_value, 0, 12, T_softmax_exp, dtype=int32)
                    stack_tcode[0] = 3
                    @tir.tvm_struct_set(stack_value, 1, 12, placeholder, dtype=int32)
                    stack_tcode[1] = 3
                    @tir.tvm_struct_set(stack_value, 2, 12, T_softmax_maxelem, dtype=int32)
                    stack_tcode[2] = 3
                    @tir.tvm_struct_set(stack_value, 3, 12, cast(int64, 256), dtype=int32)
                    stack_tcode[3] = 0
                    @tir.tvm_struct_set(stack_value, 4, 12, cast(int64, 1024), dtype=int32)
                    stack_tcode[4] = 0
                    @tir.tvm_call_packed_lowered("fused_nn_softmax_kernel1", stack_value, stack_tcode, 0, 5, dtype=int32)
                  }
                   {
                    @tir.tvm_struct_set(stack_value, 0, 12, T_softmax_maxelem, dtype=int32)
                    stack_tcode[0] = 3
                    @tir.tvm_struct_set(stack_value, 1, 12, T_softmax_exp, dtype=int32)
                    stack_tcode[1] = 3
                    @tir.tvm_struct_set(stack_value, 2, 12, cast(int64, 6), dtype=int32)
                    stack_tcode[2] = 0
                    @tir.tvm_struct_set(stack_value, 3, 12, cast(int64, 1024), dtype=int32)
                    stack_tcode[3] = 0
                    @tir.tvm_call_packed_lowered("fused_nn_softmax_kernel2", stack_value, stack_tcode, 0, 4, dtype=int32)
                  }
                   {
                    @tir.tvm_struct_set(stack_value, 0, 12, T_softmax_norm, dtype=int32)
                    stack_tcode[0] = 3
                    @tir.tvm_struct_set(stack_value, 1, 12, T_softmax_exp, dtype=int32)
                    stack_tcode[1] = 3
                    @tir.tvm_struct_set(stack_value, 2, 12, T_softmax_maxelem, dtype=int32)
                    stack_tcode[2] = 3
                    @tir.tvm_struct_set(stack_value, 3, 12, cast(int64, 256), dtype=int32)
                    stack_tcode[3] = 0
                    @tir.tvm_struct_set(stack_value, 4, 12, cast(int64, 1024), dtype=int32)
                    stack_tcode[4] = 0
                    @tir.tvm_call_packed_lowered("fused_nn_softmax_kernel3", stack_value, stack_tcode, 0, 5, dtype=int32)
                  }
                }
              }
              if (@tir.TVMBackendFreeWorkspace(2, dev_id, T_softmax_exp, dtype=int32) != 0) {
                @tir.tvm_throw_last_error(, dtype=int32)
              }
            }
          }
          if (@tir.TVMBackendFreeWorkspace(2, dev_id, T_softmax_maxelem, dtype=int32) != 0) {
            @tir.tvm_throw_last_error(, dtype=int32)
          }
        }
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass tir.LowerCustomDatatypes
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential tir.LowerCustomDatatypes
primfn(args: handle, arg_type_ids: handle, num_args: int32, out_ret_value: handle, out_ret_tcode: handle, resource_handle: handle) -> int32
  attr = {"target": meta[Target][0], "tir.noalias": True, "global_symbol": "fused_nn_softmax", "calling_conv": 1} {
  let stack_tcode: handle = @tir.tvm_stack_alloca("arg_tcode", 6, dtype=handle)
  let stack_value: handle = @tir.tvm_stack_alloca("arg_value", 6, dtype=handle)
  assert((num_args == 2), "fused_nn_softmax: num_args should be 2")
  let arg0: handle = @tir.tvm_struct_get(args, 0, 12, dtype=handle)
  let arg0.code: int32 = (int32*)arg_type_ids[0]
  let arg1: handle = @tir.tvm_struct_get(args, 1, 12, dtype=handle)
  let arg1.code: int32 = (int32*)arg_type_ids[1]
  let placeholder: Pointer(float32) = @tir.tvm_struct_get(arg0, 0, 1, dtype=handle)
  attr [placeholder] "storage_alignment" = 128;
  let arg0.shape: handle = @tir.tvm_struct_get(arg0, 0, 2, dtype=handle)
  let arg0.strides: handle = @tir.tvm_struct_get(arg0, 0, 3, dtype=handle)
  let dev_id: int32 = @tir.tvm_struct_get(arg0, 0, 9, dtype=int32)
  let T_softmax_norm: Pointer(float32) = @tir.tvm_struct_get(arg1, 0, 1, dtype=handle)
  attr [T_softmax_norm] "storage_alignment" = 128;
  let arg1.shape: handle = @tir.tvm_struct_get(arg1, 0, 2, dtype=handle)
  let arg1.strides: handle = @tir.tvm_struct_get(arg1, 0, 3, dtype=handle)
  assert(((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), "fused_nn_softmax: Expect arg[0] to be pointer")
  assert(((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), "fused_nn_softmax: Expect arg[1] to be pointer")
  assert((4 == @tir.tvm_struct_get(arg0, 0, 4, dtype=int32)), "arg0.ndim is expected to equal 4")
  assert((4 == @tir.tvm_struct_get(arg0, 0, 4, dtype=int32)), "arg0.ndim is expected to equal 4")
  assert((((@tir.tvm_struct_get(arg0, 0, 5, dtype=uint8) == 2u8) && (@tir.tvm_struct_get(arg0, 0, 6, dtype=uint8) == 32u8)) && (@tir.tvm_struct_get(arg0, 0, 7, dtype=uint16) == 1u16)), "arg0.dtype is expected to be float32")
  assert((2 == cast(int32, (int64*)arg0.shape[0])), "Argument arg0.shape[0] has an unsatisfied constraint: (2 == int32(arg0.shape[0]))")
  assert((10 == cast(int32, (int64*)arg0.shape[1])), "Argument arg0.shape[1] has an unsatisfied constraint: (10 == int32(arg0.shape[1]))")
  assert((257 == cast(int32, (int64*)arg0.shape[2])), "Argument arg0.shape[2] has an unsatisfied constraint: (257 == int32(arg0.shape[2]))")
  assert((1025 == cast(int32, (int64*)arg0.shape[3])), "Argument arg0.shape[3] has an unsatisfied constraint: (1025 == int32(arg0.shape[3]))")
   {
    if !@tir.isnullptr(arg0.strides, dtype=bool) {
      assert(((((1 == cast(int32, (int64*)arg0.strides[3])) && (1025 == cast(int32, (int64*)arg0.strides[2]))) && (263425 == cast(int32, (int64*)arg0.strides[1]))) && (2634250 == cast(int32, (int64*)arg0.strides[0]))), "arg0.strides: expected to be compact array")
      0
    }
    assert((0u64 == @tir.tvm_struct_get(arg0, 0, 8, dtype=uint64)), "Argument arg0.byte_offset has an unsatisfied constraint: ((uint64)0 == tir.tvm_struct_get(arg0, 0, 8))")
    assert((2 == @tir.tvm_struct_get(arg0, 0, 10, dtype=int32)), "Argument arg0.device_type has an unsatisfied constraint: (2 == tir.tvm_struct_get(arg0, 0, 10))")
    assert((4 == @tir.tvm_struct_get(arg1, 0, 4, dtype=int32)), "arg1.ndim is expected to equal 4")
    assert((4 == @tir.tvm_struct_get(arg1, 0, 4, dtype=int32)), "arg1.ndim is expected to equal 4")
    assert((((@tir.tvm_struct_get(arg1, 0, 5, dtype=uint8) == 2u8) && (@tir.tvm_struct_get(arg1, 0, 6, dtype=uint8) == 32u8)) && (@tir.tvm_struct_get(arg1, 0, 7, dtype=uint16) == 1u16)), "arg1.dtype is expected to be float32")
    assert((2 == cast(int32, (int64*)arg1.shape[0])), "Argument arg1.shape[0] has an unsatisfied constraint: (2 == int32(arg1.shape[0]))")
    assert((10 == cast(int32, (int64*)arg1.shape[1])), "Argument arg1.shape[1] has an unsatisfied constraint: (10 == int32(arg1.shape[1]))")
    assert((257 == cast(int32, (int64*)arg1.shape[2])), "Argument arg1.shape[2] has an unsatisfied constraint: (257 == int32(arg1.shape[2]))")
    assert((1025 == cast(int32, (int64*)arg1.shape[3])), "Argument arg1.shape[3] has an unsatisfied constraint: (1025 == int32(arg1.shape[3]))")
     {
      if !@tir.isnullptr(arg1.strides, dtype=bool) {
        assert(((((1 == cast(int32, (int64*)arg1.strides[3])) && (1025 == cast(int32, (int64*)arg1.strides[2]))) && (263425 == cast(int32, (int64*)arg1.strides[1]))) && (2634250 == cast(int32, (int64*)arg1.strides[0]))), "arg1.strides: expected to be compact array")
        0
      }
      assert((0u64 == @tir.tvm_struct_get(arg1, 0, 8, dtype=uint64)), "Argument arg1.byte_offset has an unsatisfied constraint: ((uint64)0 == tir.tvm_struct_get(arg1, 0, 8))")
      assert((2 == @tir.tvm_struct_get(arg1, 0, 10, dtype=int32)), "Argument arg1.device_type has an unsatisfied constraint: (2 == tir.tvm_struct_get(arg1, 0, 10))")
      assert((dev_id == @tir.tvm_struct_get(arg1, 0, 9, dtype=int32)), "Argument arg1.device_id has an unsatisfied constraint: (dev_id == tir.tvm_struct_get(arg1, 0, 9))")
       {
         {
          @tir.tvm_struct_set(stack_value, 0, 12, cast(int64, 2), dtype=int32)
          stack_tcode[0] = 0
          @tir.tvm_struct_set(stack_value, 1, 12, cast(int64, dev_id), dtype=int32)
          stack_tcode[1] = 0
          @tir.tvm_call_packed_lowered("__tvm_set_device", stack_value, stack_tcode, 0, 2, dtype=int32)
        }
        attr [0] "compute_scope" = "fused_nn_softmax_compute_";
        attr [T_softmax_maxelem: Pointer(float32)] "storage_scope" = "global";
        attr [T_softmax_maxelem] "storage_alignment" = 128 {
          let T_softmax_maxelem = @tir.TVMBackendAllocWorkspace(2, dev_id, 20560u64, 2, 32, dtype=handle)
           {
            if @tir.isnullptr(T_softmax_maxelem, dtype=bool) {
              @tir.tvm_throw_last_error(, dtype=int32)
            }
            attr [T_softmax_exp: Pointer(float32)] "storage_scope" = "global";
            attr [T_softmax_exp] "storage_alignment" = 128 {
              let T_softmax_exp = @tir.TVMBackendAllocWorkspace(2, dev_id, 21074000u64, 2, 32, dtype=handle)
               {
                if @tir.isnullptr(T_softmax_exp, dtype=bool) {
                  @tir.tvm_throw_last_error(, dtype=int32)
                }
                 {
                   {
                    @tir.tvm_struct_set(stack_value, 0, 12, T_softmax_maxelem, dtype=int32)
                    stack_tcode[0] = 3
                    @tir.tvm_struct_set(stack_value, 1, 12, placeholder, dtype=int32)
                    stack_tcode[1] = 3
                    @tir.tvm_struct_set(stack_value, 2, 12, cast(int64, 6), dtype=int32)
                    stack_tcode[2] = 0
                    @tir.tvm_struct_set(stack_value, 3, 12, cast(int64, 1024), dtype=int32)
                    stack_tcode[3] = 0
                    @tir.tvm_call_packed_lowered("fused_nn_softmax_kernel0", stack_value, stack_tcode, 0, 4, dtype=int32)
                  }
                   {
                    @tir.tvm_struct_set(stack_value, 0, 12, T_softmax_exp, dtype=int32)
                    stack_tcode[0] = 3
                    @tir.tvm_struct_set(stack_value, 1, 12, placeholder, dtype=int32)
                    stack_tcode[1] = 3
                    @tir.tvm_struct_set(stack_value, 2, 12, T_softmax_maxelem, dtype=int32)
                    stack_tcode[2] = 3
                    @tir.tvm_struct_set(stack_value, 3, 12, cast(int64, 256), dtype=int32)
                    stack_tcode[3] = 0
                    @tir.tvm_struct_set(stack_value, 4, 12, cast(int64, 1024), dtype=int32)
                    stack_tcode[4] = 0
                    @tir.tvm_call_packed_lowered("fused_nn_softmax_kernel1", stack_value, stack_tcode, 0, 5, dtype=int32)
                  }
                   {
                    @tir.tvm_struct_set(stack_value, 0, 12, T_softmax_maxelem, dtype=int32)
                    stack_tcode[0] = 3
                    @tir.tvm_struct_set(stack_value, 1, 12, T_softmax_exp, dtype=int32)
                    stack_tcode[1] = 3
                    @tir.tvm_struct_set(stack_value, 2, 12, cast(int64, 6), dtype=int32)
                    stack_tcode[2] = 0
                    @tir.tvm_struct_set(stack_value, 3, 12, cast(int64, 1024), dtype=int32)
                    stack_tcode[3] = 0
                    @tir.tvm_call_packed_lowered("fused_nn_softmax_kernel2", stack_value, stack_tcode, 0, 4, dtype=int32)
                  }
                   {
                    @tir.tvm_struct_set(stack_value, 0, 12, T_softmax_norm, dtype=int32)
                    stack_tcode[0] = 3
                    @tir.tvm_struct_set(stack_value, 1, 12, T_softmax_exp, dtype=int32)
                    stack_tcode[1] = 3
                    @tir.tvm_struct_set(stack_value, 2, 12, T_softmax_maxelem, dtype=int32)
                    stack_tcode[2] = 3
                    @tir.tvm_struct_set(stack_value, 3, 12, cast(int64, 256), dtype=int32)
                    stack_tcode[3] = 0
                    @tir.tvm_struct_set(stack_value, 4, 12, cast(int64, 1024), dtype=int32)
                    stack_tcode[4] = 0
                    @tir.tvm_call_packed_lowered("fused_nn_softmax_kernel3", stack_value, stack_tcode, 0, 5, dtype=int32)
                  }
                }
              }
              if (@tir.TVMBackendFreeWorkspace(2, dev_id, T_softmax_exp, dtype=int32) != 0) {
                @tir.tvm_throw_last_error(, dtype=int32)
              }
            }
          }
          if (@tir.TVMBackendFreeWorkspace(2, dev_id, T_softmax_maxelem, dtype=int32) != 0) {
            @tir.tvm_throw_last_error(, dtype=int32)
          }
        }
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass tir.LowerIntrin
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (num_args: int32 == 2)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint ((((arg0.code: int32 == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint ((((arg1.code: int32 == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (4 == @tir.tvm_struct_get(arg0: handle, 0, 4, dtype=int32))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (4 == @tir.tvm_struct_get(arg0: handle, 0, 4, dtype=int32))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (((@tir.tvm_struct_get(arg0: handle, 0, 5, dtype=uint8) == 2u8) && (@tir.tvm_struct_get(arg0, 0, 6, dtype=uint8) == 32u8)) && (@tir.tvm_struct_get(arg0, 0, 7, dtype=uint16) == 1u16))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (2 == cast(int32, (int64*)arg0.shape: handle[0]))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (10 == cast(int32, (int64*)arg0.shape: handle[1]))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (257 == cast(int32, (int64*)arg0.shape: handle[2]))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (1025 == cast(int32, (int64*)arg0.shape: handle[3]))
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = !@tir.isnullptr(arg0.strides: handle, dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = !@tir.isnullptr(arg0.strides: handle, dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition !@tir.isnullptr(arg0.strides: handle, dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify condition!@tir.isnullptr(arg0.strides: handle, dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint !@tir.isnullptr(arg0.strides: handle, dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint ((((1 == cast(int32, (int64*)arg0.strides: handle[3])) && (1025 == cast(int32, (int64*)arg0.strides[2]))) && (263425 == cast(int32, (int64*)arg0.strides[1]))) && (2634250 == cast(int32, (int64*)arg0.strides[0])))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (0u64 == @tir.tvm_struct_get(arg0: handle, 0, 8, dtype=uint64))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (2 == @tir.tvm_struct_get(arg0: handle, 0, 10, dtype=int32))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (4 == @tir.tvm_struct_get(arg1: handle, 0, 4, dtype=int32))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (4 == @tir.tvm_struct_get(arg1: handle, 0, 4, dtype=int32))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (((@tir.tvm_struct_get(arg1: handle, 0, 5, dtype=uint8) == 2u8) && (@tir.tvm_struct_get(arg1, 0, 6, dtype=uint8) == 32u8)) && (@tir.tvm_struct_get(arg1, 0, 7, dtype=uint16) == 1u16))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (2 == cast(int32, (int64*)arg1.shape: handle[0]))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (10 == cast(int32, (int64*)arg1.shape: handle[1]))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (257 == cast(int32, (int64*)arg1.shape: handle[2]))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (1025 == cast(int32, (int64*)arg1.shape: handle[3]))
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = !@tir.isnullptr(arg1.strides: handle, dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = !@tir.isnullptr(arg1.strides: handle, dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition !@tir.isnullptr(arg1.strides: handle, dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify condition!@tir.isnullptr(arg1.strides: handle, dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint !@tir.isnullptr(arg1.strides: handle, dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint ((((1 == cast(int32, (int64*)arg1.strides: handle[3])) && (1025 == cast(int32, (int64*)arg1.strides[2]))) && (263425 == cast(int32, (int64*)arg1.strides[1]))) && (2634250 == cast(int32, (int64*)arg1.strides[0])))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (0u64 == @tir.tvm_struct_get(arg1: handle, 0, 8, dtype=uint64))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (2 == @tir.tvm_struct_get(arg1: handle, 0, 10, dtype=int32))
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (dev_id: int32 == @tir.tvm_struct_get(arg1: handle, 0, 9, dtype=int32))
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = @tir.isnullptr(T_softmax_maxelem: Pointer(float32), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = @tir.isnullptr(T_softmax_maxelem: Pointer(float32), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition @tir.isnullptr(T_softmax_maxelem: Pointer(float32), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify condition@tir.isnullptr(T_softmax_maxelem: Pointer(float32), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint @tir.isnullptr(T_softmax_maxelem: Pointer(float32), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = @tir.isnullptr(T_softmax_exp: Pointer(float32), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = @tir.isnullptr(T_softmax_exp: Pointer(float32), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition @tir.isnullptr(T_softmax_exp: Pointer(float32), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify condition@tir.isnullptr(T_softmax_exp: Pointer(float32), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint @tir.isnullptr(T_softmax_exp: Pointer(float32), dtype=bool)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = (@tir.TVMBackendFreeWorkspace(2, dev_id: int32, T_softmax_exp: Pointer(float32), dtype=int32) != 0)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = (@tir.TVMBackendFreeWorkspace(2, dev_id: int32, T_softmax_exp: Pointer(float32), dtype=int32) != 0)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition (@tir.TVMBackendFreeWorkspace(2, dev_id: int32, T_softmax_exp: Pointer(float32), dtype=int32) != 0)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify condition(@tir.TVMBackendFreeWorkspace(2, dev_id: int32, T_softmax_exp: Pointer(float32), dtype=int32) != 0)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (@tir.TVMBackendFreeWorkspace(2, dev_id: int32, T_softmax_exp: Pointer(float32), dtype=int32) != 0)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = (@tir.TVMBackendFreeWorkspace(2, dev_id: int32, T_softmax_maxelem: Pointer(float32), dtype=int32) != 0)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = (@tir.TVMBackendFreeWorkspace(2, dev_id: int32, T_softmax_maxelem: Pointer(float32), dtype=int32) != 0)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition (@tir.TVMBackendFreeWorkspace(2, dev_id: int32, T_softmax_maxelem: Pointer(float32), dtype=int32) != 0)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify condition(@tir.TVMBackendFreeWorkspace(2, dev_id: int32, T_softmax_maxelem: Pointer(float32), dtype=int32) != 0)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (@tir.TVMBackendFreeWorkspace(2, dev_id: int32, T_softmax_maxelem: Pointer(float32), dtype=int32) != 0)
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential tir.LowerIntrin
primfn(args: handle, arg_type_ids: handle, num_args: int32, out_ret_value: handle, out_ret_tcode: handle, resource_handle: handle) -> int32
  attr = {"target": meta[Target][0], "tir.noalias": True, "global_symbol": "fused_nn_softmax", "calling_conv": 1} {
  let stack_tcode: handle = @tir.tvm_stack_alloca("arg_tcode", 6, dtype=handle)
  let stack_value: handle = @tir.tvm_stack_alloca("arg_value", 6, dtype=handle)
  assert((num_args == 2), "fused_nn_softmax: num_args should be 2")
  let arg0: handle = @tir.tvm_struct_get(args, 0, 12, dtype=handle)
  let arg0.code: int32 = (int32*)arg_type_ids[0]
  let arg1: handle = @tir.tvm_struct_get(args, 1, 12, dtype=handle)
  let arg1.code: int32 = (int32*)arg_type_ids[1]
  let placeholder: Pointer(float32) = @tir.tvm_struct_get(arg0, 0, 1, dtype=handle)
  attr [placeholder] "storage_alignment" = 128;
  let arg0.shape: handle = @tir.tvm_struct_get(arg0, 0, 2, dtype=handle)
  let arg0.strides: handle = @tir.tvm_struct_get(arg0, 0, 3, dtype=handle)
  let dev_id: int32 = @tir.tvm_struct_get(arg0, 0, 9, dtype=int32)
  let T_softmax_norm: Pointer(float32) = @tir.tvm_struct_get(arg1, 0, 1, dtype=handle)
  attr [T_softmax_norm] "storage_alignment" = 128;
  let arg1.shape: handle = @tir.tvm_struct_get(arg1, 0, 2, dtype=handle)
  let arg1.strides: handle = @tir.tvm_struct_get(arg1, 0, 3, dtype=handle)
  assert(((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), "fused_nn_softmax: Expect arg[0] to be pointer")
  assert(((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), "fused_nn_softmax: Expect arg[1] to be pointer")
  assert((4 == @tir.tvm_struct_get(arg0, 0, 4, dtype=int32)), "arg0.ndim is expected to equal 4")
  assert((4 == @tir.tvm_struct_get(arg0, 0, 4, dtype=int32)), "arg0.ndim is expected to equal 4")
  assert((((@tir.tvm_struct_get(arg0, 0, 5, dtype=uint8) == 2u8) && (@tir.tvm_struct_get(arg0, 0, 6, dtype=uint8) == 32u8)) && (@tir.tvm_struct_get(arg0, 0, 7, dtype=uint16) == 1u16)), "arg0.dtype is expected to be float32")
  assert((2 == cast(int32, (int64*)arg0.shape[0])), "Argument arg0.shape[0] has an unsatisfied constraint: (2 == int32(arg0.shape[0]))")
  assert((10 == cast(int32, (int64*)arg0.shape[1])), "Argument arg0.shape[1] has an unsatisfied constraint: (10 == int32(arg0.shape[1]))")
  assert((257 == cast(int32, (int64*)arg0.shape[2])), "Argument arg0.shape[2] has an unsatisfied constraint: (257 == int32(arg0.shape[2]))")
  assert((1025 == cast(int32, (int64*)arg0.shape[3])), "Argument arg0.shape[3] has an unsatisfied constraint: (1025 == int32(arg0.shape[3]))")
   {
    if !@tir.isnullptr(arg0.strides, dtype=bool) {
      assert(((((1 == cast(int32, (int64*)arg0.strides[3])) && (1025 == cast(int32, (int64*)arg0.strides[2]))) && (263425 == cast(int32, (int64*)arg0.strides[1]))) && (2634250 == cast(int32, (int64*)arg0.strides[0]))), "arg0.strides: expected to be compact array")
      0
    }
    assert((0u64 == @tir.tvm_struct_get(arg0, 0, 8, dtype=uint64)), "Argument arg0.byte_offset has an unsatisfied constraint: ((uint64)0 == tir.tvm_struct_get(arg0, 0, 8))")
    assert((2 == @tir.tvm_struct_get(arg0, 0, 10, dtype=int32)), "Argument arg0.device_type has an unsatisfied constraint: (2 == tir.tvm_struct_get(arg0, 0, 10))")
    assert((4 == @tir.tvm_struct_get(arg1, 0, 4, dtype=int32)), "arg1.ndim is expected to equal 4")
    assert((4 == @tir.tvm_struct_get(arg1, 0, 4, dtype=int32)), "arg1.ndim is expected to equal 4")
    assert((((@tir.tvm_struct_get(arg1, 0, 5, dtype=uint8) == 2u8) && (@tir.tvm_struct_get(arg1, 0, 6, dtype=uint8) == 32u8)) && (@tir.tvm_struct_get(arg1, 0, 7, dtype=uint16) == 1u16)), "arg1.dtype is expected to be float32")
    assert((2 == cast(int32, (int64*)arg1.shape[0])), "Argument arg1.shape[0] has an unsatisfied constraint: (2 == int32(arg1.shape[0]))")
    assert((10 == cast(int32, (int64*)arg1.shape[1])), "Argument arg1.shape[1] has an unsatisfied constraint: (10 == int32(arg1.shape[1]))")
    assert((257 == cast(int32, (int64*)arg1.shape[2])), "Argument arg1.shape[2] has an unsatisfied constraint: (257 == int32(arg1.shape[2]))")
    assert((1025 == cast(int32, (int64*)arg1.shape[3])), "Argument arg1.shape[3] has an unsatisfied constraint: (1025 == int32(arg1.shape[3]))")
     {
      if !@tir.isnullptr(arg1.strides, dtype=bool) {
        assert(((((1 == cast(int32, (int64*)arg1.strides[3])) && (1025 == cast(int32, (int64*)arg1.strides[2]))) && (263425 == cast(int32, (int64*)arg1.strides[1]))) && (2634250 == cast(int32, (int64*)arg1.strides[0]))), "arg1.strides: expected to be compact array")
        0
      }
      assert((0u64 == @tir.tvm_struct_get(arg1, 0, 8, dtype=uint64)), "Argument arg1.byte_offset has an unsatisfied constraint: ((uint64)0 == tir.tvm_struct_get(arg1, 0, 8))")
      assert((2 == @tir.tvm_struct_get(arg1, 0, 10, dtype=int32)), "Argument arg1.device_type has an unsatisfied constraint: (2 == tir.tvm_struct_get(arg1, 0, 10))")
      assert((dev_id == @tir.tvm_struct_get(arg1, 0, 9, dtype=int32)), "Argument arg1.device_id has an unsatisfied constraint: (dev_id == tir.tvm_struct_get(arg1, 0, 9))")
       {
         {
          @tir.tvm_struct_set(stack_value, 0, 12, cast(int64, 2), dtype=int32)
          stack_tcode[0] = 0
          @tir.tvm_struct_set(stack_value, 1, 12, cast(int64, dev_id), dtype=int32)
          stack_tcode[1] = 0
          @tir.tvm_call_packed_lowered("__tvm_set_device", stack_value, stack_tcode, 0, 2, dtype=int32)
        }
        attr [0] "compute_scope" = "fused_nn_softmax_compute_";
        attr [T_softmax_maxelem: Pointer(float32)] "storage_scope" = "global";
        attr [T_softmax_maxelem] "storage_alignment" = 128 {
          let T_softmax_maxelem = @tir.TVMBackendAllocWorkspace(2, dev_id, 20560u64, 2, 32, dtype=handle)
           {
            if @tir.isnullptr(T_softmax_maxelem, dtype=bool) {
              @tir.tvm_throw_last_error(, dtype=int32)
            }
            attr [T_softmax_exp: Pointer(float32)] "storage_scope" = "global";
            attr [T_softmax_exp] "storage_alignment" = 128 {
              let T_softmax_exp = @tir.TVMBackendAllocWorkspace(2, dev_id, 21074000u64, 2, 32, dtype=handle)
               {
                if @tir.isnullptr(T_softmax_exp, dtype=bool) {
                  @tir.tvm_throw_last_error(, dtype=int32)
                }
                 {
                   {
                    @tir.tvm_struct_set(stack_value, 0, 12, T_softmax_maxelem, dtype=int32)
                    stack_tcode[0] = 3
                    @tir.tvm_struct_set(stack_value, 1, 12, placeholder, dtype=int32)
                    stack_tcode[1] = 3
                    @tir.tvm_struct_set(stack_value, 2, 12, cast(int64, 6), dtype=int32)
                    stack_tcode[2] = 0
                    @tir.tvm_struct_set(stack_value, 3, 12, cast(int64, 1024), dtype=int32)
                    stack_tcode[3] = 0
                    @tir.tvm_call_packed_lowered("fused_nn_softmax_kernel0", stack_value, stack_tcode, 0, 4, dtype=int32)
                  }
                   {
                    @tir.tvm_struct_set(stack_value, 0, 12, T_softmax_exp, dtype=int32)
                    stack_tcode[0] = 3
                    @tir.tvm_struct_set(stack_value, 1, 12, placeholder, dtype=int32)
                    stack_tcode[1] = 3
                    @tir.tvm_struct_set(stack_value, 2, 12, T_softmax_maxelem, dtype=int32)
                    stack_tcode[2] = 3
                    @tir.tvm_struct_set(stack_value, 3, 12, cast(int64, 256), dtype=int32)
                    stack_tcode[3] = 0
                    @tir.tvm_struct_set(stack_value, 4, 12, cast(int64, 1024), dtype=int32)
                    stack_tcode[4] = 0
                    @tir.tvm_call_packed_lowered("fused_nn_softmax_kernel1", stack_value, stack_tcode, 0, 5, dtype=int32)
                  }
                   {
                    @tir.tvm_struct_set(stack_value, 0, 12, T_softmax_maxelem, dtype=int32)
                    stack_tcode[0] = 3
                    @tir.tvm_struct_set(stack_value, 1, 12, T_softmax_exp, dtype=int32)
                    stack_tcode[1] = 3
                    @tir.tvm_struct_set(stack_value, 2, 12, cast(int64, 6), dtype=int32)
                    stack_tcode[2] = 0
                    @tir.tvm_struct_set(stack_value, 3, 12, cast(int64, 1024), dtype=int32)
                    stack_tcode[3] = 0
                    @tir.tvm_call_packed_lowered("fused_nn_softmax_kernel2", stack_value, stack_tcode, 0, 4, dtype=int32)
                  }
                   {
                    @tir.tvm_struct_set(stack_value, 0, 12, T_softmax_norm, dtype=int32)
                    stack_tcode[0] = 3
                    @tir.tvm_struct_set(stack_value, 1, 12, T_softmax_exp, dtype=int32)
                    stack_tcode[1] = 3
                    @tir.tvm_struct_set(stack_value, 2, 12, T_softmax_maxelem, dtype=int32)
                    stack_tcode[2] = 3
                    @tir.tvm_struct_set(stack_value, 3, 12, cast(int64, 256), dtype=int32)
                    stack_tcode[3] = 0
                    @tir.tvm_struct_set(stack_value, 4, 12, cast(int64, 1024), dtype=int32)
                    stack_tcode[4] = 0
                    @tir.tvm_call_packed_lowered("fused_nn_softmax_kernel3", stack_value, stack_tcode, 0, 5, dtype=int32)
                  }
                }
              }
              if (@tir.TVMBackendFreeWorkspace(2, dev_id, T_softmax_exp, dtype=int32) != 0) {
                @tir.tvm_throw_last_error(, dtype=int32)
              }
            }
          }
          if (@tir.TVMBackendFreeWorkspace(2, dev_id, T_softmax_maxelem, dtype=int32) != 0) {
            @tir.tvm_throw_last_error(, dtype=int32)
          }
        }
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass tir.LowerDeviceStorageAccessInfo
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential tir.LowerDeviceStorageAccessInfo
primfn(args: handle, arg_type_ids: handle, num_args: int32, out_ret_value: handle, out_ret_tcode: handle, resource_handle: handle) -> int32
  attr = {"target": meta[Target][0], "tir.noalias": True, "global_symbol": "fused_nn_softmax", "calling_conv": 1} {
  let stack_tcode: handle = @tir.tvm_stack_alloca("arg_tcode", 6, dtype=handle)
  let stack_value: handle = @tir.tvm_stack_alloca("arg_value", 6, dtype=handle)
  assert((num_args == 2), "fused_nn_softmax: num_args should be 2")
  let arg0: handle = @tir.tvm_struct_get(args, 0, 12, dtype=handle)
  let arg0.code: int32 = (int32*)arg_type_ids[0]
  let arg1: handle = @tir.tvm_struct_get(args, 1, 12, dtype=handle)
  let arg1.code: int32 = (int32*)arg_type_ids[1]
  let placeholder: Pointer(float32) = @tir.tvm_struct_get(arg0, 0, 1, dtype=handle)
  attr [placeholder] "storage_alignment" = 128;
  let arg0.shape: handle = @tir.tvm_struct_get(arg0, 0, 2, dtype=handle)
  let arg0.strides: handle = @tir.tvm_struct_get(arg0, 0, 3, dtype=handle)
  let dev_id: int32 = @tir.tvm_struct_get(arg0, 0, 9, dtype=int32)
  let T_softmax_norm: Pointer(float32) = @tir.tvm_struct_get(arg1, 0, 1, dtype=handle)
  attr [T_softmax_norm] "storage_alignment" = 128;
  let arg1.shape: handle = @tir.tvm_struct_get(arg1, 0, 2, dtype=handle)
  let arg1.strides: handle = @tir.tvm_struct_get(arg1, 0, 3, dtype=handle)
  assert(((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), "fused_nn_softmax: Expect arg[0] to be pointer")
  assert(((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), "fused_nn_softmax: Expect arg[1] to be pointer")
  assert((4 == @tir.tvm_struct_get(arg0, 0, 4, dtype=int32)), "arg0.ndim is expected to equal 4")
  assert((4 == @tir.tvm_struct_get(arg0, 0, 4, dtype=int32)), "arg0.ndim is expected to equal 4")
  assert((((@tir.tvm_struct_get(arg0, 0, 5, dtype=uint8) == 2u8) && (@tir.tvm_struct_get(arg0, 0, 6, dtype=uint8) == 32u8)) && (@tir.tvm_struct_get(arg0, 0, 7, dtype=uint16) == 1u16)), "arg0.dtype is expected to be float32")
  assert((2 == cast(int32, (int64*)arg0.shape[0])), "Argument arg0.shape[0] has an unsatisfied constraint: (2 == int32(arg0.shape[0]))")
  assert((10 == cast(int32, (int64*)arg0.shape[1])), "Argument arg0.shape[1] has an unsatisfied constraint: (10 == int32(arg0.shape[1]))")
  assert((257 == cast(int32, (int64*)arg0.shape[2])), "Argument arg0.shape[2] has an unsatisfied constraint: (257 == int32(arg0.shape[2]))")
  assert((1025 == cast(int32, (int64*)arg0.shape[3])), "Argument arg0.shape[3] has an unsatisfied constraint: (1025 == int32(arg0.shape[3]))")
   {
    if !@tir.isnullptr(arg0.strides, dtype=bool) {
      assert(((((1 == cast(int32, (int64*)arg0.strides[3])) && (1025 == cast(int32, (int64*)arg0.strides[2]))) && (263425 == cast(int32, (int64*)arg0.strides[1]))) && (2634250 == cast(int32, (int64*)arg0.strides[0]))), "arg0.strides: expected to be compact array")
      0
    }
    assert((0u64 == @tir.tvm_struct_get(arg0, 0, 8, dtype=uint64)), "Argument arg0.byte_offset has an unsatisfied constraint: ((uint64)0 == tir.tvm_struct_get(arg0, 0, 8))")
    assert((2 == @tir.tvm_struct_get(arg0, 0, 10, dtype=int32)), "Argument arg0.device_type has an unsatisfied constraint: (2 == tir.tvm_struct_get(arg0, 0, 10))")
    assert((4 == @tir.tvm_struct_get(arg1, 0, 4, dtype=int32)), "arg1.ndim is expected to equal 4")
    assert((4 == @tir.tvm_struct_get(arg1, 0, 4, dtype=int32)), "arg1.ndim is expected to equal 4")
    assert((((@tir.tvm_struct_get(arg1, 0, 5, dtype=uint8) == 2u8) && (@tir.tvm_struct_get(arg1, 0, 6, dtype=uint8) == 32u8)) && (@tir.tvm_struct_get(arg1, 0, 7, dtype=uint16) == 1u16)), "arg1.dtype is expected to be float32")
    assert((2 == cast(int32, (int64*)arg1.shape[0])), "Argument arg1.shape[0] has an unsatisfied constraint: (2 == int32(arg1.shape[0]))")
    assert((10 == cast(int32, (int64*)arg1.shape[1])), "Argument arg1.shape[1] has an unsatisfied constraint: (10 == int32(arg1.shape[1]))")
    assert((257 == cast(int32, (int64*)arg1.shape[2])), "Argument arg1.shape[2] has an unsatisfied constraint: (257 == int32(arg1.shape[2]))")
    assert((1025 == cast(int32, (int64*)arg1.shape[3])), "Argument arg1.shape[3] has an unsatisfied constraint: (1025 == int32(arg1.shape[3]))")
     {
      if !@tir.isnullptr(arg1.strides, dtype=bool) {
        assert(((((1 == cast(int32, (int64*)arg1.strides[3])) && (1025 == cast(int32, (int64*)arg1.strides[2]))) && (263425 == cast(int32, (int64*)arg1.strides[1]))) && (2634250 == cast(int32, (int64*)arg1.strides[0]))), "arg1.strides: expected to be compact array")
        0
      }
      assert((0u64 == @tir.tvm_struct_get(arg1, 0, 8, dtype=uint64)), "Argument arg1.byte_offset has an unsatisfied constraint: ((uint64)0 == tir.tvm_struct_get(arg1, 0, 8))")
      assert((2 == @tir.tvm_struct_get(arg1, 0, 10, dtype=int32)), "Argument arg1.device_type has an unsatisfied constraint: (2 == tir.tvm_struct_get(arg1, 0, 10))")
      assert((dev_id == @tir.tvm_struct_get(arg1, 0, 9, dtype=int32)), "Argument arg1.device_id has an unsatisfied constraint: (dev_id == tir.tvm_struct_get(arg1, 0, 9))")
       {
         {
          @tir.tvm_struct_set(stack_value, 0, 12, cast(int64, 2), dtype=int32)
          stack_tcode[0] = 0
          @tir.tvm_struct_set(stack_value, 1, 12, cast(int64, dev_id), dtype=int32)
          stack_tcode[1] = 0
          @tir.tvm_call_packed_lowered("__tvm_set_device", stack_value, stack_tcode, 0, 2, dtype=int32)
        }
        attr [0] "compute_scope" = "fused_nn_softmax_compute_";
        attr [T_softmax_maxelem: Pointer(float32)] "storage_scope" = "global";
        attr [T_softmax_maxelem] "storage_alignment" = 128 {
          let T_softmax_maxelem = @tir.TVMBackendAllocWorkspace(2, dev_id, 20560u64, 2, 32, dtype=handle)
           {
            if @tir.isnullptr(T_softmax_maxelem, dtype=bool) {
              @tir.tvm_throw_last_error(, dtype=int32)
            }
            attr [T_softmax_exp: Pointer(float32)] "storage_scope" = "global";
            attr [T_softmax_exp] "storage_alignment" = 128 {
              let T_softmax_exp = @tir.TVMBackendAllocWorkspace(2, dev_id, 21074000u64, 2, 32, dtype=handle)
               {
                if @tir.isnullptr(T_softmax_exp, dtype=bool) {
                  @tir.tvm_throw_last_error(, dtype=int32)
                }
                 {
                   {
                    @tir.tvm_struct_set(stack_value, 0, 12, T_softmax_maxelem, dtype=int32)
                    stack_tcode[0] = 3
                    @tir.tvm_struct_set(stack_value, 1, 12, placeholder, dtype=int32)
                    stack_tcode[1] = 3
                    @tir.tvm_struct_set(stack_value, 2, 12, cast(int64, 6), dtype=int32)
                    stack_tcode[2] = 0
                    @tir.tvm_struct_set(stack_value, 3, 12, cast(int64, 1024), dtype=int32)
                    stack_tcode[3] = 0
                    @tir.tvm_call_packed_lowered("fused_nn_softmax_kernel0", stack_value, stack_tcode, 0, 4, dtype=int32)
                  }
                   {
                    @tir.tvm_struct_set(stack_value, 0, 12, T_softmax_exp, dtype=int32)
                    stack_tcode[0] = 3
                    @tir.tvm_struct_set(stack_value, 1, 12, placeholder, dtype=int32)
                    stack_tcode[1] = 3
                    @tir.tvm_struct_set(stack_value, 2, 12, T_softmax_maxelem, dtype=int32)
                    stack_tcode[2] = 3
                    @tir.tvm_struct_set(stack_value, 3, 12, cast(int64, 256), dtype=int32)
                    stack_tcode[3] = 0
                    @tir.tvm_struct_set(stack_value, 4, 12, cast(int64, 1024), dtype=int32)
                    stack_tcode[4] = 0
                    @tir.tvm_call_packed_lowered("fused_nn_softmax_kernel1", stack_value, stack_tcode, 0, 5, dtype=int32)
                  }
                   {
                    @tir.tvm_struct_set(stack_value, 0, 12, T_softmax_maxelem, dtype=int32)
                    stack_tcode[0] = 3
                    @tir.tvm_struct_set(stack_value, 1, 12, T_softmax_exp, dtype=int32)
                    stack_tcode[1] = 3
                    @tir.tvm_struct_set(stack_value, 2, 12, cast(int64, 6), dtype=int32)
                    stack_tcode[2] = 0
                    @tir.tvm_struct_set(stack_value, 3, 12, cast(int64, 1024), dtype=int32)
                    stack_tcode[3] = 0
                    @tir.tvm_call_packed_lowered("fused_nn_softmax_kernel2", stack_value, stack_tcode, 0, 4, dtype=int32)
                  }
                   {
                    @tir.tvm_struct_set(stack_value, 0, 12, T_softmax_norm, dtype=int32)
                    stack_tcode[0] = 3
                    @tir.tvm_struct_set(stack_value, 1, 12, T_softmax_exp, dtype=int32)
                    stack_tcode[1] = 3
                    @tir.tvm_struct_set(stack_value, 2, 12, T_softmax_maxelem, dtype=int32)
                    stack_tcode[2] = 3
                    @tir.tvm_struct_set(stack_value, 3, 12, cast(int64, 256), dtype=int32)
                    stack_tcode[3] = 0
                    @tir.tvm_struct_set(stack_value, 4, 12, cast(int64, 1024), dtype=int32)
                    stack_tcode[4] = 0
                    @tir.tvm_call_packed_lowered("fused_nn_softmax_kernel3", stack_value, stack_tcode, 0, 5, dtype=int32)
                  }
                }
              }
              if (@tir.TVMBackendFreeWorkspace(2, dev_id, T_softmax_exp, dtype=int32) != 0) {
                @tir.tvm_throw_last_error(, dtype=int32)
              }
            }
          }
          if (@tir.TVMBackendFreeWorkspace(2, dev_id, T_softmax_maxelem, dtype=int32) != 0) {
            @tir.tvm_throw_last_error(, dtype=int32)
          }
        }
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass tir.CombineContextCall
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential tir.CombineContextCall
primfn(args: handle, arg_type_ids: handle, num_args: int32, out_ret_value: handle, out_ret_tcode: handle, resource_handle: handle) -> int32
  attr = {"target": meta[Target][0], "tir.noalias": True, "global_symbol": "fused_nn_softmax", "calling_conv": 1} {
  let stack_tcode: handle = @tir.tvm_stack_alloca("arg_tcode", 6, dtype=handle)
  let stack_value: handle = @tir.tvm_stack_alloca("arg_value", 6, dtype=handle)
  assert((num_args == 2), "fused_nn_softmax: num_args should be 2")
  let arg0: handle = @tir.tvm_struct_get(args, 0, 12, dtype=handle)
  let arg0.code: int32 = (int32*)arg_type_ids[0]
  let arg1: handle = @tir.tvm_struct_get(args, 1, 12, dtype=handle)
  let arg1.code: int32 = (int32*)arg_type_ids[1]
  let placeholder: Pointer(float32) = @tir.tvm_struct_get(arg0, 0, 1, dtype=handle)
  attr [placeholder] "storage_alignment" = 128;
  let arg0.shape: handle = @tir.tvm_struct_get(arg0, 0, 2, dtype=handle)
  let arg0.strides: handle = @tir.tvm_struct_get(arg0, 0, 3, dtype=handle)
  let dev_id: int32 = @tir.tvm_struct_get(arg0, 0, 9, dtype=int32)
  let T_softmax_norm: Pointer(float32) = @tir.tvm_struct_get(arg1, 0, 1, dtype=handle)
  attr [T_softmax_norm] "storage_alignment" = 128;
  let arg1.shape: handle = @tir.tvm_struct_get(arg1, 0, 2, dtype=handle)
  let arg1.strides: handle = @tir.tvm_struct_get(arg1, 0, 3, dtype=handle)
  assert(((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), "fused_nn_softmax: Expect arg[0] to be pointer")
  assert(((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), "fused_nn_softmax: Expect arg[1] to be pointer")
  assert((4 == @tir.tvm_struct_get(arg0, 0, 4, dtype=int32)), "arg0.ndim is expected to equal 4")
  assert((4 == @tir.tvm_struct_get(arg0, 0, 4, dtype=int32)), "arg0.ndim is expected to equal 4")
  assert((((@tir.tvm_struct_get(arg0, 0, 5, dtype=uint8) == 2u8) && (@tir.tvm_struct_get(arg0, 0, 6, dtype=uint8) == 32u8)) && (@tir.tvm_struct_get(arg0, 0, 7, dtype=uint16) == 1u16)), "arg0.dtype is expected to be float32")
  assert((2 == cast(int32, (int64*)arg0.shape[0])), "Argument arg0.shape[0] has an unsatisfied constraint: (2 == int32(arg0.shape[0]))")
  assert((10 == cast(int32, (int64*)arg0.shape[1])), "Argument arg0.shape[1] has an unsatisfied constraint: (10 == int32(arg0.shape[1]))")
  assert((257 == cast(int32, (int64*)arg0.shape[2])), "Argument arg0.shape[2] has an unsatisfied constraint: (257 == int32(arg0.shape[2]))")
  assert((1025 == cast(int32, (int64*)arg0.shape[3])), "Argument arg0.shape[3] has an unsatisfied constraint: (1025 == int32(arg0.shape[3]))")
   {
    if !@tir.isnullptr(arg0.strides, dtype=bool) {
      assert(((((1 == cast(int32, (int64*)arg0.strides[3])) && (1025 == cast(int32, (int64*)arg0.strides[2]))) && (263425 == cast(int32, (int64*)arg0.strides[1]))) && (2634250 == cast(int32, (int64*)arg0.strides[0]))), "arg0.strides: expected to be compact array")
      0
    }
    assert((0u64 == @tir.tvm_struct_get(arg0, 0, 8, dtype=uint64)), "Argument arg0.byte_offset has an unsatisfied constraint: ((uint64)0 == tir.tvm_struct_get(arg0, 0, 8))")
    assert((2 == @tir.tvm_struct_get(arg0, 0, 10, dtype=int32)), "Argument arg0.device_type has an unsatisfied constraint: (2 == tir.tvm_struct_get(arg0, 0, 10))")
    assert((4 == @tir.tvm_struct_get(arg1, 0, 4, dtype=int32)), "arg1.ndim is expected to equal 4")
    assert((4 == @tir.tvm_struct_get(arg1, 0, 4, dtype=int32)), "arg1.ndim is expected to equal 4")
    assert((((@tir.tvm_struct_get(arg1, 0, 5, dtype=uint8) == 2u8) && (@tir.tvm_struct_get(arg1, 0, 6, dtype=uint8) == 32u8)) && (@tir.tvm_struct_get(arg1, 0, 7, dtype=uint16) == 1u16)), "arg1.dtype is expected to be float32")
    assert((2 == cast(int32, (int64*)arg1.shape[0])), "Argument arg1.shape[0] has an unsatisfied constraint: (2 == int32(arg1.shape[0]))")
    assert((10 == cast(int32, (int64*)arg1.shape[1])), "Argument arg1.shape[1] has an unsatisfied constraint: (10 == int32(arg1.shape[1]))")
    assert((257 == cast(int32, (int64*)arg1.shape[2])), "Argument arg1.shape[2] has an unsatisfied constraint: (257 == int32(arg1.shape[2]))")
    assert((1025 == cast(int32, (int64*)arg1.shape[3])), "Argument arg1.shape[3] has an unsatisfied constraint: (1025 == int32(arg1.shape[3]))")
     {
      if !@tir.isnullptr(arg1.strides, dtype=bool) {
        assert(((((1 == cast(int32, (int64*)arg1.strides[3])) && (1025 == cast(int32, (int64*)arg1.strides[2]))) && (263425 == cast(int32, (int64*)arg1.strides[1]))) && (2634250 == cast(int32, (int64*)arg1.strides[0]))), "arg1.strides: expected to be compact array")
        0
      }
      assert((0u64 == @tir.tvm_struct_get(arg1, 0, 8, dtype=uint64)), "Argument arg1.byte_offset has an unsatisfied constraint: ((uint64)0 == tir.tvm_struct_get(arg1, 0, 8))")
      assert((2 == @tir.tvm_struct_get(arg1, 0, 10, dtype=int32)), "Argument arg1.device_type has an unsatisfied constraint: (2 == tir.tvm_struct_get(arg1, 0, 10))")
      assert((dev_id == @tir.tvm_struct_get(arg1, 0, 9, dtype=int32)), "Argument arg1.device_id has an unsatisfied constraint: (dev_id == tir.tvm_struct_get(arg1, 0, 9))")
       {
         {
          @tir.tvm_struct_set(stack_value, 0, 12, cast(int64, 2), dtype=int32)
          stack_tcode[0] = 0
          @tir.tvm_struct_set(stack_value, 1, 12, cast(int64, dev_id), dtype=int32)
          stack_tcode[1] = 0
          @tir.tvm_call_packed_lowered("__tvm_set_device", stack_value, stack_tcode, 0, 2, dtype=int32)
        }
        attr [0] "compute_scope" = "fused_nn_softmax_compute_";
        attr [T_softmax_maxelem: Pointer(float32)] "storage_scope" = "global";
        attr [T_softmax_maxelem] "storage_alignment" = 128 {
          let T_softmax_maxelem = @tir.TVMBackendAllocWorkspace(2, dev_id, 20560u64, 2, 32, dtype=handle)
           {
            if @tir.isnullptr(T_softmax_maxelem, dtype=bool) {
              @tir.tvm_throw_last_error(, dtype=int32)
            }
            attr [T_softmax_exp: Pointer(float32)] "storage_scope" = "global";
            attr [T_softmax_exp] "storage_alignment" = 128 {
              let T_softmax_exp = @tir.TVMBackendAllocWorkspace(2, dev_id, 21074000u64, 2, 32, dtype=handle)
               {
                if @tir.isnullptr(T_softmax_exp, dtype=bool) {
                  @tir.tvm_throw_last_error(, dtype=int32)
                }
                 {
                   {
                    @tir.tvm_struct_set(stack_value, 0, 12, T_softmax_maxelem, dtype=int32)
                    stack_tcode[0] = 3
                    @tir.tvm_struct_set(stack_value, 1, 12, placeholder, dtype=int32)
                    stack_tcode[1] = 3
                    @tir.tvm_struct_set(stack_value, 2, 12, cast(int64, 6), dtype=int32)
                    stack_tcode[2] = 0
                    @tir.tvm_struct_set(stack_value, 3, 12, cast(int64, 1024), dtype=int32)
                    stack_tcode[3] = 0
                    @tir.tvm_call_packed_lowered("fused_nn_softmax_kernel0", stack_value, stack_tcode, 0, 4, dtype=int32)
                  }
                   {
                    @tir.tvm_struct_set(stack_value, 0, 12, T_softmax_exp, dtype=int32)
                    stack_tcode[0] = 3
                    @tir.tvm_struct_set(stack_value, 1, 12, placeholder, dtype=int32)
                    stack_tcode[1] = 3
                    @tir.tvm_struct_set(stack_value, 2, 12, T_softmax_maxelem, dtype=int32)
                    stack_tcode[2] = 3
                    @tir.tvm_struct_set(stack_value, 3, 12, cast(int64, 256), dtype=int32)
                    stack_tcode[3] = 0
                    @tir.tvm_struct_set(stack_value, 4, 12, cast(int64, 1024), dtype=int32)
                    stack_tcode[4] = 0
                    @tir.tvm_call_packed_lowered("fused_nn_softmax_kernel1", stack_value, stack_tcode, 0, 5, dtype=int32)
                  }
                   {
                    @tir.tvm_struct_set(stack_value, 0, 12, T_softmax_maxelem, dtype=int32)
                    stack_tcode[0] = 3
                    @tir.tvm_struct_set(stack_value, 1, 12, T_softmax_exp, dtype=int32)
                    stack_tcode[1] = 3
                    @tir.tvm_struct_set(stack_value, 2, 12, cast(int64, 6), dtype=int32)
                    stack_tcode[2] = 0
                    @tir.tvm_struct_set(stack_value, 3, 12, cast(int64, 1024), dtype=int32)
                    stack_tcode[3] = 0
                    @tir.tvm_call_packed_lowered("fused_nn_softmax_kernel2", stack_value, stack_tcode, 0, 4, dtype=int32)
                  }
                   {
                    @tir.tvm_struct_set(stack_value, 0, 12, T_softmax_norm, dtype=int32)
                    stack_tcode[0] = 3
                    @tir.tvm_struct_set(stack_value, 1, 12, T_softmax_exp, dtype=int32)
                    stack_tcode[1] = 3
                    @tir.tvm_struct_set(stack_value, 2, 12, T_softmax_maxelem, dtype=int32)
                    stack_tcode[2] = 3
                    @tir.tvm_struct_set(stack_value, 3, 12, cast(int64, 256), dtype=int32)
                    stack_tcode[3] = 0
                    @tir.tvm_struct_set(stack_value, 4, 12, cast(int64, 1024), dtype=int32)
                    stack_tcode[4] = 0
                    @tir.tvm_call_packed_lowered("fused_nn_softmax_kernel3", stack_value, stack_tcode, 0, 5, dtype=int32)
                  }
                }
              }
              if (@tir.TVMBackendFreeWorkspace(2, dev_id, T_softmax_exp, dtype=int32) != 0) {
                @tir.tvm_throw_last_error(, dtype=int32)
              }
            }
          }
          if (@tir.TVMBackendFreeWorkspace(2, dev_id, T_softmax_maxelem, dtype=int32) != 0) {
            @tir.tvm_throw_last_error(, dtype=int32)
          }
        }
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass Filter
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential Filter
primfn(T_softmax_norm: Pointer(float32), T_softmax_exp: Pointer(float32), T_softmax_maxelem: Pointer(float32)) -> ()
  attr = {"target": meta[Target][0], "tir.noalias": 1, "global_symbol": "fused_nn_softmax_kernel3", "tir.device_thread_axis": [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x"), IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")], "calling_conv": 2} {
  attr [IterVar(blockIdx.x, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 21) {
    if ((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) < 5268500) {
      T_softmax_norm[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = ((float32*)T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] / (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x), 1025)])
    }
  }
}

primfn(T_softmax_exp_1: Pointer(float32), placeholder: Pointer(float32), T_softmax_maxelem_1: Pointer(float32)) -> ()
  attr = {"target": meta[Target][0], "tir.noalias": 1, "global_symbol": "fused_nn_softmax_kernel1", "tir.device_thread_axis": [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x"), IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")], "calling_conv": 2} {
  attr [IterVar(blockIdx.x_1, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (i0.i1.fused.i2.fused.i3.fused.outer_1: int32, 0, 21) {
    if ((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1) < 5268500) {
      T_softmax_exp_1[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] = @tir.exp(((float32*)placeholder[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] - (float32*)T_softmax_maxelem_1[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1), 1025)]), dtype=float32)
    }
  }
}

primfn(T_softmax_maxelem_2: Pointer(float32), placeholder_1: Pointer(float32)) -> ()
  attr = {"target": meta[Target][0], "tir.noalias": 1, "global_symbol": "fused_nn_softmax_kernel0", "tir.device_thread_axis": [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x"), IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")], "calling_conv": 2} {
  attr [IterVar(blockIdx.x_2, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
  attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
    if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
      T_softmax_maxelem_2[((blockIdx.x_2*1024) + threadIdx.x_2)] = -3.40282e+38f32
    }
    for (k: int32, 0, 1025) {
      if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
        T_softmax_maxelem_2[((blockIdx.x_2*1024) + threadIdx.x_2)] = max((float32*)T_softmax_maxelem_2[((blockIdx.x_2*1024) + threadIdx.x_2)], (float32*)placeholder_1[(((blockIdx.x_2*1049600) + (threadIdx.x_2*1025)) + k)])
      }
    }
  }
}

primfn(T_softmax_maxelem_3: Pointer(float32), T_softmax_exp_2: Pointer(float32)) -> ()
  attr = {"target": meta[Target][0], "tir.noalias": 1, "global_symbol": "fused_nn_softmax_kernel2", "tir.device_thread_axis": [IterVar(blockIdx.x_3: int32, (nullptr), "ThreadIndex", "blockIdx.x"), IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")], "calling_conv": 2} {
  attr [IterVar(blockIdx.x_3, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
  attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
    if (((blockIdx.x_3*1024) + threadIdx.x_3) < 5140) {
      T_softmax_maxelem_3[((blockIdx.x_3*1024) + threadIdx.x_3)] = 0f32
    }
    for (k_1: int32, 0, 1025) {
      if (((blockIdx.x_3*1024) + threadIdx.x_3) < 5140) {
        T_softmax_maxelem_3[((blockIdx.x_3*1024) + threadIdx.x_3)] = ((float32*)T_softmax_maxelem_3[((blockIdx.x_3*1024) + threadIdx.x_3)] + (float32*)T_softmax_exp_2[(((blockIdx.x_3*1049600) + (threadIdx.x_3*1025)) + k_1)])
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass BindTarget
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential BindTarget
primfn(T_softmax_norm: Pointer(float32), T_softmax_exp: Pointer(float32), T_softmax_maxelem: Pointer(float32)) -> ()
  attr = {"target": meta[Target][0], "tir.noalias": 1, "global_symbol": "fused_nn_softmax_kernel3", "tir.device_thread_axis": [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x"), IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")], "calling_conv": 2} {
  attr [IterVar(blockIdx.x, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 21) {
    if ((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) < 5268500) {
      T_softmax_norm[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = ((float32*)T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] / (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x), 1025)])
    }
  }
}

primfn(T_softmax_exp_1: Pointer(float32), placeholder: Pointer(float32), T_softmax_maxelem_1: Pointer(float32)) -> ()
  attr = {"target": meta[Target][0], "tir.noalias": 1, "global_symbol": "fused_nn_softmax_kernel1", "tir.device_thread_axis": [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x"), IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")], "calling_conv": 2} {
  attr [IterVar(blockIdx.x_1, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (i0.i1.fused.i2.fused.i3.fused.outer_1: int32, 0, 21) {
    if ((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1) < 5268500) {
      T_softmax_exp_1[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] = @tir.exp(((float32*)placeholder[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] - (float32*)T_softmax_maxelem_1[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1), 1025)]), dtype=float32)
    }
  }
}

primfn(T_softmax_maxelem_2: Pointer(float32), placeholder_1: Pointer(float32)) -> ()
  attr = {"target": meta[Target][0], "tir.noalias": 1, "global_symbol": "fused_nn_softmax_kernel0", "tir.device_thread_axis": [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x"), IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")], "calling_conv": 2} {
  attr [IterVar(blockIdx.x_2, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
  attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
    if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
      T_softmax_maxelem_2[((blockIdx.x_2*1024) + threadIdx.x_2)] = -3.40282e+38f32
    }
    for (k: int32, 0, 1025) {
      if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
        T_softmax_maxelem_2[((blockIdx.x_2*1024) + threadIdx.x_2)] = max((float32*)T_softmax_maxelem_2[((blockIdx.x_2*1024) + threadIdx.x_2)], (float32*)placeholder_1[(((blockIdx.x_2*1049600) + (threadIdx.x_2*1025)) + k)])
      }
    }
  }
}

primfn(T_softmax_maxelem_3: Pointer(float32), T_softmax_exp_2: Pointer(float32)) -> ()
  attr = {"target": meta[Target][0], "tir.noalias": 1, "global_symbol": "fused_nn_softmax_kernel2", "tir.device_thread_axis": [IterVar(blockIdx.x_3: int32, (nullptr), "ThreadIndex", "blockIdx.x"), IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")], "calling_conv": 2} {
  attr [IterVar(blockIdx.x_3, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
  attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
    if (((blockIdx.x_3*1024) + threadIdx.x_3) < 5140) {
      T_softmax_maxelem_3[((blockIdx.x_3*1024) + threadIdx.x_3)] = 0f32
    }
    for (k_1: int32, 0, 1025) {
      if (((blockIdx.x_3*1024) + threadIdx.x_3) < 5140) {
        T_softmax_maxelem_3[((blockIdx.x_3*1024) + threadIdx.x_3)] = ((float32*)T_softmax_maxelem_3[((blockIdx.x_3*1024) + threadIdx.x_3)] + (float32*)T_softmax_exp_2[(((blockIdx.x_3*1049600) + (threadIdx.x_3*1025)) + k_1)])
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass tir.LowerWarpMemory
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential tir.LowerWarpMemory
primfn(T_softmax_norm: Pointer(float32), T_softmax_exp: Pointer(float32), T_softmax_maxelem: Pointer(float32)) -> ()
  attr = {"target": meta[Target][0], "tir.noalias": 1, "global_symbol": "fused_nn_softmax_kernel3", "tir.device_thread_axis": [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x"), IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")], "calling_conv": 2} {
  attr [IterVar(blockIdx.x, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 21) {
    if ((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) < 5268500) {
      T_softmax_norm[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = ((float32*)T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] / (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x), 1025)])
    }
  }
}

primfn(T_softmax_exp_1: Pointer(float32), placeholder: Pointer(float32), T_softmax_maxelem_1: Pointer(float32)) -> ()
  attr = {"target": meta[Target][0], "tir.noalias": 1, "global_symbol": "fused_nn_softmax_kernel1", "tir.device_thread_axis": [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x"), IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")], "calling_conv": 2} {
  attr [IterVar(blockIdx.x_1, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (i0.i1.fused.i2.fused.i3.fused.outer_1: int32, 0, 21) {
    if ((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1) < 5268500) {
      T_softmax_exp_1[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] = @tir.exp(((float32*)placeholder[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] - (float32*)T_softmax_maxelem_1[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1), 1025)]), dtype=float32)
    }
  }
}

primfn(T_softmax_maxelem_2: Pointer(float32), placeholder_1: Pointer(float32)) -> ()
  attr = {"target": meta[Target][0], "tir.noalias": 1, "global_symbol": "fused_nn_softmax_kernel0", "tir.device_thread_axis": [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x"), IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")], "calling_conv": 2} {
  attr [IterVar(blockIdx.x_2, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
  attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
    if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
      T_softmax_maxelem_2[((blockIdx.x_2*1024) + threadIdx.x_2)] = -3.40282e+38f32
    }
    for (k: int32, 0, 1025) {
      if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
        T_softmax_maxelem_2[((blockIdx.x_2*1024) + threadIdx.x_2)] = max((float32*)T_softmax_maxelem_2[((blockIdx.x_2*1024) + threadIdx.x_2)], (float32*)placeholder_1[(((blockIdx.x_2*1049600) + (threadIdx.x_2*1025)) + k)])
      }
    }
  }
}

primfn(T_softmax_maxelem_3: Pointer(float32), T_softmax_exp_2: Pointer(float32)) -> ()
  attr = {"target": meta[Target][0], "tir.noalias": 1, "global_symbol": "fused_nn_softmax_kernel2", "tir.device_thread_axis": [IterVar(blockIdx.x_3: int32, (nullptr), "ThreadIndex", "blockIdx.x"), IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")], "calling_conv": 2} {
  attr [IterVar(blockIdx.x_3, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
  attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
    if (((blockIdx.x_3*1024) + threadIdx.x_3) < 5140) {
      T_softmax_maxelem_3[((blockIdx.x_3*1024) + threadIdx.x_3)] = 0f32
    }
    for (k_1: int32, 0, 1025) {
      if (((blockIdx.x_3*1024) + threadIdx.x_3) < 5140) {
        T_softmax_maxelem_3[((blockIdx.x_3*1024) + threadIdx.x_3)] = ((float32*)T_softmax_maxelem_3[((blockIdx.x_3*1024) + threadIdx.x_3)] + (float32*)T_softmax_exp_2[(((blockIdx.x_3*1049600) + (threadIdx.x_3*1025)) + k_1)])
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass tir.Simplify
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (i0.i1.fused.i2.fused.i3.fused.outer: int32 >= 0)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (i0.i1.fused.i2.fused.i3.fused.outer: int32 < 21)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = ((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify ((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = ((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition ((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify condition((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint ((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((float32*)T_softmax_exp: Pointer(float32)[(((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32)] / (float32*)T_softmax_maxelem: Pointer(float32)[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x), 1025)])
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify ((float32*)T_softmax_exp: Pointer(float32)[(((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32)] / (float32*)T_softmax_maxelem: Pointer(float32)[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x), 1025)])
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify (((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify (((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (i0.i1.fused.i2.fused.i3.fused.outer: int32 >= 0)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (i0.i1.fused.i2.fused.i3.fused.outer: int32 < 21)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = ((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify ((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = ((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition ((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify condition((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint ((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify @tir.exp(((float32*)placeholder: Pointer(float32)[(((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32)] - (float32*)T_softmax_maxelem: Pointer(float32)[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x), 1025)]), dtype=float32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify @tir.exp(((float32*)placeholder: Pointer(float32)[(((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32)] - (float32*)T_softmax_maxelem: Pointer(float32)[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x), 1025)]), dtype=float32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify (((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify (((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify condition(((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify -3.40282e+38f32
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify -3.40282e+38f32
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((blockIdx.x: int32*1024) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify ((blockIdx.x: int32*1024) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (k: int32 >= 0)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (k: int32 < 1025)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify condition(((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify max((float32*)T_softmax_maxelem: Pointer(float32)[((blockIdx.x: int32*1024) + threadIdx.x: int32)], (float32*)placeholder: Pointer(float32)[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k: int32)])
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify max((float32*)T_softmax_maxelem: Pointer(float32)[((blockIdx.x: int32*1024) + threadIdx.x: int32)], (float32*)placeholder: Pointer(float32)[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k: int32)])
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((blockIdx.x: int32*1024) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify ((blockIdx.x: int32*1024) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify condition(((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify 0f32
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify 0f32
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((blockIdx.x: int32*1024) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify ((blockIdx.x: int32*1024) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (k: int32 >= 0)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (k: int32 < 1025)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify condition(((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((float32*)T_softmax_maxelem: Pointer(float32)[((blockIdx.x: int32*1024) + threadIdx.x: int32)] + (float32*)T_softmax_exp: Pointer(float32)[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k: int32)])
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify ((float32*)T_softmax_maxelem: Pointer(float32)[((blockIdx.x: int32*1024) + threadIdx.x: int32)] + (float32*)T_softmax_exp: Pointer(float32)[(((blockIdx.x*1049600) + (threadIdx.x*1025)) + k: int32)])
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:131: After rewrite simplify ((blockIdx.x: int32*1024) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:134: After canonical simplify ((blockIdx.x: int32*1024) + threadIdx.x: int32)
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential tir.Simplify
primfn(T_softmax_norm: Pointer(float32), T_softmax_exp: Pointer(float32), T_softmax_maxelem: Pointer(float32)) -> ()
  attr = {"target": meta[Target][0], "tir.noalias": 1, "global_symbol": "fused_nn_softmax_kernel3", "tir.device_thread_axis": [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x"), IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")], "calling_conv": 2} {
  attr [IterVar(blockIdx.x, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 21) {
    if ((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) < 5268500) {
      T_softmax_norm[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = ((float32*)T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] / (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x), 1025)])
    }
  }
}

primfn(T_softmax_exp_1: Pointer(float32), placeholder: Pointer(float32), T_softmax_maxelem_1: Pointer(float32)) -> ()
  attr = {"target": meta[Target][0], "tir.noalias": 1, "global_symbol": "fused_nn_softmax_kernel1", "tir.device_thread_axis": [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x"), IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")], "calling_conv": 2} {
  attr [IterVar(blockIdx.x_1, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (i0.i1.fused.i2.fused.i3.fused.outer_1: int32, 0, 21) {
    if ((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1) < 5268500) {
      T_softmax_exp_1[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] = @tir.exp(((float32*)placeholder[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] - (float32*)T_softmax_maxelem_1[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1), 1025)]), dtype=float32)
    }
  }
}

primfn(T_softmax_maxelem_2: Pointer(float32), placeholder_1: Pointer(float32)) -> ()
  attr = {"target": meta[Target][0], "tir.noalias": 1, "global_symbol": "fused_nn_softmax_kernel0", "tir.device_thread_axis": [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x"), IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")], "calling_conv": 2} {
  attr [IterVar(blockIdx.x_2, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
  attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
    if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
      T_softmax_maxelem_2[((blockIdx.x_2*1024) + threadIdx.x_2)] = -3.40282e+38f32
    }
    for (k: int32, 0, 1025) {
      if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
        T_softmax_maxelem_2[((blockIdx.x_2*1024) + threadIdx.x_2)] = max((float32*)T_softmax_maxelem_2[((blockIdx.x_2*1024) + threadIdx.x_2)], (float32*)placeholder_1[(((blockIdx.x_2*1049600) + (threadIdx.x_2*1025)) + k)])
      }
    }
  }
}

primfn(T_softmax_maxelem_3: Pointer(float32), T_softmax_exp_2: Pointer(float32)) -> ()
  attr = {"target": meta[Target][0], "tir.noalias": 1, "global_symbol": "fused_nn_softmax_kernel2", "tir.device_thread_axis": [IterVar(blockIdx.x_3: int32, (nullptr), "ThreadIndex", "blockIdx.x"), IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")], "calling_conv": 2} {
  attr [IterVar(blockIdx.x_3, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
  attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
    if (((blockIdx.x_3*1024) + threadIdx.x_3) < 5140) {
      T_softmax_maxelem_3[((blockIdx.x_3*1024) + threadIdx.x_3)] = 0f32
    }
    for (k_1: int32, 0, 1025) {
      if (((blockIdx.x_3*1024) + threadIdx.x_3) < 5140) {
        T_softmax_maxelem_3[((blockIdx.x_3*1024) + threadIdx.x_3)] = ((float32*)T_softmax_maxelem_3[((blockIdx.x_3*1024) + threadIdx.x_3)] + (float32*)T_softmax_exp_2[(((blockIdx.x_3*1049600) + (threadIdx.x_3*1025)) + k_1)])
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass tir.LowerCustomDatatypes
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential tir.LowerCustomDatatypes
primfn(T_softmax_norm: Pointer(float32), T_softmax_exp: Pointer(float32), T_softmax_maxelem: Pointer(float32)) -> ()
  attr = {"target": meta[Target][0], "tir.noalias": 1, "global_symbol": "fused_nn_softmax_kernel3", "tir.device_thread_axis": [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x"), IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")], "calling_conv": 2} {
  attr [IterVar(blockIdx.x, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 21) {
    if ((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) < 5268500) {
      T_softmax_norm[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = ((float32*)T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] / (float32*)T_softmax_maxelem[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x), 1025)])
    }
  }
}

primfn(T_softmax_exp_1: Pointer(float32), placeholder: Pointer(float32), T_softmax_maxelem_1: Pointer(float32)) -> ()
  attr = {"target": meta[Target][0], "tir.noalias": 1, "global_symbol": "fused_nn_softmax_kernel1", "tir.device_thread_axis": [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x"), IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")], "calling_conv": 2} {
  attr [IterVar(blockIdx.x_1, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (i0.i1.fused.i2.fused.i3.fused.outer_1: int32, 0, 21) {
    if ((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1) < 5268500) {
      T_softmax_exp_1[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] = @tir.exp(((float32*)placeholder[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] - (float32*)T_softmax_maxelem_1[floordiv((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1), 1025)]), dtype=float32)
    }
  }
}

primfn(T_softmax_maxelem_2: Pointer(float32), placeholder_1: Pointer(float32)) -> ()
  attr = {"target": meta[Target][0], "tir.noalias": 1, "global_symbol": "fused_nn_softmax_kernel0", "tir.device_thread_axis": [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x"), IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")], "calling_conv": 2} {
  attr [IterVar(blockIdx.x_2, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
  attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
    if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
      T_softmax_maxelem_2[((blockIdx.x_2*1024) + threadIdx.x_2)] = -3.40282e+38f32
    }
    for (k: int32, 0, 1025) {
      if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
        T_softmax_maxelem_2[((blockIdx.x_2*1024) + threadIdx.x_2)] = max((float32*)T_softmax_maxelem_2[((blockIdx.x_2*1024) + threadIdx.x_2)], (float32*)placeholder_1[(((blockIdx.x_2*1049600) + (threadIdx.x_2*1025)) + k)])
      }
    }
  }
}

primfn(T_softmax_maxelem_3: Pointer(float32), T_softmax_exp_2: Pointer(float32)) -> ()
  attr = {"target": meta[Target][0], "tir.noalias": 1, "global_symbol": "fused_nn_softmax_kernel2", "tir.device_thread_axis": [IterVar(blockIdx.x_3: int32, (nullptr), "ThreadIndex", "blockIdx.x"), IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")], "calling_conv": 2} {
  attr [IterVar(blockIdx.x_3, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
  attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
    if (((blockIdx.x_3*1024) + threadIdx.x_3) < 5140) {
      T_softmax_maxelem_3[((blockIdx.x_3*1024) + threadIdx.x_3)] = 0f32
    }
    for (k_1: int32, 0, 1025) {
      if (((blockIdx.x_3*1024) + threadIdx.x_3) < 5140) {
        T_softmax_maxelem_3[((blockIdx.x_3*1024) + threadIdx.x_3)] = ((float32*)T_softmax_maxelem_3[((blockIdx.x_3*1024) + threadIdx.x_3)] + (float32*)T_softmax_exp_2[(((blockIdx.x_3*1049600) + (threadIdx.x_3*1025)) + k_1)])
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass tir.LowerIntrin
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = ((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = ((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition ((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify condition((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint ((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = ((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = ((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition ((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify condition((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint ((((i0.i1.fused.i2.fused.i3.fused.outer: int32*262144) + (blockIdx.x: int32*1024)) + threadIdx.x: int32) < 5268500)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify condition(((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify condition(((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify condition(((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:57: Before VisitExpr, condition = (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:59: After VisitExpr, condition = (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:69: Judge condition (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/ir_mutator_with_analyzer.cc:70: After simplify condition(((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (((blockIdx.x: int32*1024) + threadIdx.x: int32) < 5140)
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential tir.LowerIntrin
primfn(T_softmax_norm: Pointer(float32), T_softmax_exp: Pointer(float32), T_softmax_maxelem: Pointer(float32)) -> ()
  attr = {"target": meta[Target][0], "tir.noalias": 1, "global_symbol": "fused_nn_softmax_kernel3", "tir.device_thread_axis": [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x"), IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")], "calling_conv": 2} {
  attr [IterVar(blockIdx.x, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 21) {
    if ((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) < 5268500) {
      T_softmax_norm[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = ((float32*)T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] / (float32*)T_softmax_maxelem[((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) / 1025)])
    }
  }
}

primfn(T_softmax_exp_1: Pointer(float32), placeholder: Pointer(float32), T_softmax_maxelem_1: Pointer(float32)) -> ()
  attr = {"target": meta[Target][0], "tir.noalias": 1, "global_symbol": "fused_nn_softmax_kernel1", "tir.device_thread_axis": [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x"), IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")], "calling_conv": 2} {
  attr [IterVar(blockIdx.x_1, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (i0.i1.fused.i2.fused.i3.fused.outer_1: int32, 0, 21) {
    if ((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1) < 5268500) {
      T_softmax_exp_1[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] = @tir.call_pure_extern("__expf", ((float32*)placeholder[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] - (float32*)T_softmax_maxelem_1[((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1) / 1025)]), dtype=float32)
    }
  }
}

primfn(T_softmax_maxelem_2: Pointer(float32), placeholder_1: Pointer(float32)) -> ()
  attr = {"target": meta[Target][0], "tir.noalias": 1, "global_symbol": "fused_nn_softmax_kernel0", "tir.device_thread_axis": [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x"), IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")], "calling_conv": 2} {
  attr [IterVar(blockIdx.x_2, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
  attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
    if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
      T_softmax_maxelem_2[((blockIdx.x_2*1024) + threadIdx.x_2)] = -3.40282e+38f32
    }
    for (k: int32, 0, 1025) {
      if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
        T_softmax_maxelem_2[((blockIdx.x_2*1024) + threadIdx.x_2)] = max((float32*)T_softmax_maxelem_2[((blockIdx.x_2*1024) + threadIdx.x_2)], (float32*)placeholder_1[(((blockIdx.x_2*1049600) + (threadIdx.x_2*1025)) + k)])
      }
    }
  }
}

primfn(T_softmax_maxelem_3: Pointer(float32), T_softmax_exp_2: Pointer(float32)) -> ()
  attr = {"target": meta[Target][0], "tir.noalias": 1, "global_symbol": "fused_nn_softmax_kernel2", "tir.device_thread_axis": [IterVar(blockIdx.x_3: int32, (nullptr), "ThreadIndex", "blockIdx.x"), IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")], "calling_conv": 2} {
  attr [IterVar(blockIdx.x_3, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
  attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
    if (((blockIdx.x_3*1024) + threadIdx.x_3) < 5140) {
      T_softmax_maxelem_3[((blockIdx.x_3*1024) + threadIdx.x_3)] = 0f32
    }
    for (k_1: int32, 0, 1025) {
      if (((blockIdx.x_3*1024) + threadIdx.x_3) < 5140) {
        T_softmax_maxelem_3[((blockIdx.x_3*1024) + threadIdx.x_3)] = ((float32*)T_softmax_maxelem_3[((blockIdx.x_3*1024) + threadIdx.x_3)] + (float32*)T_softmax_exp_2[(((blockIdx.x_3*1049600) + (threadIdx.x_3*1025)) + k_1)])
      }
    }
  }
}


[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:463: DOING Pass tir.LowerDeviceStorageAccessInfo
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:466: DEPENDENCIES: 
[15:20:36] /workspace/home/codes/tvm/src/ir/transform.cc:473: After tir sequential tir.LowerDeviceStorageAccessInfo
primfn(T_softmax_norm: Pointer(float32), T_softmax_exp: Pointer(float32), T_softmax_maxelem: Pointer(float32)) -> ()
  attr = {"target": meta[Target][0], "tir.noalias": 1, "global_symbol": "fused_nn_softmax_kernel3", "tir.device_thread_axis": [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x"), IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")], "calling_conv": 2} {
  attr [IterVar(blockIdx.x, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (i0.i1.fused.i2.fused.i3.fused.outer: int32, 0, 21) {
    if ((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) < 5268500) {
      T_softmax_norm[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = ((float32*)T_softmax_exp[(((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] / (float32*)T_softmax_maxelem[((((i0.i1.fused.i2.fused.i3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) / 1025)])
    }
  }
}

primfn(T_softmax_exp_1: Pointer(float32), placeholder: Pointer(float32), T_softmax_maxelem_1: Pointer(float32)) -> ()
  attr = {"target": meta[Target][0], "tir.noalias": 1, "global_symbol": "fused_nn_softmax_kernel1", "tir.device_thread_axis": [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x"), IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")], "calling_conv": 2} {
  attr [IterVar(blockIdx.x_1, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 256;
  attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024;
  for (i0.i1.fused.i2.fused.i3.fused.outer_1: int32, 0, 21) {
    if ((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1) < 5268500) {
      T_softmax_exp_1[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] = @tir.call_pure_extern("__expf", ((float32*)placeholder[(((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1)] - (float32*)T_softmax_maxelem_1[((((i0.i1.fused.i2.fused.i3.fused.outer_1*262144) + (blockIdx.x_1*1024)) + threadIdx.x_1) / 1025)]), dtype=float32)
    }
  }
}

primfn(T_softmax_maxelem_2: Pointer(float32), placeholder_1: Pointer(float32)) -> ()
  attr = {"target": meta[Target][0], "tir.noalias": 1, "global_symbol": "fused_nn_softmax_kernel0", "tir.device_thread_axis": [IterVar(blockIdx.x_2: int32, (nullptr), "ThreadIndex", "blockIdx.x"), IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")], "calling_conv": 2} {
  attr [IterVar(blockIdx.x_2, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
  attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
    if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
      T_softmax_maxelem_2[((blockIdx.x_2*1024) + threadIdx.x_2)] = -3.40282e+38f32
    }
    for (k: int32, 0, 1025) {
      if (((blockIdx.x_2*1024) + threadIdx.x_2) < 5140) {
        T_softmax_maxelem_2[((blockIdx.x_2*1024) + threadIdx.x_2)] = max((float32*)T_softmax_maxelem_2[((blockIdx.x_2*1024) + threadIdx.x_2)], (float32*)placeholder_1[(((blockIdx.x_2*1049600) + (threadIdx.x_2*1025)) + k)])
      }
    }
  }
}

primfn(T_softmax_maxelem_3: Pointer(float32), T_softmax_exp_2: Pointer(float32)) -> ()
  attr = {"target": meta[Target][0], "tir.noalias": 1, "global_symbol": "fused_nn_softmax_kernel2", "tir.device_thread_axis": [IterVar(blockIdx.x_3: int32, (nullptr), "ThreadIndex", "blockIdx.x"), IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")], "calling_conv": 2} {
  attr [IterVar(blockIdx.x_3, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6;
  attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 1024 {
    if (((blockIdx.x_3*1024) + threadIdx.x_3) < 5140) {
      T_softmax_maxelem_3[((blockIdx.x_3*1024) + threadIdx.x_3)] = 0f32
    }
    for (k_1: int32, 0, 1025) {
      if (((blockIdx.x_3*1024) + threadIdx.x_3) < 5140) {
        T_softmax_maxelem_3[((blockIdx.x_3*1024) + threadIdx.x_3)] = ((float32*)T_softmax_maxelem_3[((blockIdx.x_3*1024) + threadIdx.x_3)] + (float32*)T_softmax_exp_2[(((blockIdx.x_3*1049600) + (threadIdx.x_3*1025)) + k_1)])
      }
    }
  }
}


[15:20:37] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (num_args: int32 == 2)
[15:20:37] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint ((((arg0.code: int32 == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4))
[15:20:37] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint ((((arg1.code: int32 == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4))
[15:20:37] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (4 == @tir.tvm_struct_get(arg0: handle, 0, 4, dtype=int32))
[15:20:37] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (4 == @tir.tvm_struct_get(arg0: handle, 0, 4, dtype=int32))
[15:20:37] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (((@tir.tvm_struct_get(arg0: handle, 0, 5, dtype=uint8) == 2u8) && (@tir.tvm_struct_get(arg0, 0, 6, dtype=uint8) == 32u8)) && (@tir.tvm_struct_get(arg0, 0, 7, dtype=uint16) == 1u16))
[15:20:37] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (2 == cast(int32, (int64*)arg0.shape: handle[0]))
[15:20:37] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (10 == cast(int32, (int64*)arg0.shape: handle[1]))
[15:20:37] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (257 == cast(int32, (int64*)arg0.shape: handle[2]))
[15:20:37] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (1025 == cast(int32, (int64*)arg0.shape: handle[3]))
[15:20:37] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint ((((1 == cast(int32, (int64*)arg0.strides: handle[3])) && (1025 == cast(int32, (int64*)arg0.strides[2]))) && (263425 == cast(int32, (int64*)arg0.strides[1]))) && (2634250 == cast(int32, (int64*)arg0.strides[0])))
[15:20:37] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (0u64 == @tir.tvm_struct_get(arg0: handle, 0, 8, dtype=uint64))
[15:20:37] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (2 == @tir.tvm_struct_get(arg0: handle, 0, 10, dtype=int32))
[15:20:37] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (4 == @tir.tvm_struct_get(arg1: handle, 0, 4, dtype=int32))
[15:20:37] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (4 == @tir.tvm_struct_get(arg1: handle, 0, 4, dtype=int32))
[15:20:37] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (((@tir.tvm_struct_get(arg1: handle, 0, 5, dtype=uint8) == 2u8) && (@tir.tvm_struct_get(arg1, 0, 6, dtype=uint8) == 32u8)) && (@tir.tvm_struct_get(arg1, 0, 7, dtype=uint16) == 1u16))
[15:20:37] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (2 == cast(int32, (int64*)arg1.shape: handle[0]))
[15:20:37] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (10 == cast(int32, (int64*)arg1.shape: handle[1]))
[15:20:37] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (257 == cast(int32, (int64*)arg1.shape: handle[2]))
[15:20:37] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (1025 == cast(int32, (int64*)arg1.shape: handle[3]))
[15:20:37] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint ((((1 == cast(int32, (int64*)arg1.strides: handle[3])) && (1025 == cast(int32, (int64*)arg1.strides[2]))) && (263425 == cast(int32, (int64*)arg1.strides[1]))) && (2634250 == cast(int32, (int64*)arg1.strides[0])))
[15:20:37] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (0u64 == @tir.tvm_struct_get(arg1: handle, 0, 8, dtype=uint64))
[15:20:37] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (2 == @tir.tvm_struct_get(arg1: handle, 0, 10, dtype=int32))
[15:20:37] /workspace/home/codes/tvm/src/arith/analyzer.cc:69: enter constraint (dev_id: int32 == @tir.tvm_struct_get(arg1: handle, 0, 9, dtype=int32))
Raw module: 
def @main(%x: Tensor[(2, 10, 257, 1025), float32]) {
  nn.softmax(%x)
}

Running on (cuda, cuda(0))
Finish in 18.81123 ms
